## Teach Magic Decision 
valyria_magic_teach_decision = {
	populate_recipient_list = {
		scope:actor = { 
			zz_valyria_populate_mage_list_can_teach = yes
		}
	}
	is_shown = {
		scope:actor = {
			zz_valyria_is_mage_can_teach = yes 
			is_imprisoned = no
			is_ai = no
		}
		scope:recipient = {
			NOT = { 
				has_trait = zz_magister
				has_trait = dragon
			}
		}	
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_is_mage_can_teach = yes 
		}
	}
	cost = {
		piety = massive_piety_value
		gold = massive_gold_max_value
	}
	icon = icon_magic
	common_interaction = yes
	interface_priority = 1999
	category = interaction_magic_friendly

	cooldown_against_recipient = { days = 0 } 
	cooldown = { years = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	on_accept = {
		scope:secondary_recipient = {
			add_character_flag = { flag = zz_valyria_magic_taught_magic months = 72 } 
		}
		scope:actor = {
			scope:recipient = {
				add_trait_force_tooltip = zz_magister
				zz_random_gain_magic_spell = yes
			}
			
		}
	}
	auto_accept = yes
	ai_targets = {
		ai_recipients = self
	}

	ai_frequency = 12

	ai_will_do = {
		base = 0

	}
}

valyria_magic_teach_spell = {

	is_shown = {
		scope:actor = {
			is_ai = no
			is_imprisoned = no
		}
		scope:recipient = {
			has_trait = zz_magister
			NOT = { 
				has_trait = dragon
			}
		}	
	}
	is_valid_showing_failures_only = {
		scope:recipient = {
			has_trait = zz_magister
		}	
		scope:actor = {
			zz_valyria_is_mage_can_teach = yes 
		}
	}
	cost = {
		piety = minor_piety_value
	}
	icon = icon_magic
	common_interaction = yes
	interface_priority = 20000
	category = interaction_magic_friendly
	
	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	on_accept = {
		scope:actor = {
			save_scope_as = zz_magic_user
		}
		scope:recipient = {
			save_scope_as = zz_magic_learner
		}
		scope:actor = {
			remove_variable = zz_magic_teacher
			remove_variable = zz_magic_learner
			remove_variable = zz_magic_user

			set_variable = {
				name = zz_magic_user
				value = scope:zz_magic_user
			}
			set_variable = {
				name = zz_magic_learner
				value = scope:zz_magic_learner
			}			
			if = { 
				limit = {
					has_trait = zz_magister
					NOT = {
						THIS = scope:zz_magic_learner 
					}
				}
				scope:actor = {
					add_to_variable_list = {
						name = mage_list
						target = prev
					}
				}
			}
			every_living_mage = {
				limit = {
					liege_or_court_owner ?= scope:actor
					NOT = {
						THIS = scope:zz_magic_learner 
					}
				}
				scope:actor = {
					add_to_variable_list = {
						name = mage_list
						target = prev
					}
				}
			}
		}
	}
	auto_accept = yes
	ai_targets = {
		ai_recipients = self
	}

	ai_frequency = 12

	ai_will_do = {
		base = 0

	}
}
valyria_magic_self_wounding = {
	is_shown = {
		scope:recipient = {
			has_trait = zz_magister
			is_imprisoned = no
			NOT = { 
				has_trait = dragon
			}
		}
		scope:actor = {
			is_ai = no
		}
	}
	is_valid_showing_failures_only = {
		scope:recipient  = {
			has_trait = zz_magister
		}
	}
	icon = icon_magic
	common_interaction = yes
	interface_priority = 5000
	category = interaction_magic_hostile
	
	cooldown_against_recipient = { days = 30 } 
	cooldown = { years = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	on_accept = {
		scope:actor = {
			scope:recipient = {
				random = {
					chance = 50
					increase_wounds_effect = { REASON = blood_magic }
				}				
				if = {
					limit = {
						OR = {
							agot_is_dragonblood_character = yes
							agot_has_dragonblood_heritage = yes 
						}
					}
					zz_valyria_mana_gain = {
						MANAGAIN = 3
					}
				}
				else ={
					zz_valyria_mana_gain = {
						MANAGAIN = 1
					}
				}

			}
		}
	}
	auto_accept = yes
	ai_targets = {
		ai_recipients = self
	}

	ai_frequency = 12

	ai_will_do = {
		base = 0

	}
}

valyria_magic_use_artifact = {
	is_shown = {
		scope:recipient = {
			is_imprisoned = no
			is_ai = no
			always = no
			NOT = { 
				has_trait = dragon
			}
		}
	}
	is_valid_showing_failures_only = {
		scope:recipient  = {
			zz_valyria_has_artifact  = yes
		}
	}
	icon = icon_magic
	common_interaction = no
	interface_priority = 10
	category = interaction_secrets_of_valyria

	cooldown_against_recipient = { days = 90 } 
	cooldown = { years = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	on_accept = {
		scope:actor = {
			scope:recipient = {
				increase_wounds_effect = { REASON = blood_magic }
				if = {
					limit = {
						OR = {
							agot_is_dragonblood_character = yes
							agot_has_dragonblood_heritage = yes 
						}
					}
					zz_valyria_mana_gain = {
						MANAGAIN = 3
					}
				}
				else ={
					zz_valyria_mana_gain = {
						MANAGAIN = 1
					}
				}

			}
		}
	}
	auto_accept = yes
	ai_targets = {
		ai_recipients = self
	}

	ai_frequency = 12

	ai_will_do = {
		base = 0

	}
}

## Blood Sacrifice
valyria_designate_blood_magic_sacrifice.interaction = {
	icon = icon_scheme_abduct
	interface_priority = 1000
	category = interaction_magic_hostile
	desc = designate_gruesome_festivals_sacrifice.interaction_desc

	is_shown = {
		scope:actor = {
			is_ai = no
			zz_valyria_is_mage = yes 
		}
		scope:recipient = {
			is_imprisoned_by = scope:actor
			NOT = { has_character_modifier = gruesome_festivals_designated_sacrifice_fp1_modifier }
			NOT = { 
				has_trait = dragon
			}
		}
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_is_mage = yes 
		}
	}

	on_accept = {
		scope:actor = {
			hidden_effect = {
				every_prisoner = {
					limit = { has_character_modifier = gruesome_festivals_designated_sacrifice_fp1_modifier }
					save_scope_value_as = {
						name = removal_type
						value = flag:override
					}
					designate_gruesome_festivals_sacrifice_modifier_removed_effect = { DESIGNATOR = scope:actor }
				}
			}
		}
		scope:recipient = {
			send_interface_toast = {
				type = event_toast_effect_neutral
				title = designate_gruesome_festivals_sacrifice.interaction.recipient.notification.t
				left_icon = scope:actor
				designate_gruesome_festivals_sacrifice_interaction_effect = yes
				custom_tooltip = designate_gruesome_festivals_sacrifice_interaction.recipient.notification.tt
			}
		}

		# If we're a clan this interaction affects unity
		add_clan_unity_interaction_effect = {
			CHARACTER = scope:actor
			TARGET = scope:recipient
			VALUE = medium_unity_loss
			DESC = clan_unity_human_sacrifice.desc
			REVERSE_NON_HOUSE_TARGET = no
		}
	}

	auto_accept = yes
}


valyria_remove_designated_blood_magic_sacrifice.interaction = {
	icon = icon_scheme_abduct
	interface_priority = 1000
	category = interaction_magic_friendly
	desc = remove_designated_gruesome_festivals_sacrifice.interaction_desc

	is_shown = {
		scope:actor = { 
			is_ai = no
			zz_valyria_is_mage = yes  
		}
		scope:recipient = { has_character_modifier = gruesome_festivals_designated_sacrifice_fp1_modifier }
	}

	is_valid_showing_failures_only = {
	}

	on_accept = {
		scope:recipient = {
			save_scope_value_as = {
				name = removal_type
				value = flag:manual
			}
			designate_gruesome_festivals_sacrifice_modifier_removed_effect ={ DESIGNATOR = scope:actor }
		}

		# If we're a clan this interaction affects unity
		add_clan_unity_interaction_effect = {
			CHARACTER = scope:actor
			TARGET = scope:recipient
			VALUE = medium_unity_gain
			DESC = clan_unity_human_sacrifice_removal.desc
			REVERSE_NON_HOUSE_TARGET = no
		}
	}

	auto_accept = yes
}
## Blood Magic

zz_valyria_magic_blood_magic_01.interaction = {

	desc = zz_valyria_magic_blood_magic_01_mysteries_of_restoration.interaction.desc

	is_shown = {
		scope:actor = {
			is_ai = no
			
			is_imprisoned = no
			zz_valyria_is_mage = yes 
		}
		scope:recipient = {
		}	
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_is_mage = yes 
		}
	}
	icon = blood_magic
	#icon = shadow_magic	
	#icon = dream_magic
	common_interaction = yes
	interface_priority = 10000
	category = interaction_magic_friendly

	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	on_accept = {
		scope:actor = {
			save_scope_as = zz_magic_user
		}
		scope:recipient = {
			save_scope_as = zz_magic_target
		}
		scope:actor = {
			remove_variable = zz_magic_target
			remove_variable = zz_magic_caster
			remove_variable = zz_magic_user

			set_variable = {
				name = zz_magic_user
				value = scope:zz_magic_user
			}
			set_variable = {
				name = zz_magic_target
				value = scope:zz_magic_target
			}			
			if = { 
				limit = {
					has_trait = zz_magister
				}
				scope:actor = {
					add_to_variable_list = {
						name = mage_list
						target = prev
					}
				}
			}
			every_living_mage = {
				limit = {
					liege_or_court_owner ?= scope:actor
				}
				scope:actor = {
					add_to_variable_list = {
						name = mage_list
						target = prev
					}
				}
			}
		}
	}
	auto_accept = yes
	ai_targets = {
		ai_recipients = self
	}

	ai_frequency = 12

	ai_will_do = {
		base = 0

	}
}








## Fire Magic

zz_valyria_magic_fire_magic_01_mysteries_of_striking_flame.interaction = {
	
	desc = zz_valyria_magic_fire_magic_01_mysteries_of_striking_flame.interaction.desc
	icon = fire_magic
	common_interaction = no
	category = interaction_magic_hostile
	interface_priority = 599

	is_shown = {
		scope:actor = {
			is_ai = no
			zz_valyria_knows_spell_court = { 
				SPELL = zz_valyria_magic_fire_magic_01_mysteries_of_striking_flame
			}
			is_imprisoned = no
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = zz_valyria_magic_fire_magic_01_mysteries_of_striking_flame
				MANACOST = 2
			}
		}
	}

	populate_recipient_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = zz_valyria_magic_fire_magic_01_mysteries_of_striking_flame
				MANACOST = 2
			}
		}
	}


	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			save_scope_as = magic_user
			scope:secondary_recipient = {
			}
			zz_valyria_magic_cast_effect = { 
				MANACOST = 2
				SKILL = fire_magic
				SPELL  = zz_valyria_magic_fire_magic_01_mysteries_of_striking_flame
			}	
		}	
	}
	send_option = {
		is_shown = {
			scope:recipient = {
				is_ai = yes
				NOR = {
				}
			}
			scope:secondary_recipient = {
				is_in_army = no
			}
		}
		is_valid = {

		}
		flag = weaken_spell_flag
		localization = flame_strike_01
	}
	send_option = {
		is_shown = {
			scope:weaken_spell_flag = yes
			OR = {
				scope:secondary_recipient = scope:actor.location.county_controller
			}
			scope:secondary_recipient.location = scope:recipient.location
			scope:recipient = {
				is_ai = yes
				NOR = {
					is_imprisoned = yes
				}
			}
		}
		flag = flame_strike_imprison_flag
		localization = flame_strike_02
	}

	ai_potential = {
		NOT = {
			has_trait = compassionate
		}
	}
	ai_targets = {
		ai_recipients = war_enemies
		ai_recipients = scripted_relations
	}
	ai_frequency = 24
	send_options_exclusive = no
	auto_accept = yes
	ai_will_do = {
		base = 0
		modifier = {
			add = 50
			scope:recipient = {
				OR = {
					has_relation_rival = scope:actor
					has_relation_nemesis = scope:actor
					#has_relation_potential_rival = scope:actor
					is_at_war_with = scope:actor
				}
			}
		}
		modifier = {
			add = -50
			scope:actor = {
				has_trait = craven
			}
		}
		modifier = {
			add = -100
			scope:actor = {
				trait_is_criminal_in_faith_trigger = { TRAIT = witch FAITH = this.faith GENDER_CHARACTER = this }
				NOR = {
					has_trait = excommunicated
				}
			}
		}
	}
}
zz_valyria_magic_fire_magic_02_mysteries_of_the_blasting_flame.interaction = {
	
	desc = zz_valyria_magic_fire_magic_02_mysteries_of_the_blasting_flame.interaction.desc
	icon = fire_magic
	common_interaction = no
	category = interaction_magic_hostile
	interface_priority = 598

	is_shown = {
		scope:actor = {
			is_ai = no
			zz_valyria_knows_spell_court = { 
				SPELL = zz_valyria_magic_fire_magic_02_mysteries_of_the_blasting_flame
			}
			is_imprisoned = no
		}
		scope:recipient = {NOT = { has_trait = dragon }}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = zz_valyria_magic_fire_magic_02_mysteries_of_the_blasting_flame
				MANACOST = 3
			}
		}
		scope:recipient = { 
			is_commanding_army = yes 
		}
	}

	populate_recipient_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = zz_valyria_magic_fire_magic_02_mysteries_of_the_blasting_flame
				MANACOST = 3
			}
		}
	}

	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes

	on_accept = {
		
		scope:actor = {
			scope:secondary_recipient = {
			}
			zz_valyria_magic_cast_effect = { 
				MANACOST = 3
				SKILL = fire_magic
				SPELL  = zz_valyria_magic_fire_magic_02_mysteries_of_the_blasting_flame
			}	
		}
	}
	auto_accept = yes
}
zz_valyria_magic_fire_magic_03_mysteries_of_the_storm_of_fire.interaction = {
	
	desc = zz_valyria_magic_fire_magic_03_mysteries_of_the_storm_of_fire.interaction.desc
	icon = fire_magic
	common_interaction = no
	category = interaction_magic_hostile
	interface_priority = 597

	is_shown = {
		scope:actor = {
			is_ai = no
			zz_valyria_knows_spell_court = { 
				SPELL = zz_valyria_magic_fire_magic_03_mysteries_of_the_storm_of_fire
			}
			is_imprisoned = no
		}
		scope:recipient = {NOT = { has_trait = dragon }}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = zz_valyria_magic_fire_magic_03_mysteries_of_the_storm_of_fire
				MANACOST = 15
			}
		}
	}

	populate_recipient_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = zz_valyria_magic_fire_magic_03_mysteries_of_the_storm_of_fire
				MANACOST = 15
			}
		}
	}
	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes

	on_accept = {
		
		scope:actor = {
			scope:secondary_recipient = {
			}
			zz_valyria_magic_cast_effect = { 
				MANACOST = 15
				SKILL = fire_magic
				SPELL  = zz_valyria_magic_fire_magic_03_mysteries_of_the_storm_of_fire
			}	
		}
	}
	auto_accept = yes
}
zz_valyria_magic_fire_magic_04_mysteries_of_flaming_purification.interaction = {

	desc = zz_valyria_magic_fire_magic_04_mysteries_of_flaming_purification.interaction.desc
	icon = fire_magic
	common_interaction = no
	interface_priority = 596
	category = interaction_magic_friendly

	is_shown = {
		scope:actor = {
			is_ai = no
			zz_valyria_knows_spell_court = { 
				SPELL = zz_valyria_magic_blood_magic_01_mysteries_of_restoration
			}
			is_imprisoned = no
		}
		scope:recipient = {
			NOT = { has_trait = dragon }
		}	
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = zz_valyria_magic_fire_magic_04_mysteries_of_flaming_purification
				MANACOST = 2
			}
		}
	}
	populate_recipient_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = zz_valyria_magic_fire_magic_04_mysteries_of_flaming_purification
				MANACOST = 2
			}
		}
	}

	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	on_accept = {
		scope:actor = {
			save_scope_as = magic_user
			scope:secondary_recipient = {
			}
			zz_valyria_magic_cast_effect = { 
				MANACOST = 2
				SKILL = blood_magic
				SPELL = zz_valyria_magic_fire_magic_04_mysteries_of_flaming_purification
			}
		}
	}
	auto_accept = yes
	ai_targets = {
		ai_recipients = self
	}

	ai_frequency = 12

	ai_will_do = {
		base = 0

	}
}
zz_valyria_magic_fire_magic_05_mysteries_of_flaming_blades.interaction = {
	
	desc = zz_valyria_magic_fire_magic_05_mysteries_of_flaming_blades.interaction.desc
	icon = fire_magic
	common_interaction = no
	category = interaction_magic_friendly
	interface_priority = 595

	is_shown = {
		scope:actor = {
			is_ai = no
			zz_valyria_knows_spell_court = { 
				SPELL = zz_valyria_magic_fire_magic_05_mysteries_of_flaming_blades
			}
			is_imprisoned = no
		}
		scope:recipient = {NOT = { has_trait = dragon }}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = zz_valyria_magic_fire_magic_05_mysteries_of_flaming_blades
				MANACOST = 5
			}
		}
		scope:recipient = { 
			is_commanding_army = yes 
		}
	}

	populate_recipient_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = zz_valyria_magic_fire_magic_05_mysteries_of_flaming_blades
				MANACOST = 2
			}
		}
	}

	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes

	on_accept = {
		
		scope:actor = {
			scope:secondary_recipient = {

			}
			zz_valyria_magic_cast_effect = { 
				MANACOST = 5
				SKILL = fire_magic
				SPELL  = zz_valyria_magic_fire_magic_05_mysteries_of_flaming_blades
			}
		}
	}
	auto_accept = yes
}


## Wind Magic 
zz_valyria_magic_air_magic_01_mysteries_of_the_slicing_wind.interaction = {

	desc = zz_valyria_magic_air_magic_01_mysteries_of_the_slicing_wind.interaction.desc
	icon = air_magic
	common_interaction = no
	category = interaction_magic_hostile
	interface_priority = 499

	is_shown = {
		scope:actor = {
			is_ai = no
			zz_valyria_knows_spell_court = { 
				SPELL = zz_valyria_magic_air_magic_01_mysteries_of_the_slicing_wind
			}
			is_imprisoned = no
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = zz_valyria_magic_air_magic_01_mysteries_of_the_slicing_wind
				MANACOST = 2
			}
		}
	}

	populate_recipient_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = zz_valyria_magic_air_magic_01_mysteries_of_the_slicing_wind
				MANACOST = 2
			}
		}
	}

	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			save_scope_as = magic_user
			scope:secondary_recipient = {
			}
			zz_valyria_magic_cast_effect = { 
				MANACOST = 2
				SKILL = air_magic
				SPELL  = zz_valyria_magic_air_magic_01_mysteries_of_the_slicing_wind
			}	
		}	
	}
	send_option = {
		is_shown = {
			scope:recipient = {
				is_ai = yes
				NOR = {
				}
			}
			scope:secondary_recipient = {
				is_in_army = no
			}
		}
		is_valid = {

		}
		flag = weaken_spell_flag
		localization = flame_strike_01
	}
	send_option = {
		is_shown = {
			scope:weaken_spell_flag = yes
			OR = {
				scope:secondary_recipient = scope:actor.location.county_controller
			}
			scope:secondary_recipient.location = scope:recipient.location
			scope:recipient = {
				is_ai = yes
				NOR = {
					is_imprisoned = yes
				}
			}
		}
		flag = power_strike_imprison_flag
		localization = flame_strike_02
	}

	ai_potential = {
		NOT = {
			has_trait = compassionate
		}
	}
	ai_targets = {
		ai_recipients = war_enemies
		ai_recipients = scripted_relations
	}
	ai_frequency = 24
	send_options_exclusive = no
	auto_accept = yes
	ai_will_do = {
		base = 0
		modifier = {
			add = 50
			scope:recipient = {
				OR = {
					has_relation_rival = scope:actor
					has_relation_nemesis = scope:actor
					#has_relation_potential_rival = scope:actor
					is_at_war_with = scope:actor
				}
			}
		}
		modifier = {
			add = -50
			scope:actor = {
				has_trait = craven
			}
		}
		modifier = {
			add = -100
			scope:actor = {
				trait_is_criminal_in_faith_trigger = { TRAIT = witch FAITH = this.faith GENDER_CHARACTER = this }
				NOR = {
					has_trait = excommunicated
				}
			}
		}
	}
}
zz_valyria_magic_air_magic_02_mysteries_of_the_tempestuous_winds.interaction = {
	
	desc = zz_valyria_magic_air_magic_02_mysteries_of_the_tempestuous_winds.interaction.desc
	icon = air_magic
	common_interaction = no
	category = interaction_magic_hostile
	interface_priority = 498

	is_shown = {
		scope:actor = {
			is_ai = no
			zz_valyria_knows_spell_court = { 
				SPELL = zz_valyria_magic_air_magic_02_mysteries_of_the_tempestuous_winds
			}
			is_imprisoned = no
		}
		scope:recipient = {NOT = { has_trait = dragon }}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = zz_valyria_magic_air_magic_02_mysteries_of_the_tempestuous_winds
				MANACOST = 3
			}
		}
	}

	populate_recipient_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = zz_valyria_magic_air_magic_02_mysteries_of_the_tempestuous_winds
				MANACOST = 3
			}
		}
	}




	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes

	target_type = men_at_arms
	target_filter = recipient_maa
	can_be_picked_regiment = { 
		
	}
	on_accept = {
		scope:target = {
			save_scope_as = regiment
		}
		scope:actor = {
			scope:secondary_recipient = {
			}
			zz_valyria_magic_cast_effect = { 
				MANACOST = 3
				SKILL = air_magic
				SPELL  = zz_valyria_magic_air_magic_02_mysteries_of_the_tempestuous_winds
			}	
		}
	}
	auto_accept = yes
}
zz_valyria_magic_air_magic_03_mysteries_of_the_wall_of_the_wind.interaction = {
	
	desc = zz_valyria_magic_air_magic_03_mysteries_of_the_wall_of_the_wind.interaction.desc
	icon = air_magic
	common_interaction = no
	category = interaction_magic_friendly
	interface_priority = 497

	is_shown = {
		scope:actor = {
			is_ai = no
			zz_valyria_knows_spell_court = { 
				SPELL = zz_valyria_magic_air_magic_03_mysteries_of_the_wall_of_the_wind
			}
			is_imprisoned = no
		}
		scope:recipient = {NOT = { has_trait = dragon }}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = zz_valyria_magic_air_magic_03_mysteries_of_the_wall_of_the_wind
				MANACOST = 5
			}
		}
		scope:recipient = { 
			is_commanding_army = yes 
		}
	}

	populate_recipient_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = zz_valyria_magic_air_magic_03_mysteries_of_the_wall_of_the_wind
				MANACOST = 5
			}
		}
	}


	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes

	on_accept = {
		
		scope:actor = {
			scope:secondary_recipient = {
			}
			zz_valyria_magic_cast_effect = { 
				MANACOST = 5
				SKILL = air_magic
				SPELL  = zz_valyria_magic_air_magic_03_mysteries_of_the_wall_of_the_wind
			}
		}
	}
	auto_accept = yes
}
zz_valyria_magic_air_magic_04_mysteries_of_the_hurricane.interaction = {
	
	desc = zz_valyria_magic_air_magic_04_mysteries_of_the_hurricane.interaction.desc
	icon = air_magic
	common_interaction = no
	category = interaction_magic_hostile
	interface_priority = 496

	is_shown = {
		scope:actor = {
			is_ai = no
			zz_valyria_knows_spell_court = { 
				SPELL = zz_valyria_magic_air_magic_04_mysteries_of_the_hurricane
			}
			is_imprisoned = no
		}
		scope:recipient = {NOT = { has_trait = dragon }}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = zz_valyria_magic_air_magic_04_mysteries_of_the_hurricane
				MANACOST = 25
			}
		}
	}

	populate_recipient_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = zz_valyria_magic_air_magic_04_mysteries_of_the_hurricane
				MANACOST = 25
			}
		}
	}

	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes

	on_accept = {
		
		scope:actor = {
			scope:secondary_recipient = {
			}
			zz_valyria_magic_cast_effect = { 
				MANACOST = 25
				SKILL = air_magic
				SPELL  = zz_valyria_magic_air_magic_04_mysteries_of_the_hurricane
			}	
		}
	}
	auto_accept = yes
}

## Add Province Vaccum Ruin Spell at character location. 
### Water Magic 
zz_valyria_magic_water_magic_01_mysteries_of_the_crushing_waters.interaction = {
	
	desc = zz_valyria_magic_water_magic_01_mysteries_of_the_crushing_waters.interaction.desc
	icon = water_magic
	common_interaction = no
	category = interaction_magic_hostile
	interface_priority = 399

	is_shown = {
		scope:actor = {
			is_ai = no
			zz_valyria_knows_spell_court = { 
				SPELL = zz_valyria_magic_water_magic_01_mysteries_of_the_crushing_waters
			}
			is_imprisoned = no
		}
		
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = zz_valyria_magic_water_magic_01_mysteries_of_the_crushing_waters
				MANACOST = 2
			}
		}
	}

	populate_recipient_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = zz_valyria_magic_water_magic_01_mysteries_of_the_crushing_waters
				MANACOST = 2
			}
		}
	}

	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			save_scope_as = magic_user
			scope:secondary_recipient = {
			}
			zz_valyria_magic_cast_effect = { 
				MANACOST = 2
				SKILL = water_magic
				SPELL  = zz_valyria_magic_water_magic_01_mysteries_of_the_crushing_waters
			}	
		}	
	}
	send_option = {
		is_shown = {
			scope:recipient = {
				is_ai = yes
				NOR = {
				}
			}
			scope:secondary_recipient = {
				is_in_army = no
			}
		}
		is_valid = {

		}
		flag = weaken_spell_flag
		localization = flame_strike_01
	}
	send_option = {
		is_shown = {
			scope:weaken_spell_flag = yes
			OR = {
				scope:secondary_recipient = scope:actor.location.county_controller
			}
			scope:secondary_recipient.location = scope:recipient.location
			scope:recipient = {
				is_ai = yes
				NOR = {
					is_imprisoned = yes
				}
			}
		}
		flag = power_strike_imprison_flag
		localization = flame_strike_02
	}

	ai_potential = {
		NOT = {
			has_trait = compassionate
		}
	}
	ai_targets = {
		ai_recipients = war_enemies
		ai_recipients = scripted_relations
	}
	ai_frequency = 24
	send_options_exclusive = no
	auto_accept = yes
	ai_will_do = {
		base = 0
		modifier = {
			add = 50
			scope:recipient = {
				OR = {
					has_relation_rival = scope:actor
					has_relation_nemesis = scope:actor
					#has_relation_potential_rival = scope:actor
					is_at_war_with = scope:actor
				}
			}
		}
		modifier = {
			add = -50
			scope:actor = {
				has_trait = craven
			}
		}
		modifier = {
			add = -100
			scope:actor = {
				trait_is_criminal_in_faith_trigger = { TRAIT = witch FAITH = this.faith GENDER_CHARACTER = this }
				NOR = {
					has_trait = excommunicated
				}
			}
		}
	}
}
zz_valyria_magic_water_magic_02_mysteries_of_the_surging_torrent.interaction = {
	
	desc = zz_valyria_magic_water_magic_02_mysteries_of_the_surging_torrent.interaction.desc
	icon = water_magic
	common_interaction = no
	category = interaction_magic_hostile
	interface_priority = 398
	
	is_shown = {
		scope:actor = {
			is_ai = no
			zz_valyria_knows_spell_court = { 
				SPELL = zz_valyria_magic_water_magic_02_mysteries_of_the_surging_torrent
			}
			is_imprisoned = no
		}
		scope:recipient = {NOT = { has_trait = dragon }}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = zz_valyria_magic_water_magic_02_mysteries_of_the_surging_torrent
				MANACOST = 4
			}
		}
		scope:recipient = { 
			is_commanding_army = yes 
		}
	}

	populate_recipient_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = zz_valyria_magic_water_magic_02_mysteries_of_the_surging_torrent
				MANACOST = 4
			}
		}
	}

	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes

	on_accept = {
		
		scope:actor = {
			scope:secondary_recipient = {
			}
			zz_valyria_magic_cast_effect = { 
				MANACOST = 4
				SKILL = water_magic
				SPELL  = zz_valyria_magic_water_magic_02_mysteries_of_the_surging_torrent
			}	
		}
	}
	auto_accept = yes
}
zz_valyria_magic_water_magic_03_mysteries_of_endurance.interaction = {
	
	desc = zz_valyria_magic_water_magic_03_mysteries_of_endurance.interaction.desc
	icon = water_magic
	common_interaction = no
	category = interaction_magic_friendly
	interface_priority = 397

	is_shown = {
		scope:actor = {
			is_ai = no
			zz_valyria_knows_spell_court = { 
				SPELL = zz_valyria_magic_water_magic_03_mysteries_of_endurance
			}
			is_imprisoned = no
		}
		scope:recipient = {NOT = { has_trait = dragon }}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = zz_valyria_magic_water_magic_03_mysteries_of_endurance
				MANACOST = 1
			}
		}
		scope:recipient = { 
			is_commanding_army = yes 
		}
	}

	populate_recipient_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = zz_valyria_magic_water_magic_03_mysteries_of_endurance
				MANACOST = 1
			}
		}
	}

	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes

	on_accept = {
		
		scope:actor = {
			scope:secondary_recipient = {
			}
			scope:recipient = {
				commanding_army = {
					
				}
			}
			zz_valyria_magic_cast_effect = { 
				MANACOST = 1
				SKILL = water_magic
				SPELL  = zz_valyria_magic_water_magic_03_mysteries_of_endurance
			}
		}
	}
	auto_accept = yes
}
zz_valyria_magic_water_magic_04_mysteries_of_rhoyne.interaction = {
	
	desc = zz_valyria_magic_water_magic_04_mysteries_of_rhoyne.interaction.desc
	
	icon = water_magic
	common_interaction = no
	category = interaction_magic_hostile
	interface_priority = 396

	is_shown = {
		scope:actor = {
			is_ai = no
			zz_valyria_knows_spell_court = { 
				SPELL = zz_valyria_magic_water_magic_04_mysteries_of_rhoyne
			}
			is_imprisoned = no
		}
		scope:recipient = {NOT = { has_trait = dragon }}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = zz_valyria_magic_water_magic_04_mysteries_of_rhoyne
				MANACOST = 100
			}
		}
	}

	populate_recipient_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = zz_valyria_magic_water_magic_04_mysteries_of_rhoyne
				MANACOST = 100
			}
		}
	}

	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes

	on_accept = {
		
		scope:actor = {
			scope:secondary_recipient = {
			}
			zz_valyria_magic_cast_effect = { 
				MANACOST = 100
				SKILL = water_magic
				SPELL  = zz_valyria_magic_water_magic_04_mysteries_of_rhoyne
			}
		}
	}
	auto_accept = yes
}