## Teach Magic Decision 
valyria_magic_teach_decision = {
	redirect = {
		scope:actor = {
			if = {
				limit = {
					has_trait = zz_magister
				}
				save_scope_as = secondary_actor
			}
		}
	}
	populate_actor_list = {
		scope:actor = { 
			zz_valyria_populate_mage_list = yes 
		}
	}
	is_shown = {
		scope:actor = {
			zz_valyria_is_mage = yes 
			is_imprisoned = no
			is_ai = no
		}
		scope:recipient = {
			NOT = { 
				has_trait = zz_magister
			}
		}	
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_is_mage = yes 
		}
	}
	icon = icon_magic
	common_interaction = yes
	interface_priority = 10
	category = interaction_secrets_of_valyria

	cooldown_against_recipient = { days = 0 } 
	cooldown = { years = 1 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	on_accept = {
		scope:actor = {
			scope:recipient = {
				add_trait_force_tooltip = zz_magister
				zz_random_gain_magic_spell = yes
			}
		}
	}
	auto_accept = yes
	ai_targets = {
		ai_recipients = self
	}

	ai_frequency = 12

	ai_will_do = {
		base = 0

	}
}

## Blood Magic

valyria_magic_healing = {
	redirect = {
		scope:actor = {
			if = {
				limit = {
					zz_valyria_valid_caster = {
						MANACOST = 1
						SPELL = healing_spell_flag
					}
				}
				save_scope_as = secondary_actor
			}
		}
	}
	populate_actor_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = healing_spell_flag
				MANACOST = 1
			}
		}
	}
	is_shown = {
		scope:actor = {
			zz_valyria_knows_spell_court = { 
				SPELL = healing_spell_flag
			}
			is_imprisoned = no
		}
		scope:recipient = {

		}	
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = healing_spell_flag
				MANACOST = 1
			}
		}
	}
	icon = blood_magic
	common_interaction = yes
	interface_priority = 100
	category = interaction_magic_friendly

	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	on_accept = {
		scope:actor = {
			save_scope_as = magic_user
			scope:secondary_actor = {
				zz_valyria_mana_spend = {
					MANACOST = 1
				} 
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1 
					XPTRACK = secrets_of_the_higher_mysteries
				}
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1 
					XPTRACK = blood_magic
				}
			}
			 if = { 
				limit = { 
					scope:secondary_actor = { 
						zz_spellcast_value >= 100 
					}
				}
				zz_valyria_heal_effect = yes
			}
			else = { 
				zz_valyria_spell_failure_effect = yes
			}
		}
	}
	auto_accept = yes
	ai_targets = {
		ai_recipients = self
	}

	ai_frequency = 12

	ai_will_do = {
		base = 100

	}
}

valyria_magic_genetic_manipulation = {
	redirect = {
		scope:actor = {
			if = {
				limit = {
					zz_valyria_valid_caster = {
						SPELL = genetic_manipulation_spell_flag
						MANACOST = 3
					}
				}
				save_scope_as = secondary_actor
			}
		}
	}
	populate_actor_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = genetic_manipulation_spell_flag
				MANACOST = 3
			}
		}
	}
	is_shown = {
		scope:actor = {
			zz_valyria_knows_spell_court = { 
				SPELL = genetic_manipulation_spell_flag
			}
			is_imprisoned = no
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = genetic_manipulation_spell_flag
				MANACOST = 3
			}
		}
	}
	icon = blood_magic
	common_interaction = no
	interface_priority = 10
	category = interaction_magic_friendly

	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			save_scope_as = magic_user

			scope:secondary_actor = {
				zz_valyria_mana_spend = {
					MANACOST = 3
				} 
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1 
					XPTRACK = secrets_of_the_higher_mysteries
				}
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1 
					XPTRACK = blood_magic
				}
			}
			if = { 
				limit = { 
					scope:secondary_actor = { 
						zz_spellcast_value >= 100 
					}
				}
				zz_valyria_genetic_manipulation = yes 
			}
			else = { 
				zz_valyria_spell_failure_effect = yes
			}
		}
	}
	send_options_exclusive = yes
	send_option = {
		flag = add_trait_intellect_good_3
		localization = add_trait_intellect_good_3
		is_shown = {
			scope:recipient = {
				NOT = { has_trait = intellect_good_3 }
			}
		}	
	}
	send_option = {
		flag = add_trait_physique_good_3
		localization = add_trait_physique_good_3
		is_shown = {
			scope:recipient = {
				NOT = { has_trait = physique_good_3}
			}
		}	
	}
	send_option = {
		flag = add_trait_beauty_good_3
		localization = add_trait_beauty_good_3
		is_shown = {
			scope:recipient = {
				NOT = { has_trait = beauty_good_3}
			}
		}	
	}
	send_option = {
		flag = remove_trait_infertile
		localization = remove_trait_infertile
		is_shown = {
			scope:recipient = {
				has_trait = infertile
			}
		}	
	}
	
	auto_accept = yes
	ai_targets = {
		ai_recipients = self
	}

	ai_frequency = 12

	ai_will_do = {
		base = 100
	}
}

valyria_magic_men_at_arms_restoration = {
	redirect = {
		scope:actor = {
			if = {
				limit = {
					zz_valyria_valid_caster = {
						MANACOST = 1
						SPELL = development_boost_spell_flag
					}
				}
				save_scope_as = secondary_actor
			}
		}
	}
	populate_actor_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = men_at_arms_restoration_spell_flag
				MANACOST = 1
			}
		}
	}
	is_shown = {
		scope:actor = {
			zz_valyria_knows_spell_court = { 
				SPELL = men_at_arms_restoration_spell_flag
			}
			is_imprisoned = no
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = men_at_arms_restoration_spell_flag
				MANACOST = 1
			}
		}
	}

	target_type = men_at_arms
	target_filter = recipient_maa
	icon = alchemical_magic
	common_interaction = no
	interface_priority = 10
	category = interaction_magic_friendly

	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes
	can_be_picked_regiment = { 
		scope:target = { 
			maa_current_troops_count < maa_max_troops_count
		}
	}
	on_accept = {
		scope:target = {
			save_scope_as = regiment
		}
		scope:actor = {
			scope:secondary_actor = {
				zz_valyria_mana_spend = {
					MANACOST = 1
				} 
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1 
					XPTRACK = secrets_of_the_higher_mysteries
				}
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1
					XPTRACK = blood_magic
				}
			}
			if = { 
				limit = { 
					scope:secondary_actor = { 
						zz_spellcast_value >= 100 
					}
				}
				zz_valyria_restore_maa = yes
			}
			else = { 
				zz_valyria_spell_failure_effect = yes
			}
		}
		
	}
	auto_accept = yes
}

valyria_magic_rejuvenate_the_armies = {
	redirect = {
		scope:actor = {
			if = {
				limit = {
					zz_valyria_valid_caster = {
						MANACOST = 1
						SPELL = rejuvenate_the_armies_spell_flag
					}
				}
				save_scope_as = secondary_actor
			}
		}
	}
	populate_actor_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = rejuvenate_the_armies_spell_flag
				MANACOST = 1
			}
		}
	}
	is_shown = {
		scope:actor = {
			zz_valyria_knows_spell_court = { 
				SPELL = rejuvenate_the_armies_spell_flag
			}
			is_imprisoned = no
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = rejuvenate_the_armies_spell_flag
				MANACOST = 1
			}
		}
		scope:recipient = { 
			is_commanding_army = yes 
		}
	}

	icon = blood_magic
	common_interaction = no
	interface_priority = 10
	category = interaction_magic_friendly

	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes

	on_accept = {
		
		scope:actor = {
			scope:secondary_actor = {
				zz_valyria_mana_spend = {
					MANACOST = 1
				} 
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1 
					XPTRACK = secrets_of_the_higher_mysteries
				}
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1
					XPTRACK = blood_magic
				}
			}
			if = { 
				limit = { 
					scope:secondary_actor = { 
						zz_spellcast_value >= 100 
					}
				}
				zz_valyria_renew_armies = yes 
			}
			else = { 
				zz_valyria_spell_failure_effect = yes
			}
		}
	}
	auto_accept = yes
}

## Dream Magic

valyria_magic_mental_domination = {
	redirect = {
		scope:actor = {
			if = {
				limit = {
					zz_valyria_valid_caster = {
						SPELL = mental_domination_spell_flag
						MANACOST = 10
					}
				}
				save_scope_as = secondary_actor
			}
		}
	}
	populate_actor_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = mental_domination_spell_flag
				MANACOST = 10
			}
		}
	}

	is_shown = {
		scope:actor = {
			zz_valyria_knows_spell_court = { 
				SPELL = mental_domination_spell_flag
			}
			is_imprisoned = no
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = mental_domination_spell_flag
				MANACOST = 10
			}
		}
	}
	icon = dream_magic
	common_interaction = no
	interface_priority = 10
	category = interaction_magic_hostile

	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			save_scope_as = magic_user
			scope:secondary_actor = {
				zz_valyria_mana_spend = {
					MANACOST = 10
				} 
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1 
					XPTRACK = secrets_of_the_higher_mysteries
				}
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1
					XPTRACK = dream_magic
				}
			}
			if = { 
				limit = { 
					scope:secondary_actor = { 
						zz_spellcast_value >= 100 
					}
				}
				zz_valyria_mental_domination = yes 
			}
			else = { 
				zz_valyria_spell_failure_effect = yes
			}
		}
	}
	send_options_exclusive = no
	send_option = {
		is_shown = {
			scope:secondary_actor = {
				has_trait_xp = {
					trait = zz_magister
					track = dream_magic 
					value >= 50
				}
			}
		}
		flag = magic_domination_faith
		localization = zz_valyria_dreams_domination
	}

	auto_accept = yes
	ai_targets = {
		ai_recipients = self
	}

	ai_frequency = 12

	ai_will_do = {
		base = 100
	}
}


valyria_magic_dreaming_within = {
	redirect = {
		scope:actor = {
			if = {
				limit = {
					zz_valyria_valid_caster = {
						SPELL = dreaming_within_spell_flag
						MANACOST = 20
					}
				}
				save_scope_as = secondary_actor
			}
		}
	}
	populate_actor_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = dreaming_within_spell_flag
				MANACOST = 20
			}
		}
	}
	populate_recipient_list = {
		scope:actor = { 
			zz_valyria_populate_spell_recipient_list = yes
		}
	}
	is_shown = {
		scope:actor = {
			zz_valyria_knows_spell_court = { 
				SPELL = dreaming_within_spell_flag
			}
			is_imprisoned = no
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = dreaming_within_spell_flag
				MANACOST = 20
			}
		}
	}
	icon = dream_magic
	common_interaction = no
	interface_priority = 10
	category = interaction_magic_friendly

	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			save_scope_as = magic_user
			scope:secondary_actor = {
				zz_valyria_mana_spend = {
					MANACOST = 20
				} 
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1 
					XPTRACK = secrets_of_the_higher_mysteries
				}
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1
					XPTRACK = dream_magic
				}
			}
			if = { 
				limit = { 
					scope:secondary_actor = { 
						zz_spellcast_value >= 100 
					}
				}
				zz_valyria_dreaming_within =  yes 
			}
			else = { 
				zz_valyria_spell_failure_effect = yes
			}
		}

	}
	send_options_exclusive = yes

	send_option = {
		flag = blademaster_magic
		localization = blademaster_magic
	}
	send_option = {
		flag = mystic_magic
		localization = mystic_magic
	}
	send_option = {
		flag = reveler_magic 
		localization = reveler_magic 
	}
	send_option = {
		flag = hunter_magic
		localization = hunter_magic
	}
	send_option = {
		flag = physician_magic
		localization = physician_magic
	}
	send_option = {
		flag = herbalist_magic
		localization = herbalist_magic
	}
	send_option = {
		flag = gardener_magic
		localization = gardener_magic
	}
	auto_accept = yes
	ai_targets = {
		ai_recipients = self
	}

	ai_frequency = 12

	ai_will_do = {
		base = 100
	}
}

valyria_magic_dreams_of_experience = {
	redirect = {
		scope:actor = {
			if = {
				limit = {
					zz_valyria_valid_caster = {
						SPELL = dreams_of_experience_spell_flag
						MANACOST = 10
					}
				}
				save_scope_as = secondary_actor
			}
		}
	}
	populate_actor_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = dreams_of_experience_spell_flag
				MANACOST = 10
			}
		}
	}
	is_shown = {
		scope:actor = {
			zz_valyria_knows_spell_court = { 
				SPELL = dreams_of_experience_spell_flag
			}
			is_imprisoned = no
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = genetic_manipulation_spell_flag
				MANACOST = 10
			}
		}
	}
	icon = dream_magic
	common_interaction = no
	interface_priority = 10
	category = interaction_magic_friendly

	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			save_scope_as = magic_user
			scope:secondary_actor = {
				zz_valyria_mana_spend = {
					MANACOST = 10
				} 
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1 
					XPTRACK = secrets_of_the_higher_mysteries
				}
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1 
					XPTRACK = dream_magic
				}
			}
			if = { 
				limit = { 
					scope:secondary_actor = { 
						zz_spellcast_value >= 100 
					}
				}
				zz_valyria_dreams_of_experience  = yes 
			}
			else = { 
				zz_valyria_spell_failure_effect = yes
			}
		}
	}
	send_options_exclusive = yes
	send_option = {
		flag = experience_learning
		localization = experience_learning
	}
    send_option = {
		flag = experience_diplomacy
		localization = experience_diplomacy
	}
    send_option = {
		flag = experience_stewardship
		localization = experience_stewardship
	}
    send_option = {
		flag = experience_intrigue
		localization = experience_intrigue
	}
    send_option = {
		flag = experience_martial
		localization = experience_martial
	}
	send_option = {
		flag = experience_prowess
		localization = experience_prowess
	}
	send_option = {
		flag = experience_leadership
		localization = experience_leadership
	}
	auto_accept = yes
	ai_targets = {
		ai_recipients = self
	}

	ai_frequency = 12

	ai_will_do = {
		base = 100
	}
}

valyria_magic_secrets_of_dreams = {
	redirect = {
		scope:actor = {
			if = {
				limit = {
					zz_valyria_valid_caster = {
						SPELL = secrets_of_dreams_spell_flag
						MANACOST = 1
					}
				}
				save_scope_as = secondary_actor
			}
		}
	}
	populate_actor_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = secrets_of_dreams_spell_flag
				MANACOST = 1
			}
		}
	}
	is_shown = {
		scope:actor = {
			zz_valyria_knows_spell_court = { 
				SPELL = secrets_of_dreams_spell_flag
			}
			is_imprisoned = no
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = secrets_of_dreams_spell_flag
				MANACOST = 1
			}
		}
	}
	icon = dream_magic
	common_interaction = no
	interface_priority = 10
	category = interaction_magic_friendly

	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			save_scope_as = magic_user
			scope:secondary_actor = {
				zz_valyria_mana_spend = {
					MANACOST = 1
				} 
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1 
					XPTRACK = secrets_of_the_higher_mysteries
				}
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1 
					XPTRACK = dream_magic
				}
			}
			if = { 
				limit = { 
					scope:secondary_actor = { 
						zz_spellcast_value >= 100 
					}
				}
				zz_valyria_secrets_of_dreams = yes 
			}
			else = { 
				zz_valyria_spell_failure_effect = yes
			}			
		}
	}
	send_options_exclusive = no

	send_option = {
		flag = scrying
		localization = scrying
		is_shown = {
			scope:secondary_actor =  {
				has_character_flag = secrets_of_dreams_spell_flag
			}
		}			
	}		
	auto_accept = yes
	ai_targets = {
		ai_recipients = self
	}

	ai_frequency = 12

	ai_will_do = {
		base = 100
	}
}



## Alchemical Magic 

valyria_magic_development_boost = {
	redirect = {
		scope:actor = {
			if = {
				limit = {
					zz_valyria_valid_caster = {
						MANACOST = 1
						SPELL = development_boost_spell_flag
					}
				}
				save_scope_as = secondary_actor
			}
		}
	}
	populate_actor_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = development_boost_spell_flag
				MANACOST = 1
			}
		}
	}
	is_shown = {
		scope:actor = {
			zz_valyria_knows_spell_court = { 
				SPELL = development_boost_spell_flag
			}
			is_imprisoned = no
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = development_boost_spell_flag
				MANACOST = 1
			}
		}
	}

	target_type = title
	target_filter = recipient_domain_titles
	icon = alchemical_magic
	common_interaction = no
	interface_priority = 10
	category = interaction_magic_friendly

	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes
	can_be_picked_title = {
		scope:target = {
			is_leased_out = no
			tier = tier_county
		}
	}
	on_accept = {
		scope:target = {
			save_scope_as = ttile
		}
		scope:actor = {
			scope:secondary_actor = {
				zz_valyria_mana_spend = {
					MANACOST = 1
				} 
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1 
					XPTRACK = secrets_of_the_higher_mysteries
				}
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1
					XPTRACK = alchemical_magic
				}
			}
			if = { 
				limit = { 
					scope:secondary_actor = { 
						zz_spellcast_value >= 100 
					}
				}
				zz_valyria_development_boost = yes
			}
			else = { 
				zz_valyria_spell_failure_effect = yes
			}
		}
		
	}
	auto_accept = yes
}

valyria_magic_build_speed_boost = {
	redirect = {
		scope:actor = {
			if = {
				limit = {
					zz_valyria_valid_caster = {
						MANACOST = 1
						SPELL = building_speed_spell_flag
					}
				}
				save_scope_as = secondary_actor
			}
		}
	}
	populate_actor_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = building_speed_spell_flag
				MANACOST = 1
			}
		}
	}
	is_shown = {
		scope:actor = {
			zz_valyria_knows_spell_court = { 
				SPELL = building_speed_spell_flag
			}
			is_imprisoned = no
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = building_speed_spell_flag
				MANACOST = 1
			}
		}
	}
	target_type = title
	target_filter = recipient_domain_titles
	icon = alchemical_magic
	common_interaction = no
	interface_priority = 10
	category = interaction_magic_friendly

	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes
	can_be_picked_title = {
		scope:target = {
			is_leased_out = no
			tier = tier_county
		}
	}
	on_accept = {
		scope:target = {
			save_scope_as = ttile
		}
		scope:actor = {
			scope:secondary_actor = {
				zz_valyria_mana_spend = {
					MANACOST = 1
				} 
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1 
					XPTRACK = secrets_of_the_higher_mysteries
				}
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1 
					XPTRACK = alechemical_magic
				}
			}
			if = { 
				limit = { 
					scope:secondary_actor = { 
						zz_spellcast_value >= 100 
					}
				}
				zz_valyria_build_speed_boost = yes
			}
			else = { 
				zz_valyria_spell_failure_effect = yes
			}
		}
	}
	auto_accept = yes
}

valyria_magic_transmutation = {
	redirect = {
		scope:actor = {
			if = {
				limit = {
					zz_valyria_valid_caster = {
						SPELL = transmutation_spell_flag
						MANACOST = 2
					}
				}
				save_scope_as = secondary_actor
			}
		}
	}
	populate_actor_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = transmutation_spell_flag
				MANACOST = 2
			}
		}
	}
	is_shown = {
		scope:actor = {
			zz_valyria_knows_spell_court = { 
				SPELL = transmutation_spell_flag
			}
			is_imprisoned = no
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = transmutation_spell_flag
				MANACOST = 2
			}
		}
	}
	icon = alchemical_magic
	common_interaction = no
	interface_priority = 10
	category = interaction_magic_friendly

	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			save_scope_as = magic_user
			scope:secondary_actor = {
				zz_valyria_mana_spend = {
					MANACOST = 2
				} 
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1 
					XPTRACK = secrets_of_the_higher_mysteries
				}
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1
					XPTRACK = alchemical_magic
				}
			}
			if = { 
				limit = { 
					scope:secondary_actor = { 
						zz_spellcast_value >= 100 
					}
				}
				zz_valyria_transmutation = yes
			}
			else = { 
				zz_valyria_spell_failure_effect = yes
			}
		}


	}
	send_options_exclusive = yes

	send_option = {
		flag = dynasty_prestige
		localization = dynasty_prestige
		is_shown = {
		}
	}
	send_option = {
		flag = prestige
		localization = prestige
		is_shown = {
		}
	}
	send_option = {
		flag = piety
		localization = piety
		is_shown = {
		}
	}
	send_option = {
		flag = transmutation
		localization = transmutation
		is_shown = {
		}		
	}

	auto_accept = yes
	ai_targets = {
		ai_recipients = self
	}

	ai_frequency = 12

	ai_will_do = {
		base = 100
	}
}

valyria_magic_empowerment_of_arms = {
	redirect = {
		scope:actor = {
			if = {
				limit = {
					zz_valyria_valid_caster = {
						SPELL = empowerment_of_arms_spell_flag
						MANACOST = 5
					}
				}
				save_scope_as = secondary_actor
			}
		}
	}
	populate_actor_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = empowerment_of_arms_spell_flag
				MANACOST = 5
			}
		}
	}
	is_shown = {
		scope:actor = {
			zz_valyria_knows_spell_court = { 
				SPELL = empowerment_of_arms_spell_flag
			}
			is_imprisoned = no
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = empowerment_of_arms_spell_flag
				MANACOST = 5
			}
		}
	}
	icon = alchemical_magic
	common_interaction = no
	interface_priority = 10
	category = interaction_magic_friendly

	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			save_scope_as = magic_user
			scope:secondary_actor = {
				zz_valyria_mana_spend = {
					MANACOST = 5
				} 
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1 
					XPTRACK = secrets_of_the_higher_mysteries
				}
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1 
					XPTRACK = alchemical_magic
				}
			}
			if = { 
				limit = { 
					scope:secondary_actor = { 
						zz_spellcast_value >= 100 
					}
				}
				zz_valyria_empowerment_of_arms = yes
			}
			else = { 
				zz_valyria_spell_failure_effect = yes
			}
		}
	}
	send_options_exclusive = yes	
	send_option = {
		flag = knights_add
		localization = knights_add
	}
    send_option = {
		flag = knights_bonus
		localization = knights_bonus
	}
	send_option = {
		flag = maa_bonus
		localization = maa_bonus
	}
	send_option = {
		flag = maa_size_bonus
		localization = maa_size_bonus
	}
	send_option = {
		flag = title_maa_bonus
		localization = title_maa_bonus
	}
	send_option = {
		flag = title_maa_size_bonus
		localization = title_maa_size_bonus
	}
	
	auto_accept = yes
	ai_targets = {
		ai_recipients = self
	}

	ai_frequency = 12

	ai_will_do = {
		base = 100
	}
}

valyria_magic_craft_potion = {
	redirect = {
		scope:actor = {
			if = {
				limit = {
					zz_valyria_valid_caster = {
						SPELL = transmutation_spell_flag
						MANACOST = 3
					}
				}
				save_scope_as = secondary_actor
			}
		}
	}
	populate_actor_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = transmutation_spell_flag
				MANACOST = 3
			}
		}
	}
	is_shown = {
		scope:actor = {
			zz_valyria_knows_spell_court = { 
				SPELL = transmutation_spell_flag
			}
			is_imprisoned = no
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = transmutation_spell_flag
				MANACOST = 3
			}
		}
	}
	icon = alchemical_magic
	common_interaction = no
	interface_priority = 10
	category = interaction_magic_friendly

	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			save_scope_as = magic_user
			scope:secondary_actor = {
				zz_valyria_mana_spend = {
					MANACOST = 3
				} 
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1 
					XPTRACK = secrets_of_the_higher_mysteries
				}
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1
					XPTRACK = alchemical_magic
				}
			}

			send_interface_message = {
				type = event_generic_neutral
				title = magic_healing
				desc = magic_healing_text
				left_icon = scope:actor
				right_icon = scope:recipient
				custom_tooltip = use_magic_custom_tooltip1
				if = {
					limit = {
						NOT = {
							scope:actor = scope:recipient
						}
					}
					stress_impact = {
						compassionate = medium_stress_impact_loss
						sadistic = minor_stress_gain
						callous = minor_stress_gain
					}
				}
				scope:recipient = {
					if = {
						limit = {
							scope:createpotion = yes
						}
						scope:recipient = { 
							custom_tooltip = create_potion_decision_ct 
						} 
					}			
					if = {
						limit = {
							NOT = { scope:actor = scope:recipient }
						}
						add_opinion = {
							modifier = grateful_opinion
							target = scope:actor
							opinion = 70
						}
					}
				}
			}
		}
	}
	send_options_exclusive = yes	
	send_option = {
		flag = createpotion
		localization = createpotion
		is_shown = {
			scope:actor = {
				OR = {
					AND = {
						OR = {
							has_trait = witch
							any_secret = { secret_type = secret_witch }
						}
						has_trait = lifestyle_herbalist
					}
					has_perk = combat_spells_p3_perk
				}
			}
		}			
	}		
	send_option = {
		flag = knights_add
		localization = knights_add
	}
    send_option = {
		flag = knights_bonus
		localization = knights_bonus
	}
	auto_accept = yes
	ai_targets = {
		ai_recipients = self
	}

	ai_frequency = 12

	ai_will_do = {
		base = 100
	}
}

## Fire Magic

valyria_magic_flame_strike = {
	redirect = {
		scope:actor = {
			if = {
				limit = {
					zz_valyria_valid_caster = {
						SPELL = transmutation_spell_flag
						MANACOST = 2
					}
				}
				save_scope_as = secondary_actor
			}
		}
	}
	populate_actor_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = flame_strike_spell_flag
				MANACOST = 2
			}
		}
	}
	is_shown = {
		scope:actor = {
			zz_valyria_knows_spell_court = { 
				SPELL = flame_strike_spell_flag
			}
			is_imprisoned = no
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = flame_strike_spell_flag
				MANACOST = 2
			}
		}
	}
	icon = fire_magic
	common_interaction = yes
	interface_priority = 10
	category = interaction_magic_hostile

	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			save_scope_as = magic_user
			scope:secondary_actor = {
				zz_valyria_mana_spend = {
					MANACOST = 2
				} 
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1 
					XPTRACK = secrets_of_the_higher_mysteries
				}
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1
					XPTRACK = fire_magic
				}
			}
			if = { 
				limit = { 
					scope:secondary_actor = { 
						zz_spellcast_value >= 100 
					}
				}
				zz_valyria_flame_strike = yes
			}
			else = { 
				zz_valyria_spell_failure_effect = yes
			}
		}	
	}
	send_option = {
		is_shown = {
			scope:recipient = {
				is_ai = yes
				NOR = {
				}
			}
			scope:secondary_actor = {
				is_in_army = no
			}
		}
		is_valid = {

		}
		flag = weaken_spell_flag
		localization = POWER_STRIKE_O1
	}
	send_option = {
		is_shown = {
			scope:weaken_spell_flag = yes
			OR = {
				scope:secondary_actor = scope:actor.location.county_controller
			}
			scope:secondary_actor.location = scope:recipient.location
			scope:recipient = {
				is_ai = yes
				NOR = {
					is_imprisoned = yes
				}
			}
		}
		flag = power_strike_imprison_flag
		localization = POWER_STRIKE_O2
	}

	ai_potential = {
		NOT = {
			has_trait = compassionate
		}
	}
	ai_targets = {
		ai_recipients = war_enemies
		ai_recipients = scripted_relations
	}
	ai_frequency = 24
	send_options_exclusive = no
	auto_accept = yes
	ai_will_do = {
		base = 0
		modifier = {
			add = 50
			scope:recipient = {
				OR = {
					has_relation_rival = scope:actor
					has_relation_nemesis = scope:actor
					#has_relation_potential_rival = scope:actor
					is_at_war_with = scope:actor
				}
			}
		}
		modifier = {
			add = -50
			scope:actor = {
				has_trait = craven
			}
		}
		modifier = {
			add = -100
			scope:actor = {
				trait_is_criminal_in_faith_trigger = { TRAIT = witch FAITH = this.faith GENDER_CHARACTER = this }
				NOR = {
					has_trait = excommunicated
				}
			}
		}
	}
}

valyria_magic_fire_blast = {
	redirect = {
		scope:actor = {
			if = {
				limit = {
					zz_valyria_valid_caster = {
						MANACOST = 1
						SPELL = fire_blast_spell_flag
					}
				}
				save_scope_as = secondary_actor
			}
		}
	}
	populate_actor_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = fire_blast_spell_flag
				MANACOST = 1
			}
		}
	}
	is_shown = {
		scope:actor = {
			zz_valyria_knows_spell_court = { 
				SPELL = fire_blast_spell_flag
			}
			is_imprisoned = no
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = fire_blast_spell_flag
				MANACOST = 1
			}
		}
		scope:recipient = { 
			is_commanding_army = yes 
		}
	}

	icon = fire_magic
	common_interaction = no
	interface_priority = 10
	category = interaction_magic_hostile

	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes

	on_accept = {
		
		scope:actor = {
			scope:secondary_actor = {
				zz_valyria_mana_spend = {
					MANACOST = 1
				} 
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1 
					XPTRACK = secrets_of_the_higher_mysteries
				}
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1
					XPTRACK = fire_magic
				}
			}
		}
		if = { 
			limit = { 
				scope:secondary_actor = { 
					zz_spellcast_value >= 100 
				}
			}
			zz_valyria_fire_blast = yes 
		}
		else = { 
			zz_valyria_spell_failure_effect = yes
		}
	}
	auto_accept = yes
}

valyria_magic_fire_storm = {
	redirect = {
		scope:actor = {
			if = {
				limit = {
					zz_valyria_valid_caster = {
						MANACOST = 15
						SPELL = fire_storm_spell_flag
					}
				}
				save_scope_as = secondary_actor
			}
		}
	}
	populate_actor_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = fire_storm_spell_flag
				MANACOST = 15
			}
		}
	}
	is_shown = {
		scope:actor = {
			zz_valyria_knows_spell_court = { 
				SPELL = fire_storm_spell_flag
			}
			is_imprisoned = no
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = fire_storm_spell_flag
				MANACOST = 15
			}
		}
		scope:recipient = { 
			is_commanding_army = yes 
		}
	}

	icon = fire_magic
	common_interaction = no
	interface_priority = 10
	category = interaction_magic_hostile

	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes

	on_accept = {
		
		scope:actor = {
			scope:secondary_actor = {
				zz_valyria_mana_spend = {
					MANACOST = 15
				} 
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1 
					XPTRACK = secrets_of_the_higher_mysteries
				}
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1
					XPTRACK = fire_magic
				}
			}
		}
		if = { 
			limit = { 
				scope:secondary_actor = { 
					zz_spellcast_value >= 100 
				}
			}
			zz_valyria_fire_storm = yes
		}
		else = { 
			zz_valyria_spell_failure_effect = yes
		}
	}
	auto_accept = yes
}


## Wind Magic 
valyria_magic_tempestuous_winds = {
	redirect = {
		scope:actor = {
			if = {
				limit = {
					zz_valyria_valid_caster = {
						MANACOST = 1
						SPELL = tempestuous_winds_spell_flag
					}
				}
				save_scope_as = secondary_actor
			}
		}
	}
	populate_actor_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = tempestuous_winds_spell_flag
				MANACOST = 1
			}
		}
	}
	is_shown = {
		scope:actor = {
			zz_valyria_knows_spell_court = { 
				SPELL = tempestuous_winds_spell_flag
			}
			is_imprisoned = no
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = tempestuous_winds_spell_flag
				MANACOST = 1
			}
		}
	}

	target_type = men_at_arms
	target_filter = recipient_maa
	icon = wind_magic
	common_interaction = no
	interface_priority = 10
	category = interaction_magic_hostile

	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes
	can_be_picked_regiment = { 
		
	}
	on_accept = {
		scope:target = {
			save_scope_as = regiment
		}
		scope:actor = {
			scope:secondary_actor = {
				zz_valyria_mana_spend = {
					MANACOST = 1
				} 
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1 
					XPTRACK = secrets_of_the_higher_mysteries
				}
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1
					XPTRACK = wind_magic
				}
			}
			scope:target = {
				change_maa_troops_count = -200 
			}
		}
		
	}
	auto_accept = yes
}

### Water Magic 

valyria_magic_waters_of_mother_rhoyne = {
	redirect = {
		scope:actor = {
			if = {
				limit = {
					zz_valyria_valid_caster = {
						MANACOST = 1
						SPELL = waters_of_mother_rhoyne_spell_flag
					}
				}
				save_scope_as = secondary_actor
			}
		}
	}
	populate_actor_list = {
		scope:actor = { 
			zz_valyria_populate_spell_caster_list = {
				SPELL  = waters_of_mother_rhoyne_spell_flag
				MANACOST = 1
			}
		}
	}
	is_shown = {
		scope:actor = {
			zz_valyria_knows_spell_court = { 
				SPELL = waters_of_mother_rhoyne_spell_flag
			}
			is_imprisoned = no
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			zz_valyria_valid_caster_court = {
				SPELL  = waters_of_mother_rhoyne_spell_flag
				MANACOST = 1
			}
		}
		scope:recipient = { 
			is_commanding_army = yes 
		}
	}

	icon = water_magic
	common_interaction = no
	interface_priority = 10
	category = interaction_magic_hostile

	cooldown_against_recipient = { days = 0 } 
	cooldown = { days = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes

	on_accept = {
		scope:recipient = {
			commanding_army = { 
				deplete_army_by_percentage = 0.9
			}
		}
		scope:actor = {
			scope:secondary_actor = {
				zz_valyria_mana_spend = {
					MANACOST = 1
				} 
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1 
					XPTRACK = secrets_of_the_higher_mysteries
				}
				zz_valyria_gain_spell_experience = {
					XPGAIN = 1
					XPTRACK = water_magic
				}
			}
		}
	}
	auto_accept = yes
}