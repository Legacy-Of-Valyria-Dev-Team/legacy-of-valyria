zz_kingsguard_lord_commander_court_position = {
	skill = prowess
	max_available_positions = 1
	category = zz_kingsguard
	minimum_rank = kingdom
	opinion = {
		value = regular_court_position_opinion
	}

	# How high the aptitude has to be to reach the 5 different modifier levels
	# Terrible, Poor, Average, Good, Excellent
	aptitude_level_breakpoints = { 30 50 70 90 }
	# 0-30 - Terrible
	# 31-50 Poor
	# 51-70 - Average
	# 71-90 - Good
	# 91+ - Excellent

	# How good is this character in this position? root scope is the holder of the court position
	aptitude = {
		value = 1
		add = {
			value = martial
			multiply = 2
			desc = court_position_martial
		}
		add = {
			value = prowess
			multiply = 2
			desc = court_position_prowess
		}
		if = {
			limit = {
				has_trait = shieldmaiden
			}
			add = {
				value = 20
				desc = court_position_shieldmaiden_trait
			}
		}
		if = {
			limit = {
				has_trait = lifestyle_blademaster
				has_trait_xp = {
					trait = lifestyle_blademaster
					value >= 100
				}
			}
			add = {
				value = 15
				desc = court_position_blademaster_3_trait
			}
		}
		else_if = {
			limit = {
				has_trait = lifestyle_blademaster
				has_trait_xp = {
					trait = lifestyle_blademaster
					value >= 50
				}
			}
			add = {
				value = 10
				desc = court_position_blademaster_2_trait
			}
		}
		else_if = {
			limit = {
				has_trait = lifestyle_blademaster
			}
			add = {
				value = 5
				desc = court_position_blademaster_1_trait
			}
		}
		if = {
			limit = {
				has_trait = gallant
			}
			add = {
				value = 5
				desc = court_position_gallant_trait
			}
		}
		if = {
			limit = {
				has_trait = brave
			}
			add = {
				value = 20
				desc = court_position_brave_trait
			}
		}
		if = {
			limit = {
				has_trait = paranoid
			}
			add = {
				value = 10
				desc = court_position_paranoid_trait
			}
		}
		if = {
			limit = {
				has_trait = craven
			}
			add = {
				value = -15
				desc = court_position_craven_trait
			}
		}
		add = court_position_aptitude_traveling_friends_value
	}

	# Is this an available position for this court? (root is court owner)
	is_shown = {
		can_have_kingsguard = yes
	}
	is_shown_character = {
	}
	valid_position = {
		can_have_kingsguard = yes
	}

	valid_character = {
		scope:employee = {
			exists = scope:liege
			can_be_kingsguard_trigger = { COURT_OWNER = scope:liege }
			has_trait = kingsguard
			trigger_if = {
				limit = { NOT = { has_court_position = zz_kingsguard_lord_commander_court_position } }
				court_position_does_not_already_have_a_job_trigger = yes # This positions is considered a job, and cannot be held at the same tims as another similar position
			}
		}
	}

	revoke_cost = {
		prestige = {
			value = major_court_position_prestige_revoke_cost
			#value = 0
			# Set to 0 with Dynasty Perk Inner Circle
			if = {
				limit = {
					exists = dynasty
					dynasty = { has_dynasty_perk = fp2_coterie_legacy_1 }

					employs_court_position = zz_kingsguard_lord_commander_court_position
					any_court_position_holder = {
						THIS = scope:employee
						type = zz_kingsguard_lord_commander_court_position
						exists = dynasty
						house = prev.house
					}
				}
				multiply = 0
			}
		}
	}

	salary = {
		gold = {
			value = minor_court_position_salary
			# Set to 0 with Dynasty Perk Inner Circle
			if = {
				limit = {
					scope:liege = {
						exists = dynasty
						dynasty = { has_dynasty_perk = fp2_coterie_legacy_1 }

						employs_court_position = zz_kingsguard_lord_commander_court_position
						any_court_position_holder = {
							THIS = scope:employee
							type = zz_kingsguard_lord_commander_court_position
							exists = dynasty
							house = prev.house
						}
					}
				}
				multiply = {
					value = 0.0
					desc = inner_circle_salary_mod
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
		}
		round = no
	}

	# These modifiers are employed based on what level the aptitude reaches (levels are defined as breakpoints)
	scaling_employer_modifiers = {
		terrible = {
			enemy_hostile_scheme_success_chance_add = -1
			enemy_hostile_scheme_phase_duration_add = 1
		}
		poor = {
			court_grandeur_baseline_add = 1
			enemy_hostile_scheme_success_chance_add = -3
			enemy_hostile_scheme_phase_duration_add = 2
		}
		average = {
			court_grandeur_baseline_add = 1
			enemy_hostile_scheme_success_chance_add = -5
			enemy_hostile_scheme_phase_duration_add = 3
		}
		good = {
			court_grandeur_baseline_add = 2
			enemy_hostile_scheme_success_chance_add = -7
			enemy_hostile_scheme_phase_duration_add = 4
		}
		excellent = {
			court_grandeur_baseline_add = 3
			enemy_hostile_scheme_success_chance_add = 10
			enemy_hostile_scheme_phase_duration_add = 5
		}
	}
	# Perks to the Employee
	modifier = {
		monthly_prestige = minor_court_position_prestige_salary
	}

	on_court_position_received = {
		scope:employee = {
			agot_on_get_kingsguard_lord_commander = yes
		}
	}
	on_court_position_revoked = {
		scope:employee = {
			agot_on_fired_from_kingsguard = yes
		}
	}
	
	on_court_position_invalidated = {
		scope:employee = {
			agot_on_fired_from_kingsguard = yes
		}
	}

	# Scripted value to determine whether an AI will hire/fire a position or not. Hires over 0, fires under -50. Look in _court_positions.info for more extensive documentation!
	candidate_score = {
		value = 150
		add = scope:base_value
		add = court_position_candidate_score_base_value
		add = court_position_candidate_aptitude_value
		# No debt considerations for Physicians, they are too important
		# AI should never fire maesters.
		if = {
			limit = {
				exists = scope:firing_court_position
			}
			add = 2000
		}
		if = {
			limit = {
				scope:employee = {
					has_trait = kingsguard
				}
				
			}
			add = {
				value = 20000
			}
		}
	}
}
zz_kingsguard_court_position = {
	skill = prowess
	max_available_positions = 6
	category = zz_kingsguard
	minimum_rank = kingdom
	opinion = {
		value = regular_court_position_opinion
	}

	# How high the aptitude has to be to reach the 5 different modifier levels
	# Terrible, Poor, Average, Good, Excellent
	aptitude_level_breakpoints = { 30 50 70 90 }
	# 0-30 - Terrible
	# 31-50 Poor
	# 51-70 - Average
	# 71-90 - Good
	# 91+ - Excellent

	# How good is this character in this position? root scope is the holder of the court position
	aptitude = {
		value = 1
		add = {
			value = martial
			multiply = 2
			desc = court_position_martial
		}
		add = {
			value = prowess
			multiply = 2
			desc = court_position_prowess
		}
		if = {
			limit = {
				has_trait = shieldmaiden
			}
			add = {
				value = 20
				desc = court_position_shieldmaiden_trait
			}
		}
		if = {
			limit = {
				has_trait = lifestyle_blademaster
				has_trait_xp = {
					trait = lifestyle_blademaster
					value >= 100
				}
			}
			add = {
				value = 15
				desc = court_position_blademaster_3_trait
			}
		}
		else_if = {
			limit = {
				has_trait = lifestyle_blademaster
				has_trait_xp = {
					trait = lifestyle_blademaster
					value >= 50
				}
			}
			add = {
				value = 10
				desc = court_position_blademaster_2_trait
			}
		}
		else_if = {
			limit = {
				has_trait = lifestyle_blademaster
			}
			add = {
				value = 5
				desc = court_position_blademaster_1_trait
			}
		}
		if = {
			limit = {
				has_trait = gallant
			}
			add = {
				value = 5
				desc = court_position_gallant_trait
			}
		}
		if = {
			limit = {
				has_trait = brave
			}
			add = {
				value = 20
				desc = court_position_brave_trait
			}
		}
		if = {
			limit = {
				has_trait = paranoid
			}
			add = {
				value = 10
				desc = court_position_paranoid_trait
			}
		}
		if = {
			limit = {
				has_trait = craven
			}
			add = {
				value = -15
				desc = court_position_craven_trait
			}
		}
		add = court_position_aptitude_traveling_friends_value
	}

	# Is this an available position for this court? (root is court owner)
	is_shown = {
		can_have_kingsguard = yes
	}
	is_shown_character = {
	}
	valid_position = {
		can_have_kingsguard = yes
	}

	valid_character = {
		scope:employee = {
			exists = scope:liege
			can_be_kingsguard_trigger = { COURT_OWNER = scope:liege }
			has_trait = kingsguard
			trigger_if = {
				limit = { NOT = { has_court_position = zz_kingsguard_court_position } }
				court_position_does_not_already_have_a_job_trigger = yes # This positions is considered a job, and cannot be held at the same tims as another similar position
			}
			not = {
				has_court_position = zz_kingsguard_lord_commander_court_position
			}
		}
	}

	revoke_cost = {
		prestige = {
			value = major_court_position_prestige_revoke_cost
			#value = 0
			# Set to 0 with Dynasty Perk Inner Circle
			if = {
				limit = {
					exists = dynasty
					dynasty = { has_dynasty_perk = fp2_coterie_legacy_1 }

					employs_court_position = zz_kingsguard_court_position
					any_court_position_holder = {
						THIS = scope:employee
						type = zz_kingsguard_court_position
						exists = dynasty
						house = prev.house
					}
				}
				multiply = 0
			}
		}
	}

	salary = {
		gold = {
			value = minor_court_position_salary
			# Set to 0 with Dynasty Perk Inner Circle
			if = {
				limit = {
					scope:liege = {
						exists = dynasty
						dynasty = { has_dynasty_perk = fp2_coterie_legacy_1 }

						employs_court_position = zz_kingsguard_court_position
						any_court_position_holder = {
							THIS = scope:employee
							type = zz_kingsguard_court_position
							exists = dynasty
							house = prev.house
						}
					}
				}
				multiply = {
					value = 0.0
					desc = inner_circle_salary_mod
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
		}
		round = no
	}

	# These modifiers are employed based on what level the aptitude reaches (levels are defined as breakpoints)
	scaling_employer_modifiers = {
		terrible = {
			enemy_hostile_scheme_success_chance_add = -1
			enemy_hostile_scheme_phase_duration_add = 1
		}
		poor = {
			court_grandeur_baseline_add = 1
			enemy_hostile_scheme_success_chance_add = -3
			enemy_hostile_scheme_phase_duration_add = 2
		}
		average = {
			court_grandeur_baseline_add = 1
			enemy_hostile_scheme_success_chance_add = -5
			enemy_hostile_scheme_phase_duration_add = 3
		}
		good = {
			court_grandeur_baseline_add = 2
			enemy_hostile_scheme_success_chance_add = -7
			enemy_hostile_scheme_phase_duration_add = 4
		}
		excellent = {
			court_grandeur_baseline_add = 3
			enemy_hostile_scheme_success_chance_add = 10
			enemy_hostile_scheme_phase_duration_add = 5
		}
	}


	# Perks to the Employee
	modifier = {
		monthly_prestige = minor_court_position_prestige_salary
	}

	on_court_position_received = {
		scope:employee = {
			agot_on_get_kingsguard = yes
		}
	}
	on_court_position_revoked = {
		scope:employee = {
			agot_on_fired_from_kingsguard = yes
		}
	}
	
	on_court_position_invalidated = {
		scope:employee = {
			agot_on_fired_from_kingsguard = yes
		}
	}

	# Scripted value to determine whether an AI will hire/fire a position or not. Hires over 0, fires under -50. Look in _court_positions.info for more extensive documentation!
	candidate_score = {
		value = 150
		add = scope:base_value
		add = court_position_candidate_score_base_value
		add = court_position_candidate_aptitude_value
		# No debt considerations for Physicians, they are too important
		# AI should never fire maesters.
		if = {
			limit = {
				exists = scope:firing_court_position
			}
			add = 20000
		}
		if = {
			limit = {
				scope:employee = {
					has_trait = kingsguard
				}
			}
			add = {
				value = 20000
			}
		}
	}
}