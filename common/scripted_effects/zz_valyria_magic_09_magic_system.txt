
zz_valyria_make_mage_list = {
	remove_variable ?= zz_magic_caster
	clear_variable_list ?= mage_list
	if = { 
		limit = {
			has_trait = zz_magister
		}
		scope:$MAGIC_USER$ = {
			add_to_variable_list = {
				name = mage_list
				target = prev
			}
		}
	}
	every_living_mage = {
		limit = {
			liege_or_court_owner ?= scope:$MAGIC_USER$
		}
		scope:$MAGIC_USER$ = {
			add_to_variable_list = {
				name = mage_list
				target = prev
			}
		}
	}
	ordered_in_list = {
		variable = mage_list
		position = 0
		order_by = learning
		save_scope_as = zz_magic_caster
	}
}

zz_valyria_make_spell_list = {
	remove_variable ?= zz_valyria_mystery
	clear_variable_list ?= zz_valyria_spell_list

	scope:$MAGIC_CASTER$ = {
		every_memory = {
			limit = { 
				has_memory_category = magic
			}
			scope:$MAGIC_USER$ = {
				add_to_variable_list = {
					name = zz_valyria_spell_list
					target = prev
				}
				if = {
					limit = {
						NOT = { has_variable = zz_valyria_mystery }
					}
					set_variable = { name = zz_valyria_mystery value = prev }
				}
			}
		}
	}
}


zz_valyria_make_item_caster_list = {
	remove_variable ?= zz_item_caster
	clear_variable_list ?= item_caster_list
	if = { 
		limit = {
			any_character_artifact = {
				has_variable = spell
				var:item_type = flag:scroll
			}
		}
		scope:$MAGIC_USER$ = {
			add_to_variable_list = {
				name = item_caster_list
				target = prev
			}
		}
	}
	every_courtier = {
		limit = {
			any_character_artifact = {
				has_variable = spell
				var:item_type = flag:scroll
			}
		}
		scope:$MAGIC_USER$ = {
			add_to_variable_list = {
				name = item_caster_list
				target = prev
			}
		}
	}
	ordered_in_list = {
		variable = item_caster_list
		position = 0
		order_by = learning
		save_scope_as = zz_item_caster
	}
}

zz_valyria_make_scroll_list = {
	remove_variable ?= zz_valyria_scroll
	clear_variable_list ?= zz_valyria_scroll_list

	scope:$ITEM_CASTER$ ?= {
		every_character_artifact= {
			limit = { 
				has_variable = spell
				var:item_type = flag:scroll
			}
			scope:$MAGIC_USER$ = {
				add_to_variable_list = {
					name = zz_valyria_scroll_list
					target = prev
				}
				if = {
					limit = {
						NOT = { has_variable = zz_valyria_scroll }
					}
					set_variable = { name = zz_valyria_scroll value = prev }
				}
			}
		}
	}
}

zz_valyria_spell_failure_effect = { 
	send_interface_message = {
		type = event_generic_neutral
		title = spell_failure
		desc = spell_failure_txt
		left_icon = scope:secondary_recipient
		right_icon = scope:recipient
		custom_tooltip = spell_failure_txt
		scope:secondary_recipient  = {
			random_list = {
				50 = {
					increase_wounds_effect = { REASON = fire_magic }
				}
				25 = {
					add_trait_force_tooltip = scaly
				}
				25 = {
					modifier = {
						add = zz_spellcast_value
					}
				}
			}
		}
	}
}

zz_valyria_magic_duel_stress_effect = { 
	if = {
		limit = {
			has_trait = compassionate
			has_trait = wrathful
			has_trait = sadistic
		}
		stress_impact = {
			compassionate = medium_stress_impact_gain
			wrathful = medium_stress_impact_loss
			sadistic = medium_stress_impact_loss
		}
	}
	else_if = {
		limit = {
			OR = {
				has_relation_rival = scope:recipient
				has_relation_nemesis = scope:recipient
			}
		}
		add_stress = major_stress_loss
		stress_impact = {
			forgiving = medium_stress_impact_gain
			wrathful = medium_stress_impact_loss
			sadistic = medium_stress_impact_loss
		}
	}
}


zz_vayria_magic_duel_contest_effect = {
	zz_valyria_magic_duel_stress_effect = yes 
	if = {
		limit = {
			#scope:weaken_spell_flag = yes
		}
		scope:secondary_recipient = {
			duel = {
				skill = learning 
				target = scope:recipient
				75 = {
					modifier = {
						add = zz_fire_damage_scaling_value
					}
					add_dread = medium_dread_gain
					scope:recipient = {
						if = {
							limit = {
								#scope:strike_imprison_flag = yes
							}
							increase_wounds_effect = { REASON = fire_magic }
							add_trait = burned
							add_trait_xp = {
								trait = burned
								value = { 5 200 }
							}
							add_stress = massive_stress_gain
							imprison_character_effect = {
								TARGET = scope:recipient
								IMPRISONER = scope:actor
							}
						}
						else = {
							show_as_tooltip = {
								add_trait = wounded_3
								add_stress = massive_stress_gain
							}
							scope:actor = {
								if = {
									limit = {
										NOR = {
											has_imprisonment_reason = scope:recipient
											has_banish_reason = scope:recipient
											has_execute_reason = scope:recipient
										}
									}
									add_tyranny = minor_tyranny_gain
								}
							}
							custom_tooltip = zz_valyria_magic_fire_magic_01_mysteries_of_striking_flame.tyranny
						}
					}
				}
				25 = {
					
				}
			}
		}
	}	
	if = {
		limit = {
			#scope:weaken_spell_flag = no
		}
		scope:secondary_recipient = {
			duel = {
				skill = learning 
				target = scope:recipient
				75 = {
					modifier = {
						add = zz_fire_damage_scaling_value
					}
					scope:actor = { 
						add_dread = major_dread_gain
						if = {
							limit = {
								has_execute_reason = scope:recipient
							}
							custom_tooltip = IS_ALLOWED_TO_EXECUTE_DESC
						}
						else = {
							add_tyranny = execution_tyranny_gain
							add_kinslayer_trait_or_nothing_effect = { VICTIM = scope:recipient }
							if = {
								limit = {
									NOT = {	has_trait = murderer	}
								}
								add_trait = murderer
							}
							hidden_effect = {
								if = {
									limit = {
										exists = scope:recipient.primary_heir
										scope:recipient.primary_heir = {
											any_close_family_member = {
												this = scope:recipient
											}
											NOR = {
												has_relation_rival = scope:actor
												has_relation_nemesis = scope:actor
												has_trait = craven
												has_trait = forgiving
											}
										}
									}
									set_relation_rival = scope:recipient.primary_heir
								}
								else_if = {
									limit = {
										scope:recipient.age<16
										exists = scope:recipient.father
										scope:recipient.father = {
											is_alive = yes
											is_landed = yes
											is_ruler = yes
											NOR = {
												has_relation_rival = scope:actor
												has_relation_nemesis = scope:actor
												has_trait = craven
												has_trait = forgiving
											}
										}
									}
									set_relation_rival = scope:recipient.father
								}
							}
						}
					}
					if  = { 
						limit = {
							scope:recipient = { 
								NOT = {
									is_at_war_with = scope:actor
								}	
							}
						}
						execute_opinion_effect = { VICTIM = scope:recipient EXECUTIONER = scope:secondary_recipient }
					}
					scope:recipient = {
						add_trait_xp = {
							trait = burned
							value = { 5 200 }
						}
						death = {
							death_reason = death_fire_magic
							killer = scope:secondary_recipient
						}
					}
				}
				25 = {

				}
			}
		}
	}	
}
zz_valyria_magic_apply_province_modifier_effect = {
	if = { 
		limit = { 
			scope:secondary_recipient = { 
				any_equipped_character_artifact = { 
					has_variable = glass_candle
				}
			}	
		}
		add_province_modifier = {
			modifier = $MODIFIER$
			years = $BOOSTED_DURATION$
		}		
	}
	else = { 
		add_province_modifier = {
			modifier = $MODIFIER$
			years = $DURATION$
		}		
	}
}

zz_valyria_magic_apply_county_modifier_effect = {
	if = { 
		limit = { 
			scope:secondary_recipient = { 
				any_equipped_character_artifact = { 
					has_variable = glass_candle
				}
			}	
		}
		add_county_modifier = {
			modifier = $MODIFIER$
			years = $BOOSTED_DURATION$
		}		
	}
	else = { 
		add_county_modifier = {
			modifier = $MODIFIER$
			years = $DURATION$
		}		
	}
}
zz_valyria_magic_apply_character_modifier_effect = {
	if = { 
		limit = { 
			scope:secondary_recipient = { 
				any_equipped_character_artifact = { 
					has_variable = glass_candle
				}
			}	
		}
		add_character_modifier = {
			modifier = $MODIFIER$
			years = $BOOSTED_DURATION$
		}	
	}
	else = { 
		add_character_modifier = {
			modifier = $MODIFIER$
			years = $DURATION$
		}	
	}
}




zz_valyria_mana_gain = {
	if = {
		limit = {
			has_trait = zz_magister
			has_trait_xp = {
				trait = zz_magister
				track = drops_of_power
				value < 100
			}
		}
		add_trait_xp = {
			trait = zz_magister
			track = drops_of_power
			value =  $MANAGAIN$
		}
	}
	else_if = {
		limit ={
			has_trait_xp = {
				trait = born_under_a_red_comet
				track = stores_of_power_01
				value  < 100
			}
		}
		add_trait_xp = {
			trait = born_under_a_red_comet
			track = stores_of_power_01
			value = $MANAGAIN$
		}
	}
	else_if = {
		limit ={
			has_trait_xp = {
				trait = born_under_a_red_comet
				track = stores_of_power_02
				value  < 100
			}
		}
		add_trait_xp = {
			trait = born_under_a_red_comet
			track = stores_of_power_02
			value = $MANAGAIN$
		}
	}
	else_if = {
		limit ={
			has_trait_xp = {
				trait = born_under_a_red_comet
				track = stores_of_power_03
				value  < 100
			}
		}
		add_trait_xp = {
			trait = born_under_a_red_comet
			track = stores_of_power_03
			value = $MANAGAIN$
		}
	}
	else_if = {
		limit ={
			has_trait_xp = {
				trait = born_under_a_red_comet
				track = stores_of_power_04
				value  < 100
			}
		}
		add_trait_xp = {
			trait = born_under_a_red_comet
			track = stores_of_power_04
			value = $MANAGAIN$
		}
	}
	else_if = {
		limit ={
			has_trait_xp = {
				trait = born_under_a_red_comet
				track = stores_of_power_05
				value  < 100
			}
		}
		add_trait_xp = {
			trait = born_under_a_red_comet
			track = stores_of_power_05
			value = $MANAGAIN$
		}
	}
	else_if = {
		limit ={
			has_trait_xp = {
				trait = born_under_a_red_comet
				track = stores_of_power_06
				value  < 100
			}
		}
		add_trait_xp = {
			trait = born_under_a_red_comet
			track = stores_of_power_06
			value = $MANAGAIN$
		}
	}
	else_if = {
		limit = {
			NOR = {
				has_character_modifier = zz_valyria_magic_drops_power
			}
		}
		add_character_modifier = zz_valyria_magic_drops_power
	}
}

zz_valyria_mana_spend = {
	if = {
		limit = {
			OR = {
				has_character_modifier = zz_valyria_magic_drops_power
			}
		}
		remove_character_modifier = zz_valyria_magic_drops_power
	}
	else_if  = { 
		limit =  { 
			has_trait = born_under_a_red_comet 
			has_trait_xp = {
				trait = born_under_a_red_comet
				track = stores_of_power_06
				value >=$MANACOST$
			}
		}
		
		hidden_effect = {
			add_trait_xp = {
				trait = born_under_a_red_comet
				track = stores_of_power_06
				value = -$MANACOST$  
			}
		}
	}
	else_if  = { 
		limit =  { 
			has_trait = born_under_a_red_comet 
			has_trait_xp = {
				trait = born_under_a_red_comet
				track = stores_of_power_05
				value >=$MANACOST$
			}
		}
		
		hidden_effect = {
			add_trait_xp = {
				trait = born_under_a_red_comet
				track = stores_of_power_05
				value = -$MANACOST$  
			}
		}
	}
	else_if  = { 
		limit =  { 
			has_trait = born_under_a_red_comet 
			has_trait_xp = {
				trait = born_under_a_red_comet
				track = stores_of_power_04
				value >=$MANACOST$
			}
		}
		
		hidden_effect = {
			add_trait_xp = {
				trait = born_under_a_red_comet
				track = stores_of_power_04
				value = -$MANACOST$  
			}
		}
	}
	else_if  = { 
		limit =  { 
			has_trait = born_under_a_red_comet 
			has_trait_xp = {
				trait = born_under_a_red_comet
				track = stores_of_power_03
				value >=$MANACOST$
			}
		}
		hidden_effect = {
			add_trait_xp = {
				trait = born_under_a_red_comet
				track = stores_of_power_03
				value = -$MANACOST$  
			}
		}
	}
	else_if  = { 
		limit =  { 
			has_trait = born_under_a_red_comet 
			has_trait_xp = {
				trait = born_under_a_red_comet
				track = stores_of_power_02
				value >=$MANACOST$
			}
		}
		hidden_effect = {
			add_trait_xp = {
				trait = born_under_a_red_comet
				track = stores_of_power_02
				value =  -$MANACOST$  
			}
		}
	}
	else_if  = { 
		limit =  { 
			has_trait = born_under_a_red_comet 
			has_trait_xp = {
				trait = born_under_a_red_comet
				track = stores_of_power_01
				value >=$MANACOST$
			}
		}
		hidden_effect = {
			add_trait_xp = {
				trait = born_under_a_red_comet
				track = stores_of_power_01
				value = -$MANACOST$  
			}
		}
	}
	else_if  = { 
		limit =  { 
			has_trait = zz_magister 
		}
		hidden_effect = {
			add_trait_xp = {
				trait = zz_magister
				track = drops_of_power
				value = -$MANACOST$  
			}
		}
	}
}

zz_valyria_gain_spell_experience = { 
	add_trait_xp = { 
		trait = zz_magister 
		track = $XPTRACK$ 
		value = $XPGAIN$ 
	}
}

zz_valyria_magic_cast_xp_gain = {
	zz_valyria_gain_spell_experience = {
		XPGAIN = 1 
		XPTRACK = secrets_of_the_higher_mysteries
	}
	zz_valyria_gain_spell_experience = {
		XPGAIN = 1 
		XPTRACK = $SKILL$
	}
}

zz_valyria_magic_cast_effect = { 
	#scope:secondary_recipient = {
	#	remove_variable = casttype
	#}
	if = {
		limit = {
			OR = {
				var:cast_type = flag:mystery
				NOT = {
					exists = var:cast_type
				}
			}

		}
		scope:secondary_recipient = {
			zz_valyria_magic_cast_xp_gain = {
				SKILL = $SKILL$
			}
			zz_valyria_mana_spend = {
				MANACOST = $MANACOST$
			} 
		}
		random_list = { 
			40 = { 
				modifier = {
					add = zz_spellcast_value
				}
				$SPELL$_effect = yes
			}
			60 = { 
				zz_valyria_spell_failure_effect = yes
			}
		}
	}
	else = {
		if = { 
			limit = {
				var:cast_type = flag:scroll
			}
			scope:zz_valyria_scroll = {
				if = {
					limit = {
						var:item_type ?= flag:scroll
						var:spell = flag:$SPELL$
					}
					scope:secondary_recipient = {
						remove_variable = casttype
						set_variable = {
							name = casttype 
							value = flag:scroll
						}
						remove_variable = cast_potency
						set_variable = {
							name = cast_potency 
							value = scope:zz_valyria_scroll.var:cast_potency
						}
					}
				}
				destroy_artifact = this
			}
			$SPELL$_effect = yes
		}
	}
}				
zz_valyria_populate_mage_list = { 
	if = { 
		limit = {
			has_trait = zz_magister
		}
		add_to_list = characters
	}
	every_living_mage = { 
		limit = { 
			liege_or_court_owner ?= scope:actor 
		}
		add_to_list = characters
	}
}

zz_valyria_populate_mage_list_can_teach = { 
	if = { 
		limit = {
			has_trait = zz_magister
			NOT = {
				THIS = scope:recipient
			}
			NOT = { 
				has_character_flag = zz_valyria_magic_taught_magic 
			}
		}
		add_to_list = characters
	}
	every_living_mage = { 
		limit = { 
			NOT = {
				THIS = scope:recipient
			}
			liege_or_court_owner ?= scope:actor 
			NOT = { 
				has_character_flag = zz_valyria_magic_taught_magic 
			}
		}
		add_to_list = characters
	}
}


zz_valyria_populate_spell_caster_list = {
	if = { 
		limit = {
			zz_valyria_valid_caster = {
				SPELL = $SPELL$
				MANACOST = $MANACOST$
			}
		}
		add_to_list = characters
	}
	every_living_mage = { 
		limit = { 
			liege_or_court_owner ?= scope:actor 
			zz_valyria_valid_caster = {
				SPELL = $SPELL$
				MANACOST = $MANACOST$
			}
		}
		add_to_list = characters
	}
}

zz_valyria_populate_spell_recipient_list = {
	scope:recipient = {
		add_to_list = characters
	}
	scope:actor = {
		add_to_list = characters
		every_courtier = {
			add_to_list = characters
		}
		every_child = {
			add_to_list = characters
		}
	}
}

zz_dragon_dreams = {
	remove_character_flag = dreamt
}


zz_valyria_set_spell_values = {
	scope:new_memory = { 
		set_variable = { 
			name = manacost
			value = $MP$
		}
		set_variable = { 
			name = targets_dragon
			value = flag:true
		}
		set_variable = { 
			name = targets_self 
			value = flag:true
		}
		set_variable = { 
			name = targets_caster
			value = flag:true
		}
		set_variable = { 
			name = targets_maa
			value = flag:false
		}
	}
}


zz_add_spell = {
	if = {
		limit = {
			NOT = { 
				zz_valyria_knows_spell = {
					SPELL = $SPELL$
				}
			}
		}
		save_scope_as = spell_learner
		send_interface_message = {
			type = event_generic_neutral
			title = learn.$SPELL$.t
			desc = learn.$SPELL$.desc
			left_icon = scope:spell_learner
			right_icon = scope:spell_learner
			custom_tooltip = learn.$SPELL$.desc
			#add_character_flag =  $SPELL$_flag
			scope:spell_learner = {
				create_character_memory = {
					type = $SPELL$
				}
				scope:new_memory = {
					set_variable = {
						name = learning_location
						value = scope:spell_learner.location
					}
				}
				zz_valyria_set_spell_values = {MP = $SPELL$_cost }
				scope:activity ?= {
					add_activity_log_entry = {
						key = learn.$SPELL$
						score = 25
						tags = { good learning activity }
						character = root
						#Effect
						custom_tooltip = learn.$SPELL$.t
					}
				}
			}
		}		
	}
}

zz_random_spell_gain_effect = {
	trigger = {
		NOT = {
			zz_valyria_knows_spell  = {
				SPELL = $SPELL$
			}
		}
	}
	zz_add_spell  = {
		SPELL = $SPELL$
	}
}

zz_gain_blood_magic_spell = { 
	random_list = {
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_blood_magic_01_mysteries_of_restoration }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_blood_magic_02_mysteries_of_transmogrification }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_blood_magic_03_mysteries_of_regeneration }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_blood_magic_04_mysteries_of_renewal }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_blood_magic_05_mysteries_of_replication }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_blood_magic_06_mysteries_of_draconic_rejuvenation }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_blood_magic_07_mysteries_of_enchanted_blood }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_blood_magic_08_mysteries_of_dragon_laying }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_blood_magic_09_mysteries_of_draconic_enhancement }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_blood_magic_10_mysteries_of_draconic_blood }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_blood_magic_11_mysteries_of_longevity }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_blood_magic_12_mysteries_of_vitality }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_blood_magic_13_mysteries_of_resilience }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_blood_magic_14_mysteries_of_fortitude }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_blood_magic_15_mysteries_of_fertility }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_blood_magic_16_mysteries_of_blood_control }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_blood_magic_17_mysteries_of_vital_consumption }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_blood_magic_18_mysteries_of_draconic_genetics }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_blood_magic_19_mysteries_of_sex_selection }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_blood_magic_20_mysteries_of_maternal_protection }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_blood_magic_21_mysteries_of_babe_protection }	
		}
	}
}

zz_gain_shadow_magic_spell = { 
	random_list = {
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_shadow_magic_01_mysteries_of_shadowy_steeds }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_shadow_magic_02_mysteries_of_shadowy_daggers }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_shadow_magic_03_mysteries_of_the_shadow_shield }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_shadow_magic_04_mysteries_of_the_shadowy_cloak }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_shadow_magic_05_mysteries_cloying_shadow }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_shadow_magic_06_mysteries_of_feeble_daggers }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_shadow_magic_07_mysteries_of_the_weakened_vigilience }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_shadow_magic_08_mysteries_of_the_revealed_shadows }	
		}
	}
}

zz_gain_dream_magic_spell = { 
	random_list = {
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_dream_magic_01_mysteries_mental_domination }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_dream_magic_02_mysteries_of_dreaming_destinies }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_dream_magic_03_mysteries_of_dreams }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_dream_magic_04_mysteries_of_secrets }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_dream_magic_05_mysteries_of_personality_distortion }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_dream_magic_06_mysteries_of_education_reformation }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_dream_magic_07_mysteries_of_dreaming_fascination }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_dream_magic_08_mysteries_of_murderous_dream }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_dream_magic_09_mysteries_of_minor_scrying }	
		}
		100 = {
			zz_random_spell_gain_effect = {SPELL = zz_valyria_magic_dream_magic_10_mysteries_dreams_of_mystic_power }
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_dream_magic_11_mysteries_penetrative_insight}
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_dream_magic_12_mysteries_perceptive_insight }
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_dream_magic_13_mysteries_secret_penetration }
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_dream_magic_14_mysteries_secret_perception }
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_dream_magic_15_mysteries_hidden_discernment }
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_dream_magic_16_mysteries_secret_binding_own }
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_dream_magic_17_mysteries_secret_binding_targeted }
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_dream_magic_18_mysteries_secret_binding_known }
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_dream_magic_19_mysteries_breach_hostile_schemes }
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_dream_magic_20_mysteries_breach_schemes }
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_dream_magic_21_mysteries_empower_hostile_schemes }
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_dream_magic_22_mysteries_empower_schemes }
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_dream_magic_23_mysteries_manipulate_participation_of_hostile_schemes }
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_dream_magic_24_mysteries_manipulate_participation_of_schemes }
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_dream_magic_25_mysteries_reveal_participation_of_hostile_schemes }
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_dream_magic_26_mysteries_reveal_participation_of_schemes }
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_dream_magic_27_mysteries_delay_hostile_schemes }
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_dream_magic_28_mysteries_delay_schemes }
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_dream_magic_29_mysteries_weaken_hostile_schemes }
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_dream_magic_30_mysteries_weaken_schemes }
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_dream_magic_31_mysteries_disrupt_hostile_schemes }
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_dream_magic_32_mysteries_disrupt_schemes }
		}
	}
}

zz_gain_alchemy_spell = { 
	random_list = { 
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_alchemy_magic_01_mysteries_of_growth } 
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_alchemy_magic_02_mysteries_of_construction } 
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_alchemy_magic_03_mysteries_of_transmutation  } 
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_alchemy_magic_04_mysteries_of_arms } 
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_alchemy_magic_05_mysteries_of_realm_fortification } 
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_alchemy_magic_06_mysteries_of_enchantment } 
		}


	}
}


zz_gain_fire_magic_spell = { 
	random_list = {
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_fire_magic_01_mysteries_of_striking_flame } 
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_fire_magic_02_mysteries_of_the_blasting_flame  } 
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_fire_magic_03_mysteries_of_the_storm_of_fire } 
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_fire_magic_04_mysteries_of_flaming_purification } 
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_fire_magic_05_mysteries_of_flaming_blades } 
		}
	}
}



zz_gain_air_magic_spell = { 
	random_list = {
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_air_magic_01_mysteries_of_the_slicing_wind } 
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_air_magic_02_mysteries_of_the_tempestuous_winds } 
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_air_magic_03_mysteries_of_the_wall_of_the_wind  } 
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_air_magic_04_mysteries_of_the_hurricane } 
		}

	}
}
zz_gain_water_magic_spell = { 
	random_list = {
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_water_magic_01_mysteries_of_the_crushing_waters } 
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_water_magic_02_mysteries_of_the_surging_torrent } 
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_water_magic_03_mysteries_of_endurance } 
		}
		100 = {
			zz_random_spell_gain_effect = { SPELL = zz_valyria_magic_water_magic_04_mysteries_of_rhoyne } 
		}
	}
}

zz_random_gain_magic_spell = {
	random_list = {
		100 = {
			trigger = {
				NAND = {
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_blood_magic_01_mysteries_of_restoration
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_blood_magic_02_mysteries_of_transmogrification
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_blood_magic_03_mysteries_of_regeneration
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_blood_magic_04_mysteries_of_renewal
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_blood_magic_05_mysteries_of_replication
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_blood_magic_06_mysteries_of_draconic_rejuvenation
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_blood_magic_07_mysteries_of_enchanted_blood				
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_blood_magic_08_mysteries_of_dragon_laying				
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_blood_magic_09_mysteries_of_draconic_enhancement				
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_blood_magic_10_mysteries_of_draconic_blood				
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_blood_magic_11_mysteries_of_longevity				
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_blood_magic_12_mysteries_of_vitality				
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_blood_magic_13_mysteries_of_resilience				
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_blood_magic_14_mysteries_of_fortitude				
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_blood_magic_15_mysteries_of_fertility				
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_blood_magic_16_mysteries_of_blood_control				
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_blood_magic_17_mysteries_of_vital_consumption				
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_blood_magic_18_mysteries_of_draconic_genetics				
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_blood_magic_19_mysteries_of_sex_selection				
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_blood_magic_20_mysteries_of_maternal_protection				
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_blood_magic_21_mysteries_of_babe_protection				
					}
				}
			}
			modifier = { 
				var:current_school_of_magic ?= flag:blood_magic 
				add = 10000
			}
			zz_gain_blood_magic_spell = yes 
		}
		100 = { 
			trigger = {
				NAND = {
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_shadow_magic_01_mysteries_of_shadowy_steeds
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_shadow_magic_02_mysteries_of_shadowy_daggers
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_shadow_magic_03_mysteries_of_the_shadow_shield
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_shadow_magic_04_mysteries_of_the_shadowy_cloak
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_shadow_magic_05_mysteries_cloying_shadow
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_shadow_magic_06_mysteries_of_feeble_daggers
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_shadow_magic_07_mysteries_of_the_weakened_vigilience
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_shadow_magic_08_mysteries_of_the_revealed_shadows
					}
				}
			}
			modifier = { 
				var:current_school_of_magic ?= flag:shadow_magic 
				add = 10000
			}
			zz_gain_shadow_magic_spell = yes 
		}
		100 = { 
			trigger = {
				NAND = {
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_dream_magic_01_mysteries_mental_domination
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_dream_magic_02_mysteries_of_dreaming_destinies
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_dream_magic_03_mysteries_of_dreams
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_dream_magic_04_mysteries_of_secrets
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_dream_magic_05_mysteries_of_personality_distortion
					}
					zz_valyria_knows_spell = {
						SPELL = zz_valyria_magic_dream_magic_06_mysteries_of_education_reformation
					}
					zz_valyria_knows_spell = {
						SPELL = zz_valyria_magic_dream_magic_07_mysteries_of_dreaming_fascination
					}
					zz_valyria_knows_spell = {
						SPELL = zz_valyria_magic_dream_magic_09_mysteries_of_minor_scrying
					}
					zz_valyria_knows_spell = {
						SPELL = zz_valyria_magic_dream_magic_10_mysteries_dreams_of_mystic_power
					}
					zz_valyria_knows_spell = {
						SPELL = zz_valyria_magic_dream_magic_11_mysteries_penetrative_insight
					}
					zz_valyria_knows_spell = {
						SPELL = zz_valyria_magic_dream_magic_12_mysteries_perceptive_insight
					}
					zz_valyria_knows_spell = {
						SPELL = zz_valyria_magic_dream_magic_13_mysteries_secret_penetration
					}
					zz_valyria_knows_spell = {
						SPELL = zz_valyria_magic_dream_magic_14_mysteries_secret_perception
					}
					zz_valyria_knows_spell = {
						SPELL = zz_valyria_magic_dream_magic_15_mysteries_hidden_discernment
					}
					zz_valyria_knows_spell = {
						SPELL = zz_valyria_magic_dream_magic_16_mysteries_secret_binding_own
					}
					zz_valyria_knows_spell = {
						SPELL = zz_valyria_magic_dream_magic_17_mysteries_secret_binding_targeted
					}
					zz_valyria_knows_spell = {
						SPELL = zz_valyria_magic_dream_magic_18_mysteries_secret_binding_known
					}
					zz_valyria_knows_spell = {
						SPELL = zz_valyria_magic_dream_magic_19_mysteries_breach_hostile_schemes
					}
					zz_valyria_knows_spell = {
						SPELL = zz_valyria_magic_dream_magic_20_mysteries_breach_schemes
					}
					zz_valyria_knows_spell = {
						SPELL = zz_valyria_magic_dream_magic_21_mysteries_empower_hostile_schemes
					}
					zz_valyria_knows_spell = {
						SPELL = zz_valyria_magic_dream_magic_22_mysteries_empower_schemes
					}
					zz_valyria_knows_spell = {
						SPELL = zz_valyria_magic_dream_magic_23_mysteries_manipulate_participation_of_hostile_schemes
					}
					zz_valyria_knows_spell = {
						SPELL = zz_valyria_magic_dream_magic_24_mysteries_manipulate_participation_of_schemes
					}
					zz_valyria_knows_spell = {
						SPELL = zz_valyria_magic_dream_magic_25_mysteries_reveal_participation_of_hostile_schemes
					}
					zz_valyria_knows_spell = {
						SPELL = zz_valyria_magic_dream_magic_26_mysteries_reveal_participation_of_schemes
					}
					zz_valyria_knows_spell = {
						SPELL = zz_valyria_magic_dream_magic_27_mysteries_delay_hostile_schemes
					}
					zz_valyria_knows_spell = {
						SPELL = zz_valyria_magic_dream_magic_28_mysteries_delay_schemes
					}
					zz_valyria_knows_spell = {
						SPELL = zz_valyria_magic_dream_magic_29_mysteries_weaken_hostile_schemes
					}
					zz_valyria_knows_spell = {
						SPELL = zz_valyria_magic_dream_magic_30_mysteries_weaken_schemes
					}
					zz_valyria_knows_spell = {
						SPELL = zz_valyria_magic_dream_magic_31_mysteries_disrupt_hostile_schemes
					}
					zz_valyria_knows_spell = {
						SPELL = zz_valyria_magic_dream_magic_32_mysteries_disrupt_schemes
					}
				}
			}
			modifier = { 
				var:current_school_of_magic ?= flag:dream_magic 
				add = 10000
			}
			zz_gain_dream_magic_spell = yes 
		}
		100 = { 
			trigger = {
				NAND = {
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_alchemy_magic_01_mysteries_of_growth
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_alchemy_magic_02_mysteries_of_construction
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_alchemy_magic_03_mysteries_of_transmutation
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_alchemy_magic_04_mysteries_of_arms
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_alchemy_magic_05_mysteries_of_realm_fortification
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_alchemy_magic_06_mysteries_of_enchantment
					}
				}
			}
			modifier = { 
				var:current_school_of_magic ?= flag:alchemy_magic 
				add = 10000
			}
			zz_gain_alchemy_spell = yes 
		}
		100 = { 
			trigger = {
				NAND = {
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_fire_magic_01_mysteries_of_striking_flame
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_fire_magic_02_mysteries_of_the_blasting_flame
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_fire_magic_03_mysteries_of_the_storm_of_fire
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_fire_magic_04_mysteries_of_flaming_purification
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_fire_magic_05_mysteries_of_flaming_blades
					}
				}
			}
			modifier = { 
				var:current_school_of_magic ?= flag:fire_magic 
				add = 10000
			}
			zz_gain_fire_magic_spell = yes
		}
		100 = {
			trigger = {
				NAND = {
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_water_magic_01_mysteries_of_the_crushing_waters
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_water_magic_02_mysteries_of_the_surging_torrent
					}
					zz_valyria_knows_spell = {
						SPELL = zz_valyria_magic_water_magic_03_mysteries_of_endurance
					}
					zz_valyria_knows_spell = {
						SPELL = zz_valyria_magic_water_magic_04_mysteries_of_rhoyne
					}
				}
			}
			modifier = { 
				var:current_school_of_magic ?= flag:water_magic 
				add = 10000
			}
			
			zz_gain_water_magic_spell  = yes 
		}
		100 = { 
			trigger = {
				NAND = {
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_air_magic_01_mysteries_of_the_slicing_wind
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_air_magic_02_mysteries_of_the_tempestuous_winds
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_air_magic_03_mysteries_of_the_wall_of_the_wind
					}
					zz_valyria_knows_spell  = {
						SPELL = zz_valyria_magic_air_magic_04_mysteries_of_the_hurricane
					}
				}
			}

			modifier = { 
				var:current_school_of_magic ?= flag:air_magic 
				add = 10000
			}
			zz_gain_air_magic_spell = yes
		}			
	}
}

zz_valyria_magic_learning_gui_effect = {
	if  = { 
		limit  = {
			scope:zz_valyria_mystery = {
				has_memory_type = $SPELL$
			}
		}
		scope:zz_magic_learner = {
			zz_add_spell = { 
				SPELL = $SPELL$
			}
		}
	}
}

zz_valyria_magic_casting_gui_tooltip_effect = {
	if = {
		limit = {
			scope:zz_valyria_mystery = { 
				has_memory_type = $SPELL$
			}
		}
		custom_tooltip = $SPELL$.interaction.desc
	}
}

zz_valyria_magic_casting_scroll_gui_tooltip_effect = {
	if = {
		limit = {
			scope:zz_valyria_scroll = { 
				var:spell ?= flag:$SPELL$
			}
		}
		custom_tooltip = $SPELL$.interaction.desc
	}
}

zz_valyria_magic_casting_gui_effect = {
	if = {
		limit = {
			scope:zz_valyria_mystery = { 
				has_memory_type = $SPELL$
			}
		}
		custom_tooltip = $SPELL$.interaction.desc
		trigger_event = { 
			id = $EVENT$ 
		}
	}
}

zz_valyria_magic_casting_scroll_gui_effect = {
	if = {
		limit = {
			scope:zz_valyria_scroll = { 
				var:spell ?= flag:$SPELL$
			}
		}
		custom_tooltip = $SPELL$.interaction.desc
		trigger_event = { 
			id = $EVENT$ 
		}
	}
}

zz_valyria_scroll_making_gui_effect = {
	if  = { 
		limit  = {
			scope:zz_valyria_mystery = {
				has_memory_type = $SPELL$
			}
		}
		agot_create_artifact_saans_scrolls_effect = { OWNER = root }
		scope:newly_created_artifact = {
			
			set_variable = {
				name = item_type
				value = flag:scroll 
			}
			set_variable = {
				name = spell
				value = flag:$SPELL$
			}
			set_variable = {
				name = cast_potency
				value = {
					scope:zz_scroll_maker = {
						value = zz_valyria_higher_mysteries_stat_gui
					}
				}
			}
			set_artifact_name = zz_valyria_artifact_magic_scroll_name
		}
	}
}

