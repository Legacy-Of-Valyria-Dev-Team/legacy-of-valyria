#On actions about titles

# All on-actions in this file provide scope:transfer_type unless otherwise noted
# scope:transfer_type has the following permutations:
# flag:conquest
# flag:conquest_holy_war
# flag:conquest_claim
# flag:conquest_populist
# flag:inheritance
# flag:abdication
# flag:destroyed
# flag:created
# flag:usurped
# flag:granted
# flag:revoked
# flag:election
# flag:independency
# flag:returned
# flag:leased_out
# flag:lease_revoked
# flag:faction_demand
# flag:swear_fealty
# flag:stepped_down

zz_lov_item_grant_on_action = {
	trigger = {
		scope:title =title:k_lokiria 
		any_character_artifact = {
			NOT = {
				has_artifact_modifier = vs_torment_modifier
			}	
		}
	}
	effect = {
		every_artifact = { 
			limit = { 
				has_artifact_modifier = vs_torment_modifier
			}
			scope:title.holder = { 
				add_personal_artifact_claim = prev
			}
		}
	}
}



# A title is transferred to a new character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Might be dead
on_title_gain = {
	effect = {

		# EP3 ADVENTURERS BECOMING LANDED
		if = {
			limit = {
				scope:title = { is_titular = no }
				any_held_title = { has_variable = adventurer_creation_reason }
			}
			save_scope_as = adventurer
			if = {
				limit = {
					NOT = { has_trait = adventurer }
				}
				add_trait = adventurer
			}
			every_courtier = {
				#AGOT ADDED
				limit = {
					is_human = yes
				}
				set_variable = {
					name = former_camp_leader
					value = scope:adventurer
				}
				add_trait = adventurer_follower
			}
			destroy_laamp_effect = { ADVENTURER = scope:adventurer }
			# EP3 - Ensure NF holders are Admin
			if = {
				limit = {
					scope:title = { is_noble_family_title = yes }
					AND = {
						government_has_flag = government_is_administrative 
						NOT  = { 
							government_has_flag = government_is_freehold
						}
					}
				}
				change_government = administrative_government
			}
			else_if = {
				limit = {
					scope:title = { is_noble_family_title = yes }
					AND = {
						government_has_flag = government_is_administrative  
						government_has_flag = government_is_freehold
					}
				}
				change_government = freehold_government
			}
		}
		
		# Note: anything that should be run after creation can go in on_noble_family_title_created
		if = {
			limit = {
				government_allows = administrative
				is_house_head = yes
				highest_held_title_tier >= tier_duchy
				liege = {
					is_independent_ruler = yes
					government_allows = administrative
					NOT = {
						government_has_flag = government_is_freehold
					}
				}
				NOR = {
					any_held_title = { is_noble_family_title = yes }
					house = {
						any_house_member = {
							any_held_title = { is_noble_family_title = yes }
						}
					}
				}
			}
			create_noble_family_effect = yes
			domicile ?= { set_up_domicile_estate_effect = yes }
		}
		if = {
			limit = { 
				government_allows = administrative
				is_house_head = yes
				highest_held_title_tier >= tier_duchy
				liege = {
					is_independent_ruler = yes
					government_allows = administrative
					government_has_flag = government_is_freehold
				}
				NOR = {
					any_held_title = { is_noble_family_title = yes }
					house = {
						any_house_member = {
							any_held_title = { is_noble_family_title = yes }
						}
					}
				}
			}
			create_noble_family_dragonrider_effect  = yes
			#domicile ?= { set_up_domicile_estate_effect = yes }
		}
		# EP3 - Ensure Emperor keeps old realm capital in admin realms & apply unique domicile building bonus if appropriate
		if = {
			limit = {
				government_allows = administrative
				is_independent_ruler = yes
				highest_held_title_tier >= tier_empire
			}
			if = { # Ensure we keep the old realm capital
				limit = {
					scope:title = {
						tier = tier_empire
						NOT = { title_capital_county = root.capital_county }
						# Constantinople must have been inherited
						title_capital_county.holder = root
					}
				}
				set_realm_capital = scope:title.title_capital_county
			}
			if = { # Get legitimacy from Reception Hall House Bonus
				limit = {
					house = { has_variable = ep3_legacy_legitimacy_counter }
					primary_title = scope:title
				}
				trigger_event = {
					id = ep3_admin_events.0010
					days = 1
				}
			}
		}
		# EP3 - Fire a became governor event
		else_if = {
			limit = {
				government_allows = administrative
				is_independent_ruler = no
				is_governor = yes
				any_held_title = {
					count < 1
					NOT = { this = scope:title }
					tier >= scope:title.tier
					is_landless_type_title = no
					is_noble_family_title = no
				}
			}
			trigger_event = {
				id = ep3_admin_events.0002
				delayed = yes
			}
		}

		scope:title = { update_dynamic_coa = yes }

		if = {
			limit = {
				scope:title = { is_holy_order = yes }
				NOT = { has_trait = order_member }
				government_has_flag = government_is_holy_order
			}
			add_trait = order_member
		}
		
		if = {
			limit = {
				has_character_flag = peasant_outfit
			}
			remove_character_flag = peasant_outfit
		}

		# Did I receive a title from my sibling?
		if = {
			limit = {
				exists = scope:previous_holder
				scope:previous_holder = {
					is_alive = yes
					exists = var:sibling_waiting_for_land
					any_sibling = {
						this = root
						this = scope:previous_holder.var:sibling_waiting_for_land
					}
				}
			}
			add_character_flag = {
				flag = got_title_from_sibling
				years = 4
			}
		}

		# Grandeur in elective realms
		if = {
			limit = {
				exists = var:previous_holder_grandeur_value
				has_royal_court = yes
				has_dlc_feature = royal_court
			}
			hidden_effect = {
				change_current_court_grandeur = -100 # Reset to 0
				change_current_court_grandeur = var:previous_holder_grandeur_value
				remove_variable = previous_holder_grandeur_value
			}
		}

		# Petition allowed again
		if = {
			limit = { has_variable = petition_title_cooldown }
			remove_variable = petition_title_cooldown
		}

		# If a player is on their way to pay homage, invalidate.
		if = {
			limit = {
				exists = scope:previous_holder
				any_player = { var:homage_liege_scope ?= scope:previous_holder }
			}
			every_player = {
				limit = {
					var:homage_liege_scope ?= scope:previous_holder
					NOT = { has_character_flag = currently_invalidating_petition_liege_travel }
				}
				current_travel_plan = { cancel_travel_plan = yes }
				trigger_event = pay_homage.0601
				add_character_flag = {
					flag = currently_invalidating_petition_liege_travel
					days = 1
				}
			}
		}

		if = {
			limit = {
				exists = scope:previous_holder
				scope:previous_holder = {
					any_character_artifact = {
						has_variable = artifact_succession_title #Is this an artifact that should follow a title?
						var:artifact_succession_title = { is_title_created = yes } #Does the title the artifact should follow exist?
						var:artifact_succession_title = scope:title #Scope title is the artifact title
					}
				}
			}
			scope:previous_holder = {
				every_character_artifact = {
					limit = {
						has_variable = artifact_succession_title #Is this an artifact that should follow a title?
						var:artifact_succession_title = { is_title_created = yes } #Does the title the artifact should follow exist?
						var:artifact_succession_title = scope:title #Scope title is the artifact title
					}
					if = {
						limit = {
							OR = {
								scope:transfer_type = flag:conquest
								scope:transfer_type = flag:conquest_holy_war
								scope:transfer_type = flag:conquest_claim
								scope:transfer_type = flag:conquest_populist
								scope:transfer_type = flag:abdication
								scope:transfer_type = flag:usurped
								scope:transfer_type = flag:revoked
								scope:transfer_type = flag:faction_demand
							}
						}
						set_owner = {
							target = root
							history = {
								type = conquest
								actor = scope:previous_holder
								recipient = root
								location = scope:previous_holder.location
							}
						}
					}
					else = {
						set_owner = {
							target = root
							history = {
								type = inherited
								recipient = root
							}
						}
					}
				}
			}
		}

		#AGOT Disabled
		## FP3 Title Transfer Notification
		#if = {
		#	limit = {
		#		exists = struggle:persian_struggle
		#		OR = {
		#			scope:title = title:d_sunni
		#			scope:title = title:e_arabia
		#		}
		#	}
		#	struggle:persian_struggle = { # Wet script
		#		every_involved_ruler = {
		#			send_interface_toast = {
		#				type = event_toast_effect_bad
		#				title = persian_struggle_central_title_transfer.t
		#				left_icon = scope:previous_holder
		#				right_icon = scope:title.holder

		#				custom_tooltip = persian_struggle_central_title_transfer.desc
		#			}
		#		}
		#		every_interloper_ruler = {
		#			send_interface_toast = {
		#				type = event_toast_effect_bad
		#				title = persian_struggle_central_title_transfer.t
		#				left_icon = scope:previous_holder
		#				right_icon = scope:title.holder

		#				custom_tooltip = persian_struggle_central_title_transfer.desc
		#			}
		#		}
		#	}
		#}

		#AGOT Disabled
		##Struggle Catalyst
		#if = {
		#	limit = {
		#		scope:title.tier >= tier_county
		#		title:e_persia = {
		#			any_in_de_jure_hierarchy = {
		#				this = 	scope:title
		#			}
		#		}
		#		NOR = {
		#			scope:transfer_type = flag:created
		#			scope:transfer_type = flag:inheritance
		#		}
		#		fp3_character_uninvolved_in_struggle_trigger = yes
		#		scope:previous_holder ?= {
		#			fp3_character_involved_in_struggle_trigger = yes
		#			any_character_struggle = {
		#				phase_has_catalyst = catalyst_interloper_uninvolved_gain_struggle_titles
		#			}
		#		}
		#	}
		#	scope:previous_holder ?= {
		#		every_character_struggle = {
		#			limit = { phase_has_catalyst = catalyst_interloper_uninvolved_gain_struggle_titles }
		#			activate_struggle_catalyst = {
		#				catalyst = catalyst_interloper_uninvolved_gain_struggle_titles
		#				character = root
		#			}
		#			log_debug_variable_for_persian_struggle_effect = { VAR = concession_catalyst_interloper_uninvolved_gain_struggle_titles }
		#		}
		#	}
		#}
		#if = {
		#	limit = {
		#		scope:title.tier >= tier_county
		#		title:e_persia = {
		#			any_in_de_jure_hierarchy = {
		#				this = scope:title
		#			}
		#		}
		#		NOR = {
		#			scope:transfer_type = flag:created
		#			scope:transfer_type = flag:inheritance
		#		}
		#		fp3_character_involved_in_struggle_trigger = yes
		#		any_character_struggle = {
		#			phase_has_catalyst = catalyst_gain_struggle_titles_from_interlopers_uninvolved
		#			# Stop catalyst from affecting those who are only just now uninvolved due to losing this title
		#			OR = {
		#				NOT = { is_culture_involved_in_struggle = scope:previous_holder.culture }
		#				NOT = { is_faith_involved_in_struggle = scope:previous_holder.faith }
		#			}
		#		}
		#		scope:previous_holder ?= {
		#			OR = {
		#				fp3_character_uninvolved_in_struggle_trigger = yes
		#				fp3_character_interloper_in_struggle_trigger = yes
		#			}
		#		}
		#	}
		#	every_character_struggle = {
		#		limit = { phase_has_catalyst = catalyst_gain_struggle_titles_from_interlopers_uninvolved }
		#		activate_struggle_catalyst = {
		#			catalyst = catalyst_gain_struggle_titles_from_interlopers_uninvolved
		#			character = root
		#		}
		#		log_debug_variable_for_persian_struggle_effect = { VAR = stabil_catalyst_gain_struggle_titles_from_interlopers_uninvolved }
		#	}
		#}

		#AGOT Disabled
		## Achievements
		#if = { # FP2 El Cid
		#	limit = {
		#		scope:title = title:k_valencia
		#		has_character_flag = fp2_el_cid_blood_relation_legacy
		#	}
		#	set_global_variable = { # DO. NOT. USE. add_achievement_global_variable_effect. IT BREAKS THE ACHIEVEMENT.
		#		name = fp2_el_cid_achievement_unlocked
		#		value = yes
		#	}
		#}

		#AGOT Disabled
		## Am I The Chad?
		#if = {
		#	limit = { root = character:easteregg_chad_uhl }
		#	set_house = house:house_chad_uhl
		#}

		if = {
			limit = {
				scope:transfer_type = flag:created
				is_alive = yes
			}
			every_vassal = {
				limit = {
					has_vassal_stance = courtly
				}
				if = {
					limit = {
						scope:title.tier = tier_duchy
					}
					add_opinion = {
						target = root
						modifier = courtly_title_creation_opinion
						opinion = 10
					}
				}
				else = {
					add_opinion = {
						target = root
						modifier = courtly_title_creation_opinion
						opinion = 30
					}
				}
			}
		}
		#AGOT Disabled
		#if = {
		#	limit = {
		#		scope:title = title:c_jerusalem
		#		# Samaritan HoF exists
		#		exists = title:d_samaritan.holder
		#		# Samaritan HoF is not independent
		#		title:d_samaritan.holder = { exists = liege }
		#		# Samaritan HoF is not Samaritan
		#		title:d_samaritan.holder = { NOT = { faith = faith:samaritan } }
		#		# root is at least a king, or their liege is, or their liege's liege is
		#		OR = {
		#			highest_held_title_tier >= tier_kingdom
		#			liege ?= { highest_held_title_tier >= tier_kingdom }
		#			liege.liege ?= { highest_held_title_tier >= tier_kingdom }
		#		}
		#	}
		#	create_title_and_vassal_change = {
		#		type = created
		#		save_scope_as = title_change
		#		add_claim_on_loss = no
		#	}
		#	if = {
		#		limit = {
		#			highest_held_title_tier >= tier_kingdom
		#		}
		#		title:d_samaritan.holder = {
		#			change_liege = {
		#				liege = root
		#				change = scope:title_change
		#			}
		#		}
		#	}
		#	else_if = {
		#		limit = {
		#			exists = liege
		#			liege = { highest_held_title_tier >= tier_kingdom }
		#		}
		#		title:d_samaritan.holder = {
		#			change_liege = {
		#				liege = root.liege
		#				change = scope:title_change
		#			}
		#		}
		#	}
		#	else_if = {
		#		limit = {
		#			exists = liege.liege
		#			liege.liege = { highest_held_title_tier >= tier_kingdom }
		#		}
		#		title:d_samaritan.holder = {
		#			change_liege = {
		#				liege = root.liege.liege
		#				change = scope:title_change
		#			}
		#		}
		#	}
		#	resolve_title_and_vassal_change = scope:title_change
		#}

		#AGOT Disabled
		## FP3 Struggle special cases
		### Convert detractors to supporters if they inherit either of the titles they're detracting against.
		#if = {
		#	limit = {
		#		exists = struggle:persian_struggle
		#		NOT = { has_trait = fp3_struggle_supporter }
		#		OR = {
		#			scope:title = title:d_sunni
		#			scope:title = title:e_arabia
		#		}
		#	}
		#	if = {
		#		limit = { has_trait = fp3_struggle_detractor }
		#		remove_trait = fp3_struggle_detractor
		#	}
		#	add_trait = fp3_struggle_supporter
		#}

		# Special Legitimacy gain for being elected
		if = {
			limit = {
				scope:title = {
					has_order_of_succession = election
				}
				has_legitimacy = yes
			}
			save_scope_value_as = {
				name = title_tier_minus_2
				value = {
					value = scope:title.tier
					subtract = 2
				}
			}
			send_interface_toast = {
				type = msg_legitimacy_gain
				title = legitimacy_gain_toast
				left_icon = root
				right_icon = scope:title
				add_legitimacy = {
					value = {
						value = major_legitimacy_gain
						multiply = scope:title_tier_minus_2
					}
				}
			}
		}

		# Did I conquer a place with holy order leases not of my faith?
		if = {
			limit = {
				scope:title = {
					any_in_de_jure_hierarchy = {
						tier = tier_barony
						is_under_holy_order_lease = yes
						county.holder = {
							any_liege_or_above = { this = root }
						}
						lessee = {
							NAND = { # Only for leases of people who are not of your faith or the holder's faith
								faith = root.faith
								faith = prev.county.holder.faith
							}
						}
					}
				}
			}
			scope:title = {
				every_in_de_jure_hierarchy = {
					limit = {
						tier = tier_barony
						is_under_holy_order_lease = yes
						county.holder = {
							any_liege_or_above = { this = root }
						}
						lessee = {
							NAND = { # Only for leases of people who are not of your faith or the holder's faith
								faith = root.faith
								faith = prev.county.holder.faith
							}
						}
					}
					revoke_lease = yes
				}
			}
		}

		# EP3 ADVENTURERS TELEPORT TO THEIR CAMP
		trigger_event = {
			id = title_event.9911
			days = 1
		}

		current_travel_plan ?= {
			if = {
				limit = { is_travel_with_domicile = yes }
				abort_travel_plan = yes
			}
		}

		# EP3 ADVENTURER BEING INHERITED BY LANDED
		if = {
			limit = {
				scope:title = {
					has_variable = adventurer_creation_reason
				}
				any_held_title = {
					NOT = { has_variable = adventurer_creation_reason }
				}
			}
			every_held_title = {
				limit = { has_variable = adventurer_creation_reason }
				save_scope_as = landless_adventurer_title
				root = { destroy_title = scope:landless_adventurer_title }
			}
		}

		# EP3 LAAMP SUPPORTER INVALIDATION
		if = {
			limit = {
				exists = var:adventurer_invasion_supporter
				NOT = { government_has_flag = government_is_landless_adventurer }
			}
			ep3_laamp_supporter_invalidated_effect = yes
		}

		### EP3 Admin Emperor Flavor ###
		if = {
			limit = {
				has_ep3_dlc_trigger = yes
				# You didn't just create the title
				scope:title = {
					tier >= tier_empire
					any_past_holder = {
						count >= 1
					}
					# Your predecessor wasn't from your same house - not much to celebrate if you got the title from dad!
					previous_holder ?= {
						NOT = { house = root.house }
					}
				}
				# Admin only
				government_allows = administrative
			}
			trigger_event = {
				id = ep3_emperor_yearly.2050
				days = 5
			}
		}

		# Admin vassals get the Governor trait when they first become a governor
		if = {
			limit = {
				is_governor = yes
				NOT = { has_trait = governor }
				scope:title = {
					tier >= tier_duchy
				}
			}
			add_trait = governor
		}

		# Additional Flavor Titles
		root = { additional_flavor_check_effect = yes }

		#Admin imperial succession notification event (it's a big deal)
		if = {
			limit = {
				has_ep3_dlc_trigger = yes
				government_allows = administrative
				is_independent_ruler = yes
				highest_held_title_tier >= tier_kingdom
				scope:title = {
					this = root.primary_title
				}
				#Checks so this event doesn't fire after character creation, although it's not really a problem if it does
				#AGOT Disabled
				#trigger_if = {
				#	limit = {
				#		game_start_date = 867.1.1
				#	}
				#	current_date >= 867.1.4
				#}
				#trigger_if = {
				#	limit = {
				#		game_start_date = 1066.9.15
				#	}
				#	current_date >= 1066.9.18
				#}
				#trigger_if = {
				#	limit = {
				#		game_start_date = 1178.10.1
				#	}
				#	current_date >= 1178.10.4
				#}
			}
			save_scope_as = emperor
			#Should trigger special event during fourth crusade!
			#AGOT Disabled
			#if = {
			#	limit = {
			#		exists = global_var:byz_claimant_champion
			#		global_var:byz_claimant_champion = {
			#			any_owned_story = {
			#				story_type = frankokratia_story
			#				exists = var:byz_claimant
			#				var:byz_claimant = {
			#					this = root
			#				}
			#			}
			#		}
			#	}
			#	every_vassal_or_below = {
			#		limit = {
			#			is_playable_character = yes
			#		}
			#		trigger_event = ep3_frankokratia_events.0110
			#	}
			#}
			#else = {
				if = {
					limit = {
						exists = root.house
					}
					#normal triggering
					every_vassal_or_below = {
						limit = {
							is_playable_character = yes
							exists = scope:previous_holder
							government_allows = administrative
							OR = {
								highest_held_title_tier >= tier_duchy
								liege = root
							}
						}
						trigger_event = {
							id = ep3_governor_yearly.3060
							days = 1
						}
					}
				}
			#AGOT Disabled
			#}
		}
		# Reset raid remit
		if = {
			limit = {
				this = top_liege
				any_noble_family = { count > 0 }
			}
			every_noble_family = {
				holder = { remove_variable = raid_estate_permission }
			}
		}
		#Admin event about rewarding person who helped you get title
		if = {
			limit = {
				has_ep3_dlc_trigger = yes
				government_allows = administrative
				has_succession_appointment_investors = scope:title
				scope:title = {
					any_succession_appointment_investors = {
						count >= 1
						candidate = root
						value >= 20
						NOT = {
							house ?= root.house
						}
						is_alive = yes
						is_imprisoned = no
						NOR = {
							has_relation_rival = root
							is_at_war_with = root
						}
					}
				}
			}
			save_scope_as = new_landed_admin
			trigger_event = {
				id = ep3_interactions_events.0600
				days = { 5 10 }
			}
		}

		# Have we been given a fair shake as a laamp, but we're sucking?
		if = {
			limit = {
				is_landless_adventurer = yes
				is_ai = yes
				scope:previous_holder = { is_ai = yes }
				primary_title = {
					any_past_holder = { count >= 4 }
				}
				NOR = {
					# If the heir is sufficiently impressive, then we'll keep 'em around.
					prestige_level >= 2
					# Legitimists are always worthwhile.
					has_realm_law = camp_purpose_legitimists
					# Reserve successful mercenary outfits.
					AND = {
						max_military_strength >= 1500
						# Allow absolute decimations to destroy mercs from time to time.
						current_military_strength <= 150
					}
					# Or those currently fighting alongside/against players.
					AND = {
						is_at_war = yes
						OR = {
							any_war_ally = { is_ai = no }
							any_war_enemy = { is_ai = no }
						}
					}
					# Depending on camp purpose, we want various skills.
					AND = {
						has_realm_law = camp_purpose_wanderers
						OR = {
							highest_skill_value >= very_high_skill_rating
							prowess >= very_high_skill_rating
						}
					}
					AND = {
						has_realm_law = camp_purpose_mercenaries
						OR = {
							martial >= high_skill_rating
							prowess >= high_skill_rating
						}
					}
					AND = {
						has_realm_law = camp_purpose_scholars
						OR = {
							learning >= high_skill_rating
							diplomacy >= high_skill_rating
						}
					}
					AND = {
						has_realm_law = camp_purpose_explorers
						OR = {
							diplomacy >= high_skill_rating
							stewardship >= high_skill_rating
						}
					}
					AND = {
						has_realm_law = camp_purpose_brigands
						OR = {
							intrigue >= high_skill_rating
							prowess >= high_skill_rating
						}
					}
					# Finally, keep anyone who's important to the player.
					any_player = {
						OR = {
							root.dynasty ?= dynasty
							is_consort_of = root
							has_important_relationship_with_character_trigger = { CHARACTER = root }
							any_pinned_character = { this = root }
							any_pinned_character = { this = scope:previous_holder }
						}
					}
				}
			}
			destroy_laamp_effect = { ADVENTURER = root }
		}
		#Notification for house members of title holder
		if = {
			limit = {
				scope:title.tier > tier_barony
				primary_title.tier <= scope:title.tier
				government_allows = administrative
				NOT = { has_character_flag = admin_title_gain_notification_sent }
				house ?= {
					any_house_member = {
						is_ai = no
						top_liege = root.top_liege
						government_allows = administrative
						NOT = { this = root }
					}
				}
			}
			add_character_flag = {
				flag = admin_title_gain_notification_sent
				days = 10
			}
			save_scope_as = title_gainer
			house = {
				every_house_member = {
					limit = {
						is_ai = no
						top_liege = root.top_liege
						government_allows = administrative
						NOT = { this = scope:title_gainer }
					}
					send_interface_message = {
						type = msg_admin_title_gained
						title = msg_admin_title_gained_house.tt
						desc = msg_admin_title_gained.desc
						left_icon = scope:title_gainer
						right_icon = scope:title
					}
				}
			}
		}
		#Notification for admin investors in new title holder
		if = {
			limit = {
				NOT = { has_character_flag = admin_title_gain_notification_sent }
				scope:title = {
					tier > tier_barony
					any_succession_appointment_investors = {
						candidate = root
						is_ai = no
						trigger_if = {
							limit = { exists = root.house }
							NOT = { house ?= root.house }
						}
					}
				}
			}
			add_character_flag = {
				flag = admin_title_gain_notification_sent
				days = 10
			}
			save_scope_as = title_gainer
			scope:title = {
				every_succession_appointment_investors = {
					candidate = root
					value > 0
					limit = {
						is_ai = no
						trigger_if = {
							limit = { exists = root.house }
							NOT = { house ?= root.house }
						}
					}
					send_interface_message = {
						type = msg_admin_title_gained
						title = msg_admin_title_gained_investor.tt
						desc = msg_admin_title_gained.desc
						left_icon = scope:title_gainer
						right_icon = scope:title
					}
				}
				every_succession_appointment_investors = {
					candidate = root
					value < 0
					limit = {
						is_ai = no
						trigger_if = {
							limit = { exists = root.house }
							NOT = { house ?= root.house }
						}
					}
					send_interface_message = {
						type = msg_admin_title_gained_foe
						title = msg_admin_title_gained_foe.tt
						desc = msg_admin_title_gained.desc
						left_icon = scope:title_gainer
						right_icon = scope:title
					}
				}
			}
		}
		#Byzantium is reborn!
		#AGOT Disabled
		#if = {
		#	limit = {
		#		scope:title = {
		#			this = title:e_byzantium
		#		}
		#		exists = global_var:byz_collapse_counter
		#	}
		#	save_scope_as = byz_emperor
		#	title:e_byzantium = {
		#		every_in_de_jure_hierarchy = {
		#			limit = {
		#				tier <= tier_kingdom
		#				tier >= tier_county	
		#				is_title_created = yes
		#				exists = holder
		#			}
		#			if = {
		#				limit = {
		#					exists = holder
		#					holder = {
		#						is_alive = yes
		#						NOR = {
		#							is_in_list = byz_return_notify
		#							any_held_title = {
		#								this = title:e_byzantium
		#							}
		#						}
		#					}
		#				}
		#				holder = {
		#					add_to_list = byz_return_notify
		#				}
		#			}
		#		}
		#	}
		#	title:e_latin_empire = {
		#		every_in_de_jure_hierarchy = {
		#			limit = {
		#				tier <= tier_kingdom
		#				tier >= tier_county	
		#				is_title_created = yes
		#				exists = holder
		#			}
		#			if = {
		#				limit = {
		#					holder = {
		#						is_alive = yes
		#						NOR = {
		#							is_in_list = byz_return_notify
		#							any_held_title = {
		#								this = title:e_byzantium
		#							}
		#						}
		#					}
		#				}
		#				holder = {
		#					add_to_list = byz_return_notify
		#				}
		#			}
		#		}
		#	}
		#	every_in_list = {
		#		list = byz_return_notify
		#		trigger_event = ep3_frankokratia_events.0130
		#	}
		#	remove_global_variable = byz_collapse_counter
		#}
		
		# Lil Johnny Lackland changes his nickname.
		#AGOT Disabled
		#if = {
		#	limit = {
		#		has_nickname = nick_lackland_young
		#		highest_held_title_tier >= tier_duchy
		#	}
		#	give_nickname = nick_lackland_ironic
		#}
		
		### MEMORIES - SHOULD STAY AT BOTTOM ###
		# Ascended to the throne
		#AGOT Added
		if = {
			limit = { has_character_flag = becoming_nobility }

			root = {
				create_character_memory = {
					type = agot_raised_to_nobility_memory

					participants = {
						raiser = employer
					}
				}

				remove_character_flag = becoming_nobility
			}
		}
		#AGOT Modified
		else_if = {
			limit = {
				OR = {
					is_ruler = no
					highest_held_title_tier <= scope:title.tier
					government_has_flag = government_is_landless_adventurer
					government_allows = administrative
				}
				#AGOT Added
				NOT = { has_character_flag = i_am_usurper }
			}
			if = {
				limit = { exists = scope:title.var:adventurer_flavor_char }
				create_character_memory = {
					type = became_landless_adventurer_memory
					participants = {
						flavor_character = scope:title.var:adventurer_flavor_char
					}
				}
				#Only children should get childhood memories
				if = {
					limit = { is_adult = no }
					scope:new_memory = { set_variable = childhood_memory }
				}
				scope:new_memory = {
					save_scope_as = became_landless_adventurer_memory
					set_variable = {
						name = landless_title
						value = scope:title
					}
					set_variable = {
						name = reason
						value = scope:transfer_type
					}
					set_variable = {
						name = adventurer_creation_reason
						value = scope:title.var:adventurer_creation_reason
					}
					if = {
						limit = { exists = scope:lost_primary_title }
						set_variable = {
							name = old_primary_title
							value = scope:lost_primary_title
						}
					}
					if = { # Error suppression
						limit = { exists = var:landless_title }
					}
				}
			}
			else = {
				# Overwrite if there is a more specific Reason
				if = {
					limit = { exists = root.var:ascended_throne_reason }
					root.var:ascended_throne_reason = { save_scope_as = real_transfer_type }
					root = { remove_variable = ascended_throne_reason }
				}
				else = {
					scope:transfer_type = { save_scope_as = real_transfer_type }
				}
				root = {
					add_to_variable_list = {
						name = new_titles
						target = scope:title
					}
					trigger_event = {
						id = title_event.9900
						delayed = yes
					}
				}
			}
		}
		### MEMORIES - SHOULD STAY AT BOTTOM ###
	}
	events = {
	}

	#AGOT Added
	on_actions = {
		zz_lov_item_grant_on_action
	}
}






# A vassal changes their liege
# root = vassal changing their status
# scope:old_liege = the previous liege of the vassal
# It is also fired for rulers gaining independence, those can be identified by checking current liege
on_vassal_change = {
	effect = {
		if = {
			limit = {
				OR = {
					liege ?= {
						NOT = { government_allows = administrative }
					}
					AND = {
						is_independent_ruler = yes
						primary_title.tier <= tier_duchy
					}
				}
				any_held_title = { is_noble_family_title = yes }
			}
			every_held_title = {
				limit = { is_noble_family_title = yes }
				save_scope_as = title_to_destroy
				root = { destroy_title = scope:title_to_destroy }
			}
		}
		### GOVERNORS CHANGE GOVERNMENT IF NEW LIEGE IS NOT ADMINISTRATIVE
		if = {
			limit = {
				exists = top_liege
				government_has_flag = government_is_administrative
				NOT = {
					government_has_flag = government_is_freehold
					top_liege = { government_has_flag = government_is_administrative }
				}
			}
			top_liege = { save_scope_as = new_liege }
			send_interface_message = {
				type = msg_government_changed
				title = new_liege_government_changed_title
				desc = new_liege_government_changed_desc
				right_icon = scope:new_liege
				admin_change_government_effect = yes
			}
			hidden_effect = {
				# VASSALS AND BELOW
				every_vassal_or_below = {
					limit = { government_has_flag = government_is_administrative }
					send_interface_message = {
						type = msg_government_changed
						title = new_liege_government_changed_title
						desc = new_liege_government_changed_desc
						right_icon = scope:new_liege
						admin_change_government_effect = yes
					}
				}
			}
		}
		if = {
			limit = {
				exists = top_liege
				government_has_flag = government_is_administrative
				government_has_flag = government_is_freehold
				NOT = {
					top_liege = { government_has_flag = government_is_administrative }
				}
			}
			top_liege = { save_scope_as = new_liege }
			send_interface_message = {
				type = msg_government_changed
				title = new_liege_government_changed_title
				desc = new_liege_government_changed_desc
				right_icon = scope:new_liege
				admin_change_government_effect = yes
			}
			hidden_effect = {
				# VASSALS AND BELOW
				every_vassal_or_below = {
					limit = { government_has_flag = government_is_administrative }
					send_interface_message = {
						type = msg_government_changed
						title = new_liege_government_changed_title
						desc = new_liege_government_changed_desc
						right_icon = scope:new_liege
						admin_change_government_effect = yes
					}
				}
			}
		}
		### If a admin duke-tier character becomes the top-liege's direct vassal, ensure that they have a noble family title
		if = {
			limit = {
				government_allows = administrative
				is_house_head = yes
				highest_held_title_tier >= tier_duchy
				liege = {
					is_independent_ruler = yes
					government_allows = administrative
					NOT = {
						government_has_flag = government_is_freehold
					}
				}
				NOR = {
					any_held_title = { is_noble_family_title = yes }
					house = {
						any_house_member = {
							any_held_title = { is_noble_family_title = yes }
						}
					}
				}
			}
			create_noble_family_effect = yes
			domicile ?= { set_up_domicile_estate_effect = yes }
		}
		if = {
			limit = {
				government_allows = administrative
				is_house_head = yes
				highest_held_title_tier >= tier_duchy
				liege = {
					is_independent_ruler = yes
					government_allows = administrative
					government_has_flag = government_is_freehold
				}
				NOR = {
					any_held_title = { is_noble_family_title = yes }
					house = {
						any_house_member = {
							any_held_title = { is_noble_family_title = yes }
						}
					}
				}
			}
			create_noble_family_dragonrider_effect = yes
			#domicile ?= { set_up_domicile_estate_effect = yes }
		}
		### If an admin ruler becomes independent, who are not of a high enough rank, changes government
		if = {
			limit = {
				liege = root # I.e. root is independent
				government_has_flag = government_is_administrative
				NOT = { 
					government_has_flag = government_is_freehold
				}
				highest_held_title_tier < tier_kingdom
			}
			admin_change_government_effect = yes
		}
		if = {
			limit = {
				liege = root # I.e. root is independent
				government_has_flag = government_is_administrative
				government_has_flag = government_is_freehold
				highest_held_title_tier < tier_kingdom
			}
			admin_change_government_effect = yes
		}

		# Additional Flavor Title
		additional_flavor_check_effect = yes
	}
}
