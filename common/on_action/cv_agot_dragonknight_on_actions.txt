on_set_relation_bodyguard = {
	effect = {
		add_bodyguard_modifier_effect = yes
	}
}

on_remove_relation_bodyguard = {
	effect = {
		remove_bodyguard_modifier_effect = yes
	}
}

# Fired when a bodyguard dies, root is the bodyguard, scope:target is the target.
on_death_relation_bodyguard_target = {
	effect = {
		scope:target = {
			remove_bodyguard_modifier_effect = yes
		}
	}
}

task_dragonknight_side_effects = {
	trigger = {
		NOT = { has_variable = had_dragonknight_side_effect }
		OR = {
			exists = cp:dragonknight_1
			exists = cp:dragonknight_2
			exists = cp:dragonknight_3
			exists = cp:dragonknight_4
			exists = cp:dragonknight_5
			exists = cp:dragonknight_6
			exists = cp:dragonknight_lord_commander
		}
	}
	random_events = {
		chance_to_happen = 2
		100 = 0
		#Good side effects
		100 = agot_dragonknight.3002 #Good DK Gains Gallant
		250 = agot_dragonknight.3005 #Powerful warrior asks to join your guard
		100 = agot_dragonknight.3006 # Two Dragonknight become friends
		100 = agot_dragonknight.3007 #DK Improves Swordsmanship
		100 = agot_dragonknight.3008 #Training for DK asks to join and can hang out at court until there's a space - Balon Swann
		100 = agot_dragonknight.3010 #Dragonknight trains to become STRONK
		100 = agot_dragonknight.3014 #Dragonknight gains a blademaster
		100 = agot_dragonknight.3015 #Dragonknight gains a hunter
		100 = agot_dragonknight.3016 #Dragonknight gains a falconer
		#Gardening Dragonknight?

		#Bad side effects
		50 = agot_dragonknight.3003  #Lucamore the Lusty
		100 = agot_dragonknight.3004  #Dragonknight tramples a Child at Court
		#50 = agot_dragonknight.3009 #Assassinated by a DK whose family you're at war with - Jaime Lannister
		150 = agot_dragonknight.3011 #Bad dragonknight is challenged to a duel by character training
		100 = agot_dragonknight.3013 #Dragonknight is being rowdy and carousing
		100 = agot_dragonknight.3017 #Dragonknight found dead in brothel - Owen Bush
		#Lord Wants you to declare their child next dragonknight

		#Dontos Hollard - DK Drunk on Duty
		#evil DK does something bad
		#DK found dead
		#DK Fight eachtother - Loras
		#Bad King is attacked by peasants, dragonknight dies in riot - Preston Greenfield

		# Two Dragonknight become lovers :O
		# Dragonknight begins relation with King's Daughter
		# Become Friends with the King
		# Become Rival with the King
		# Start banging king/prince - Criston Cole
		# Get wounded

		#Dragonknight with no family asks to be released to propogate their line
	}
}

on_arrive_from_pool_wildlings = {
	effect = {
		#Wildlings coming to the north become secret wildlings
		if = {
			limit = {
				culture = { agot_is_wildling_culture = yes }
				is_lowborn = yes
				any_traveling_family_member = { count = 1 }
				scope:host = {
					OR = {
						AND = {
							exists = capital_province
							capital_province = { geographical_region = world_westeros_the_north }
						}
						AND = {
							NOT = { exists = capital_province }
							location = { geographical_region = world_westeros_the_north }
						}
					}
				}
				NOT = { has_trait = nightswatch }
			}

			if = {
				limit = { is_female = yes }
				change_first_name = Alarra
			}
			else = {
				change_first_name = Alaric
			}
			set_variable = {
				name = orig_culture
				value = culture
			}
			set_variable = {
				name = orig_faith
				value = faith
			}
			culture:northman = {
				random_culture_county = {
					limit = { holder.culture = culture:northman }
					holder = {
						random_courtier = {
							limit = {
								culture = culture:northman
								OR = {
									AND = {
										is_male = yes
										root = { is_male = yes }
									}
									AND = {
										is_female = yes
										root = { is_female = yes }
									}
								}
							}
							save_scope_as = identity_theft_target
						}
					}
				}
			}
			if = {
				limit = { exists = scope:identity_theft_target }
				change_first_name = { template_character = scope:identity_theft_target }
			}
			set_culture = culture:northman
			set_character_faith = faith:old_gods_south
			add_secret = { type = secret_agot_wildling }
		}
		else_if = {
			limit = {
				culture = { agot_is_wildling_culture = yes }
				scope:host = {
					culture = { agot_is_wildling_culture = no }
				}
				NOT = { has_trait = nightswatch }
			}
			every_traveling_family_member = {
				if = {
					limit = {
						title:c_whitetree.holder = {
							culture = { agot_is_wildling_culture = yes }
						}
					}
					move_to_pool_at = title:c_whitetree.holder.capital_province
				}
				else = {
					move_to_pool = yes
				}
			}
		}
		#westeros stay in westeros
		if = {
			limit = {
				culture = { agot_is_wildling_culture = no }
				scope:host = {
					culture = { agot_is_wildling_culture = yes }
				}
				NOT = {
					any_traveling_family_member = {
						culture = { agot_is_wildling_culture = yes }
					}
				}
				# Allow banished characters, maesters, recruited prisoners, and nightswatch to stay
				NOR = {
					has_variable = agot_banisher
					is_imprisoned_by = scope:new_employer
					has_trait = nightswatch
					has_character_flag = recruited_maester
				}
				NAND = {
					scope:new_employer ?= title:e_the_iron_throne.holder
					OR = {
						has_trait = kingsguard
						has_inactive_trait = grandmaester
					}
				}
                NAND = {
					scope:new_employer ?= title:e_valyria.holder
					OR = {
                        has_trait = dragonknight
						has_inactive_trait = grandmaester
					}
				}
			}
			every_traveling_family_member = {
				if = {
					limit = {
						title:c_sullen_hills.holder = {
							culture = { agot_is_wildling_culture = no }
						}
					}
					move_to_pool_at = title:c_sullen_hills.holder.capital_province
				}
				else = {
					move_to_pool = yes
				}
			}
		}
	}
}

on_join_court_wildlings = {
	effect = {
		#Wildlings coming to the north become secret wildlings
		if = {
			limit = {
				exists = scope:old_employer
				culture = { agot_is_wildling_culture = yes }
				is_lowborn = yes
				any_traveling_family_member = { count = 1 }
				scope:new_employer = {
					OR = {
						AND = {
							exists = capital_province
							capital_province = { geographical_region = world_westeros_the_north }
						}
						AND = {
							 NOT = { exists = capital_province }
							 location = { geographical_region = world_westeros_the_north }
						}
					}
				}
				NOT = { has_trait = nightswatch }
			}

			if = {
				limit = { is_female = yes }
				change_first_name = Alarra
			}
			else = {
				change_first_name = Alaric
			}
			set_variable = {
				name = orig_culture
				value = culture
			}
			set_variable = {
				name = orig_faith
				value = faith
			}
			culture:northman = {
				random_culture_county = {
					limit = { holder.culture = culture:northman }
					holder = {
						random_courtier = {
							limit = {
								culture = culture:northman
								OR = {
									AND = {
										is_male = yes
										root = { is_male = yes }
									}
									AND = {
										is_female = yes
										root = { is_female = yes }
									}
								}
							}
							save_scope_as = identity_theft_target
						}
					}
				}
			}
			if = {
				limit = { exists = scope:identity_theft_target }
				change_first_name = { template_character = scope:identity_theft_target }
			}
			set_culture = culture:northman
			set_character_faith = faith:old_gods_south
			add_secret = { type = secret_agot_wildling }
		}
		else_if = {
			limit = {
				exists = scope:old_employer
				culture = { agot_is_wildling_culture = yes }
				scope:new_employer = {
					culture = { agot_is_wildling_culture = no }
				}
				scope:old_employer = {
					culture = { agot_is_wildling_culture = yes }
				}
				# Allow banished characters, recruited prisoners, and nightswatch to stay
				NOR = {
					has_variable = agot_banisher
					is_imprisoned_by = scope:new_employer
					has_trait = nightswatch
				}
			}
			every_traveling_family_member = {
				scope:old_employer = {
					add_courtier ?= prev
				}
			}
		}
		#westeros stay in westeros
		if = {
			limit = {
				exists = scope:old_employer
				culture = { agot_is_wildling_culture = no }
				scope:new_employer = {
					culture = { agot_is_wildling_culture = yes }
				}
				scope:old_employer = {
					culture = { agot_is_wildling_culture = no }
				}
				NOT = {
					any_traveling_family_member = {
						culture = { agot_is_wildling_culture = yes }
					}
				}
				# Allow banished characters, maesters, recruited prisoners, and nightswatch to stay
				NOR = {
					has_variable = agot_banisher
					is_imprisoned_by = scope:new_employer
					has_trait = nightswatch
					has_character_flag = recruited_maester
				}
				NAND = {
					scope:new_employer ?= title:e_the_iron_throne.holder
					OR = {
						has_trait = kingsguard
						has_inactive_trait = grandmaester
					}
				}
				NAND = {
					scope:new_employer ?= title:e_valyria.holder
					OR = {
                        has_trait = dragonknight
						has_inactive_trait = grandmaester
					}
				}
			}
			every_traveling_family_member = {
				scope:old_employer = {
					add_courtier ?= prev
				}
			}
		}
	}
}

on_death = {
	events = {
		agot_small_council.0002 # Cleans up Small Councillor
		agot_kingsguard.1000 # KG Maintenance
        cv_agot_dragonknight.1000 # DK Maintenance
		agot_widowed_events.999 #Check to see if widowed story cycle should begin
		agot_valyrian_steel.0003
		agot_dragonstone.0006
		agot_dragon.0001
	}
	on_actions = {
		agot_after_death_on_action
		agot_maester_death_on_action
		faegon_on_death_on_action
		faegon_taken_title_from_death_on_action
	}
}

agot_on_16th_birthday = {
	events = {
		agot_dragonstone.0001 #Prince of Dragonstone Maintenance
		delay = { days = 1 }
		agot_kingsguard.1014 #Maintenance for crap swordsmen realising their dream is over
        cv_agot_dragonknight.1014 #Maintenance for crap swordsmen realising their dream is over
		coronation.0008 #Removes uncrowned child modifier and adds regular one.
	}
}

agot_on_title_gain_dragonknight = { # This only works if the previous owner has a title to fall back on, and thus, has a court
	trigger = {
		scope:title = {
			has_variable = dragonknight
		}
	}
	effect = {
		if = {
			limit = {
				scope:title = {
					exists = var:dragonknight_lord_commander
				}
			}
			add_courtier ?= scope:title.var:dragonknight_lord_commander
			assign_councillor_type = {
				type = dragonknight_lord_commander
				target = scope:title.var:dragonknight_lord_commander
			}
		}
		if = {
			limit = {
				scope:title = {
					exists = var:dragonknight_1
				}
			}
			add_courtier ?= scope:title.var:dragonknight_1
			assign_councillor_type = {
				type = dragonknight_1
				target = scope:title.var:dragonknight_1
			}
		}
		if = {
			limit = {
				scope:title = {
					exists = var:dragonknight_2
				}
			}
			add_courtier ?= scope:title.var:dragonknight_2
			assign_councillor_type = {
				type = dragonknight_2
				target = scope:title.var:dragonknight_2
			}
		}
		if = {
			limit = {
				scope:title = {
					exists = var:dragonknight_3
				}
			}
			add_courtier ?= scope:title.var:dragonknight_3
			assign_councillor_type = {
				type = dragonknight_3
				target = scope:title.var:dragonknight_3
			}
		}
		if = {
			limit = {
				scope:title = {
					exists = var:dragonknight_4
				}
			}
			add_courtier ?= scope:title.var:dragonknight_4
			assign_councillor_type = {
				type = dragonknight_4
				target = scope:title.var:dragonknight_4
			}
		}
		if = {
			limit = {
				scope:title = {
					exists = var:dragonknight_5
				}
			}
			add_courtier ?= scope:title.var:dragonknight_5
			assign_councillor_type = {
				type = dragonknight_5
				target = scope:title.var:dragonknight_5
			}
		}
		if = {
			limit = {
				scope:title = {
					exists = var:dragonknight_6
				}
			}
			add_courtier ?= scope:title.var:dragonknight_6
			assign_councillor_type = {
				type = dragonknight_6
				target = scope:title.var:dragonknight_6
			}
		}
	}
}

agot_maintenance_pulse = {
	events = {
		agot_kingsguard.9007 #Reassign lost KG
        cv_agot_dragonknight.9007 #Reassign lost DK
	}
}

agot_ai_character_pulse = {
	trigger = {
		is_ai = yes
	}
	events = {
		agot_kingsguard.9000 #Kingsguard fallback assingment for AI
        cv_agot_dragonknight.9000 #Dragonknight fallback assingment for AI
	}
}

agot_filler_yearly_valyria  = {
	trigger = {
		capital_province ?= { geographical_region = world_valyria }
	}
	random_events = {
		chance_to_happen = 25
		300 = 0

        300 = cv_agot_dragonknight.3001  # Child asks to train for DK
    }
}