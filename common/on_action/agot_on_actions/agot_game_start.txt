# Called from code after history generation
# Empty scope
on_game_start = {
	on_actions = {
		agot_on_game_start
		agot_house_dna
		agot_set_legacies
		agot_vassal_contracts
		agot_crown_authority
		agot_house_feuds
		# Moonclans yeet
		# agot_province_neighbors
		agot_ruins
		agot_artifacts_sell
	}
}

agot_on_game_start = {
	effect = {
		##AGOT IS LOADED## - FOR OTHER MODS TO HOOK WITH
		set_global_variable = {
			name = AGOT_is_loaded
			value = yes
		}

		##### General setup start #####

		# House Customizer Dummies Spawn
		agot_house_customizer_spawn_dummies_effect = yes

		### Murder Jalabhar for historical character setup
		if = { # Jalabhar Xho
			limit = { current_year < 8289 }
			character:Xho_1 ?= { death = { death_reason = death_vanished } }
		}

		### Unlock battlements innovation as a workaround for auto-upgraded holdings
		every_culture_global = {
			if = {
				limit = {
					agot_is_wildling_culture = no
				}
				add_innovation = innovation_battlements
			}
			if = {
				limit = {
					agot_is_wildling_culture = no
					NOR = {
						this = culture:andalosi
						this = culture:crannogman
						this = culture:skagosi
						this = culture:braavosi
						this = culture:norvoshi
						this = culture:pentoshi
						this = culture:hartalari
						this = culture:myrish
						this = culture:tyroshi
						this = culture:volantene
					}
					NAND = {
						this = culture:bearman
						game_start_date < 8000.1.1
					}
					NAND = {
						this = culture:krakenman
						game_start_date < 8000.1.1
					}
					NAND = {
						this = culture:wolfswood_clansman
						game_start_date < 8000.1.1
					}
					NAND = {
						this = culture:hill_clansman
						game_start_date < 8100.1.1
					}
					NAND = {
						this = culture:sisterman
						game_start_date < 8175.1.1
					}
					NAND = {
						this = culture:fingerman
						game_start_date < 8150.1.1
					}
				}
				add_innovation = innovation_hoardings
			}
			if = {
				limit = {
					agot_is_wildling_culture = no
					NOR = {
						this = culture:andalosi
						this = culture:crannogman
						this = culture:skagosi
						this = culture:braavosi
						this = culture:norvoshi
						this = culture:pentoshi
						this = culture:hartalari
						this = culture:myrish
						this = culture:tyroshi
						this = culture:volantene

						this = culture:crownlander
						this = culture:fingerman
						this = culture:sisterman
						this = culture:clawman
						this = culture:barrowman
						this = culture:bearman
						this = culture:harborman
						this = culture:krakenman
						this = culture:hill_clansman
						this = culture:northman
						this = culture:wolfswood_clansman
						this = culture:ironborn
					}
					NAND = {
						this = culture:stormlander
						game_start_date < 8260.1.1
					}
					NAND = {
						this = culture:marcher
						game_start_date < 8270.1.1
					}
					NAND = {
						this = culture:vineman
						game_start_date < 8270.1.1
					}
					NAND = {
						this = culture:honeywiner
						game_start_date < 8270.1.1
					}
					NAND = {
						this = culture:reachman
						game_start_date < 8270.1.1
					}
					NAND = {
						this = culture:shieldman
						game_start_date < 8270.1.1
					}
					NAND = {
						this = culture:riverlander
						game_start_date < 8270.1.1
					}
					NAND = {
						this = culture:valeman
						game_start_date < 8270.1.1
					}
					NAND = {
						this = culture:moonman
						game_start_date < 8270.1.1
					}
					NAND = {
						this = culture:high_valyrian
						game_start_date < 8270.1.1
					}
					NAND = {
						this = culture:stone_dornish
						game_start_date < 8280.1.1
					}
				}
				add_innovation = innovation_machicolations
			}
		}

		### Culture related setup
		# Save divergent valyrian cultures for overriding promoting culture loc, do the same for iron bois
		culture:high_valyrian = {
			if = {
				limit = { has_game_rule = agot_hv_conversion_offshoots }
				set_variable = {
					name = wv_culture
					value = culture:westerosi_valyrian
				}
				set_variable = {
					name = ev_culture
					value = culture:essosi_valyrian
				}
			}
		}
		culture:ironborn = {
			set_variable = {
				name = greenborn_culture
				value = culture:greenborn
			}
		}
		culture:greenborn = {
			set_variable = {
				name = ironborn_culture
				value = culture:ironborn
			}
		}
		culture:fangman = {
			set_variable =  wildling_culture
		}
		culture:forestman = {
			set_variable =  wildling_culture
		}
		culture:nightrunner = {
			set_variable =  wildling_culture
		}
		culture:frozen_shoreman = {
			set_variable =  wildling_culture
		}
		culture:hornfoot = {
			set_variable =  wildling_culture
		}
		culture:lakeman = {
			set_variable =  wildling_culture
		}
		culture:thenn = {
			set_variable =  wildling_culture
		}
		### Buildings set up
		# This is done to avoid errors, if the error 'No room left for adding a building' happens, add the province and the building here
		agot_add_buildings_on_start = yes
		agot_add_camp_buildings_on_start = yes
		agot_add_estate_buildings_on_start = yes

		every_province = {
			limit = {
				culture = { has_innovation = innovation_agot_anti_dragon_fighting }
				OR = {
					fort_level >= 10
					has_building_or_higher = workshops_05
				}
			}
			add_province_modifier = scorpions_prepared
		}

		### Religion related setup
		# Setup faiths
		if = { # Add doctrine of exceptionalism
			limit = {
				game_start_date > 8051.1.1
				faith:the_seven_main = { NOT = { has_doctrine = agot_exceptionalism_doctrine } }
			}
			faith:the_seven_main = { add_doctrine = agot_exceptionalism_doctrine }
		}
		# Setup faith orders - TODO

		###

		### Dynasty related setup
		# Manage Incest restrictions
		dynasty:dynn_Targaryen = { set_variable = agot_allow_adelphogamous_incest }
		dynasty:dynn_Codd = { set_variable = agot_allow_adelphogamous_incest }

		# Manage valyrian_heritage_dynasty_modifier and other
		dynasty:dynn_Targaryen = {
			add_dynasty_modifier = valyrian_heritage_dynasty_modifier
		}
		dynasty:dynn_Velaryon = { add_dynasty_modifier = valyrian_heritage_dynasty_modifier }
		dynasty:dynn_Celtigar = { add_dynasty_modifier = valyrian_heritage_dynasty_modifier }
		dynasty:dynn_Scales = { add_dynasty_modifier = valyrian_heritage_dynasty_modifier }
		dynasty:dynn_Qoherys = { add_dynasty_modifier = valyrian_heritage_dynasty_modifier }
		dynasty:dynn_Varezys = { add_dynasty_modifier = valyrian_heritage_dynasty_modifier }
		dynasty:dynn_Mataeryon = { add_dynasty_modifier = valyrian_heritage_dynasty_modifier }
		dynasty:dynn_Belaerys = { add_dynasty_modifier = valyrian_heritage_dynasty_modifier }
		dynasty:dynn_Urnebar = { add_dynasty_modifier = valyrian_heritage_dynasty_modifier }
		dynasty:dynn_Sonaryen = { add_dynasty_modifier = valyrian_heritage_dynasty_modifier }

		# Thrall Houses Modifier
		dynasty:dynn_Codd = { add_dynasty_modifier = thrall_house_dynasty_modifier }
		dynasty:dynn_Humble = { add_dynasty_modifier = thrall_house_dynasty_modifier }
		dynasty:dynn_Shepherd = { add_dynasty_modifier = thrall_house_dynasty_modifier }
		dynasty:dynn_Freeborn = { add_dynasty_modifier = thrall_house_dynasty_modifier }
		dynasty:dynn_Sharp = { add_dynasty_modifier = thrall_house_dynasty_modifier }
		dynasty:dynn_Tidewood = { add_dynasty_modifier = thrall_house_dynasty_modifier }
		dynasty:dynn_Weaver = { add_dynasty_modifier = thrall_house_dynasty_modifier }
		dynasty:dynn_Netley = { add_dynasty_modifier = thrall_house_dynasty_modifier }

		#Codd
		dynasty:dynn_Codd = { add_dynasty_modifier = codd_dynasty_modifier }

		#Dragonriders
		dynasty:dynn_Targaryen.dynasty_founder.house = { add_house_modifier = dragonrider_house_modifier }
		house:house_Blackfyre ?= { add_house_modifier = dragonrider_house_modifier }
		house:house_Brightflame ?= { add_house_modifier = dragonrider_house_modifier }
		dynasty:dynn_Belaerys.dynasty_founder.house = { add_house_modifier = dragonrider_house_modifier }
		dynasty:dynn_Urnebar.dynasty_founder.house = { add_house_modifier = dragonrider_house_modifier }
		dynasty:dynn_Mataeryon.dynasty_founder.house = { add_house_modifier = dragonrider_house_modifier }
		dynasty:dynn_Varezys.dynasty_founder.house = { add_house_modifier = dragonrider_house_modifier }

		#Dynasty Divided
		house:house_Blackfyre ?= { add_house_modifier = divided_dynasty_house_modifier }
		
		#Bastard House Restoration
		house:house_Brightflame ?= { set_variable = { name = bastard_house_of value = dynasty:dynn_Targaryen.dynasty_founder.house} }
		house:house_Crossing ?= { set_variable = { name = bastard_house_of value = dynasty:dynn_Frey.dynasty_founder.house} }

		# give Targaryen loyalist modifiers
		every_ruler = {
			limit = {
				is_lowborn = no
				current_date >= 8282.9.15 # AGOT TODO; set proper dates for each house
			}

			if = {
				limit = {
					OR = {
						house = dynasty:dynn_Hayford.dynasty_founder.house
						house = dynasty:dynn_Darry.dynasty_founder.house
						house = dynasty:dynn_Goodbrook.dynasty_founder.house
						house = dynasty:dynn_Rowan.dynasty_founder.house
						house = dynasty:dynn_Oakheart.dynasty_founder.house
						house = dynasty:dynn_Tarly.dynasty_founder.house
						house = dynasty:dynn_Hightower.dynasty_founder.house
						house = dynasty:dynn_Hasty.dynasty_founder.house
						house = dynasty:dynn_Lonmouth.dynasty_founder.house
						house = dynasty:dynn_Rykker.dynasty_founder.house
						house = dynasty:dynn_Ashford.dynasty_founder.house
						house = dynasty:dynn_Boggs.dynasty_founder.house
						house = dynasty:dynn_Brune.dynasty_founder.house
						house = house:house_Brownhollow
						house = dynasty:dynn_Bush.dynasty_founder.house
						house = dynasty:dynn_Pyne.dynasty_founder.house
						house = dynasty:dynn_Hardy.dynasty_founder.house
						house = dynasty:dynn_Cave.dynasty_founder.house
						house = dynasty:dynn_Crabb.dynasty_founder.house
						house = dynasty:dynn_Celtigar.dynasty_founder.house
						house = dynasty:dynn_Velaryon.dynasty_founder.house
						house = dynasty:dynn_Massey.dynasty_founder.house
						house = dynasty:dynn_Mooton.dynasty_founder.house
						house = dynasty:dynn_Butterwell.dynasty_founder.house
						house = dynasty:dynn_Sunderland.dynasty_founder.house
						house = dynasty:dynn_Peake.dynasty_founder.house
						house = dynasty:dynn_Osgrey.dynasty_founder.house
						house = dynasty:dynn_Ball.dynasty_founder.house
						house = dynasty:dynn_Yronwood.dynasty_founder.house
						house = dynasty:dynn_Mooton.dynasty_founder.house
						house = dynasty:dynn_Vyrwel.dynasty_founder.house
						house = dynasty:dynn_Bracken.dynasty_founder.house
						house = dynasty:dynn_Hersy.dynasty_founder.house
						house = dynasty:dynn_Tyrell.dynasty_founder.house
					}
				}

				house = { add_house_modifier = agot_historical_loyalty_targaryen }
			}
			if = {
				limit = {
					OR = {
						house = dynasty:dynn_Butterwell.dynasty_founder.house
						house = dynasty:dynn_Sunderland.dynasty_founder.house
						house = dynasty:dynn_Peake.dynasty_founder.house
						house = dynasty:dynn_Osgrey.dynasty_founder.house
						house = dynasty:dynn_Ball.dynasty_founder.house
						house = dynasty:dynn_Yronwood.dynasty_founder.house
						house = dynasty:dynn_Vyrwel.dynasty_founder.house
						house = dynasty:dynn_Bracken.dynasty_founder.house
						house = dynasty:dynn_Hightower.dynasty_founder.house
						house = dynasty:dynn_Hersy.dynasty_founder.house
					}
				}

				house = { add_house_modifier = agot_historical_loyalty_blackfyre }
			}
		}
		###

		### War of Succession Usurpation Setup
		title:d_dummy_empire = {
			copy_title_history = title:c_kings_landing
			set_coa = c_kings_landing
		}

		### Most Devout Setup
		title:k_the_most_devout = {
			every_past_holder = {
				limit = { has_any_nickname = no }
				agot_assign_high_septon_nickname_effect = yes
			}

			holder ?= {
				if = {
					limit = { has_any_nickname = no }
					agot_assign_high_septon_nickname_effect = yes
				}
				if = {
					limit = { exists = title:e_the_iron_throne.holder }
					agot_assign_high_septon_effect = yes
				}
			}
		}

		### Iron Throne related setup
		title:c_kings_landing.holder = { # Appoint Commander of the Gold Cloaks
			if = {
				limit = {
					exists = title:b_goldguard_heights.holder
					NOT = { has_title = title:b_goldguard_heights }
				}
				appoint_court_position = {
					recipient = title:b_goldguard_heights.holder
					court_position = goldcloaks_court_position
				}
			}
		}

		### Zara Changes 
		#Kingsguard Stuff
		title:d_dummy_kingsguard = {
			copy_title_history = title:d_kingsguard
		}
		title:d_kingsguard.holder ?= {
			change_government = kingsguard_government
		}
		title:d_kingsguard = {
			#destroy_title = title:d_kingsguard
			set_coa = d_kingsguard
		}

		if = { # Setup historical kingsguard members
			limit = { exists = title:e_the_iron_throne.holder }
			set_global_variable = agot_startup_fire_councillors
			title:e_the_iron_throne = { set_variable = agot_kingsguard_can_fire_yes }
			title:e_the_iron_throne.holder = {
				save_temporary_scope_as = agot_crown
			}
			every_living_character = {
				limit = {
					OR = {
						has_character_flag = agot_is_kingsguard_member
						has_character_flag = agot_is_kingsguard_commander
					}
				}

				add_trait = kingsguard
				remove_trait = refusing_marriage
				remove_character_modifier = training_for_kingsguard
				add_character_flag = { flag = blocked_from_leaving }
				if = {
					limit = {
						NOT = {
							is_courtier_of = scope:agot_crown
							is_ruler = yes #Filter out the Lord Commanders
						}
					}
					scope:agot_crown = { add_courtier = prev }
				}
				agot_create_artifact_kingsguard_armour_effect = { OWNER = this }
				agot_create_artifact_kingsguard_sword_effect = { OWNER = this }
				if = {
					limit = {
						has_character_flag = agot_is_kingsguard_member
						NOT = { has_character_flag = agot_is_kingsguard_commander }
					}

					title:e_the_iron_throne = {
						add_to_variable_list = {
							name = kingsguard_members
							target = prev
						}
					}
					remove_character_flag = agot_is_kingsguard_member
				}
				else_if = {
					limit = { has_character_flag = agot_is_kingsguard_commander }

					add_character_flag = lord_commander

					scope:agot_crown = {
						appoint_court_position = {
							recipient = prev
							court_position = zz_kingsguard_lord_commander_court_position
						}
					}
					title:e_the_iron_throne = {
						set_variable = {
							name = kingsguard_lord_commander
							value = prev
						}
					}
					remove_character_flag = agot_is_kingsguard_member
					remove_character_flag = agot_is_kingsguard_commander
				}
			}
			title:e_the_iron_throne = {
				random_in_list = {
					variable = kingsguard_members

					save_temporary_scope_as = kingsguard_member
					title:e_the_iron_throne = {
						holder = {
							appoint_court_position = {
								recipient = scope:kingsguard_member
								court_position =zz_kingsguard_court_position
							}
						}
						set_variable = {
							name = kingsguard_1
							value = scope:kingsguard_member
						}
						remove_list_variable = {
							name = kingsguard_members
							target = prev
						}
					}
				}
				random_in_list = {
					variable = kingsguard_members

					save_temporary_scope_as = kingsguard_member
					title:e_the_iron_throne = {
						holder = {
							appoint_court_position = {
								recipient = scope:kingsguard_member
								court_position =zz_kingsguard_court_position
							}
						}
						set_variable = {
							name = kingsguard_2
							value = scope:kingsguard_member
						}
						remove_list_variable = {
							name = kingsguard_members
							target = prev
						}
					}
				}
				random_in_list = {
					variable = kingsguard_members

					save_temporary_scope_as = kingsguard_member
					title:e_the_iron_throne = {
						holder = {
							appoint_court_position = {
								recipient = scope:kingsguard_member
								court_position =zz_kingsguard_court_position
							}
						}
						set_variable = {
							name = kingsguard_3
							value = scope:kingsguard_member
						}
						remove_list_variable = {
							name = kingsguard_members
							target = prev
						}
					}
				}
				random_in_list = {
					variable = kingsguard_members

					save_temporary_scope_as = kingsguard_member
					title:e_the_iron_throne = {
						holder = {
							appoint_court_position = {
								recipient = scope:kingsguard_member
								court_position =zz_kingsguard_court_position
							}
						}
						set_variable = {
							name = kingsguard_4
							value = scope:kingsguard_member
						}
						remove_list_variable = {
							name = kingsguard_members
							target = prev
						}
					}
				}
				random_in_list = {
					variable = kingsguard_members

					save_temporary_scope_as = kingsguard_member
					title:e_the_iron_throne = {
						holder = {
							appoint_court_position = {
								recipient = scope:kingsguard_member
								court_position =zz_kingsguard_court_position
							}
						}
						set_variable = {
							name = kingsguard_5
							value = scope:kingsguard_member
						}
						remove_list_variable = {
							name = kingsguard_members
							target = prev
						}
					}
				}
				random_in_list = {
					variable = kingsguard_members

					save_temporary_scope_as = kingsguard_member
					title:e_the_iron_throne = {
						holder = {
							appoint_court_position = {
								recipient = scope:kingsguard_member
								court_position =zz_kingsguard_court_position
							}
						}
						set_variable = {
							name = kingsguard_6
							value = scope:kingsguard_member
						}
						remove_list_variable = {
							name = kingsguard_members
							target = prev
						}
					}
				}
			}
			title:e_the_iron_throne = { remove_variable = agot_kingsguard_can_fire_yes }
			remove_global_variable = agot_startup_fire_councillors
		}
		
		### Zara Changes
		###

		#every_ruler doesn't catch barons
		every_barony = {
			limit = {
				exists = holder
				holder.highest_held_title_tier = tier_barony
				holder.faith = faith:old_gods_south
			}
			holder = { add_realm_law = male_preference_law }
		}

		every_ruler = {
			### Government Setup
			if = {
				limit = {
					agot_is_valid_lp_feudal_government_target = yes
					NOT = { has_government = ruins_government }
				}
				change_government = lp_feudal_government
			}
			if = {
				limit = {
					agot_is_valid_pirate_government_target = yes
					NOT = { has_government = ruins_government }
				}
				change_government = pirate_government
			}
			if = {
				limit = {
					highest_held_title_tier > tier_barony
					agot_is_valid_lp_feudal_government_target = yes
					is_independent_ruler = no
				}
				vassal_contract_set_obligation_level = {
					type = title_revocation_rights
					level = 1
				}
			}
			if = { # Night's Watch
				limit = {
					agot_is_member_of_nights_watch = yes
				}

				trigger_event = {
					id = agot_nights_watch.0003
				}
			}

			if = { # Override default equal succession for Old Gods
				limit = { faith = faith:old_gods_south }
				add_realm_law = male_preference_law
			}

			if = {
				limit = {
					has_government = pirate_government
					primary_title.tier > tier_county
				}
				every_held_title = {
					limit = { tier > tier_county }
					add_title_law = pirate_succession_law
				}
			}
			###

			if = { # Setup CoA
				limit = {
					agot_is_valid_dyn_coa_target = yes
				}
				every_held_title = { reset_coa = yes }
				trigger_event = agot_coa_events.0001
			}

			if = {
				limit = {
					primary_title.tier >= tier_kingdom
					OR = {
						primary_title = { has_title_law = magisterial_limited_succession_law }
						primary_title = { has_title_law = magisterial_life_succession_law }
					}
				}
				random_powerful_vassal = {
					limit = { is_adult = yes }
					if = {
						limit = {
							prev.primary_title = title:k_lys
						}
						prev = {
							designate_diarch = prev
							start_diarchy = second_magister
							set_diarchy_swing = 40
						}
					}
					else_if = {
						limit = {
							OR = {
								prev.primary_title = title:k_tyrosh
								prev.primary_title = title:k_pentos
							}
						}
						prev = {
							designate_diarch = prev
							start_diarchy = high_councilor
							set_diarchy_swing = 40
						}
					}
					else_if = {
						limit = {
							prev.primary_title = title:k_myr
						}
						prev = {
							designate_diarch = prev
							start_diarchy = tyniate
							set_diarchy_swing = 40
						}
					}
					else = {
						prev = {
							designate_diarch = prev
							start_diarchy = gonfaloniere
							set_diarchy_swing = 40
						}
					}
				}
			}
		}

		every_barony = { # Gold Cloaks revokations done through council
			if = {
				limit = {
					NOT = { this = title:b_goldguard_heights }
					exists = holder
					holder = { highest_held_title_tier = tier_barony }
					NOT = { holder = { has_trait = ruin } }
					title_province = { has_holding_type = castle_holding }
				}

				holder = {
					vassal_contract_set_obligation_level = {
						type = title_revocation_rights
						level = 0
					}
				}
			}
		}

		### Enhanced Siren on Steroids System
		every_ruler = {
			limit = { has_character_flag = supersiren_flag }
			every_held_county = {
				save_scope_as = siren_distribution_title
				random_direct_de_jure_vassal_title = {
					title_province = { save_scope_as = siren_distribution_province }
				}
				create_character = {
					location = character:Local_Rulers.capital_province
					random_traits = yes
					culture = scope:siren_distribution_province.culture
					faith = scope:siren_distribution_province.faith
					age = { 16 55 }
					gender = male
					dynasty = generate
					after_creation = {
						get_title = scope:siren_distribution_title
						add_gold = { minor_gold_value_check medium_gold_value_check }
						add_prestige = { minor_prestige_gain medium_prestige_gain }
						add_piety = { minor_piety_gain medium_piety_gain }
					}
				}
			}
			death = natural
		}
		every_living_character = {
			limit = { has_character_flag = supersiren_flag }
			death = natural
		}

		every_living_character = {
			limit = {
				is_human = yes
			}
			#educations
			trigger_event = agot_prowess.0001 # Giving Prowess traits to characters
			trigger_event = agot_events_generic.0009

			#Set Birthplace - Human
			agot_birthplace_game_start = yes

			#canon dragons
			if = {
				limit = {
					has_game_rule = agot_canon_dragons_enabled
					is_ai = yes
					agot_is_canon_rider = yes
					age >= 10
				}
				trigger_event = {
					id = dragon_taming_events.9000
					days = { 365 730 }
				}
			}

			#set up patron gods
			if = {
				limit = {
					religion = religion:faith_of_the_seven_religion
					age > 13
				}
				trigger_event = agot_events_generic.0005
			}

			#set up dyed hair
			if = {
				limit = {
					age > 13
					NOT = { has_character_flag = canon_status_canon }
				}
				trigger_event = agot_events_generic.0007
			}

			#set up weapon of choice
			if = {
				limit = { 
					age > 5 
					is_human = yes
				}
				trigger_event = agot_events_generic.0012
			}

			#purge unproper traits on children
			if = {
				limit = { is_adult = no }
				agot_adjust_adult_traits_posthistory_effect = yes
			}

			# must be before maester setup to make sure Aemon is set properly
			if = { # Yeet black brothers back to wall since they will ignore history files to join family
				limit = {
					OR = {
						has_trait = nightswatch
						has_trait = nightswatch_historical
					}
					NOR = {
						any_liege_or_above = { has_title = title:d_the_wall }
						has_title = title:d_the_wall
					}
				}
				move_to_pool_at = title:d_the_wall.holder.capital_province
				set_employer = title:d_the_wall.holder
			}

			if = { # Maester Title and Set-Up
				limit = {
					has_inactive_trait = grandmaester
				}
				save_scope_as = grandmaester
				agot_progress_to_grandmaester_effect = { GRANDMAESTER_CANDIDATE = scope:grandmaester }
			}
			else_if = {
				limit = {
					has_trait = maester
				}

				save_scope_as = maester
				if = {
					limit = {
						is_foreign_court_guest = no
						is_landed = no #stops citadel weirdness
						scope:maester.employer ?= {
							highest_held_title_tier > tier_barony
							NOR = {
								employs_court_position = maester_court_position
								primary_title = title:e_the_iron_throne
							}
						}
					}
					scope:maester.employer = {
						appoint_court_position = {
							recipient = scope:maester
							court_position = maester_court_position
						}
					}
				}
			}

			#Archmaester Artifact Setup
			if = {
				limit = {
					has_trait = archmaester
				}
				save_scope_as = archmaester
				agot_create_artifact_archmaester_mask_effect = { OWNER = scope:archmaester }
				agot_create_artifact_archmaester_ring_effect = { OWNER = scope:archmaester }
				agot_create_artifact_archmaester_rod_effect = { OWNER = scope:archmaester }
			}

			if = { # Lowborn High Valyrian Conversion
				limit = {
					AND = {
						is_lowborn = yes
						has_culture = culture:high_valyrian
					}
				}
				set_culture = culture:westerosi_valyrian
			}

			if = { # Get rid of lingering Guardianships
				limit = {
					age >= 16
					any_relation = { type = guardian }
				}
				every_relation = {
					type = guardian
					remove_relation_ward = PREV
				}
			}
			if = { # Apply blademaster effects
				limit = { has_trait = lifestyle_blademaster_3_history }
				remove_trait = lifestyle_blademaster_3_history
				add_trait = lifestyle_blademaster
				add_trait_xp = {
					trait = lifestyle_blademaster
					value = 100
				}
			}
			if = {
				limit = { has_trait = lifestyle_blademaster_2_history }
				remove_trait = lifestyle_blademaster_2_history
				add_trait = lifestyle_blademaster
				add_trait_xp = {
					trait = lifestyle_blademaster
					value = 50
				}
			}
			if = { # Apply burned effects
				limit = { has_trait = burned_3_history }
				remove_trait = burned_3_history
				add_trait = burned
				add_trait_xp = {
					trait = burned
					track = burned
					value = 100
				}
			}
			if = {
				limit = { has_trait = burned_2_history }
				remove_trait = burned_2_history
				add_trait = burned
				add_trait_xp = {
					trait = burned
					track = burned
					value = 50
				}
			}
			if = { # Apply mystic effects
				limit = { has_trait = lifestyle_mystic_3_history }
				remove_trait = lifestyle_mystic_3_history
				add_trait = lifestyle_mystic
				add_trait_xp = {
					trait = lifestyle_mystic
					value = 100
				}
			}
			if = {
				limit = { has_trait = lifestyle_mystic_2_history }
				remove_trait = lifestyle_mystic_2_history
				add_trait = lifestyle_mystic
				add_trait_xp = {
					trait = lifestyle_mystic
					value = 50
				}
			}
			if = { # Apply physician effects
				limit = { has_trait = lifestyle_physician_3_history }
				remove_trait = lifestyle_physician_3_history
				add_trait = lifestyle_physician
				add_trait_xp = {
					trait = lifestyle_physician
					value = 100
				}
			}
			if = {
				limit = { has_trait = lifestyle_physician_2_history }
				remove_trait = lifestyle_physician_2_history
				add_trait = lifestyle_physician
				add_trait_xp = {
					trait = lifestyle_physician
					value = 50
				}
			}
			if = { # Apply reveler effects
				limit = { has_trait = lifestyle_reveler_3_history }
				remove_trait = lifestyle_reveler_3_history
				add_trait = lifestyle_reveler
				add_trait_xp = {
					trait = lifestyle_reveler
					value = 100
				}
			}
			if = {
				limit = { has_trait = lifestyle_reveler_2_history }
				remove_trait = lifestyle_reveler_2_history
				add_trait = lifestyle_reveler
				add_trait_xp = {
					trait = lifestyle_reveler
					value = 50
				}
			}
			if = { # Apply hunter effects
				limit = { has_trait = lifestyle_hunter_3_history }
				remove_trait = lifestyle_hunter_3_history
				add_trait = lifestyle_hunter
				add_trait_xp = {
					trait = lifestyle_hunter
					track = hunter
					value = 100
				}
			}
			if = {
				limit = { has_trait = lifestyle_hunter_2_history }
				remove_trait = lifestyle_hunter_2_history
				add_trait = lifestyle_hunter
				add_trait_xp = {
					trait = lifestyle_hunter
					track = hunter
					value = 50
				}
			}
			if = {
				limit = { has_trait = lifestyle_falconer_3_history }
				remove_trait = lifestyle_falconer_3_history
				add_trait = lifestyle_hunter
				add_trait_xp = {
					trait = lifestyle_hunter
					track = falconer
					value = 100
				}
			}
			if = {
				limit = { has_trait = lifestyle_falconer_2_history }
				remove_trait = lifestyle_falconer_2_history
				add_trait = lifestyle_hunter
				add_trait_xp = {
					trait = lifestyle_hunter
					track = falconer
					value = 50
				}
			}
			if = { # Apply knight effects
				limit = { has_trait = knight }
				remove_trait = knight
				add_trait = squire
				add_trait_xp = {
					trait = squire
					value = 100
				}
			}
			if = { # Apply scarred effects
				limit = { has_trait = scarred_3_history }
				remove_trait = scarred_3_history
				add_trait = scarred
				add_trait_xp = {
					trait = scarred
					track = scarred
					value = 100
				}
			}
			if = {
				limit = { has_trait = scarred_2_history }
				remove_trait = scarred_2_history
				add_trait = scarred
				add_trait_xp = {
					trait = scarred
					track = scarred
					value = 50
				}
			}

			if = { # Distribute Bastard nicknames
				### Outliers that have to be assigned manually:
				# lowborn bastards with last name
				# bastards of Rhoynish and High Valyrian cultures
				# bastards who have their last name mismatched with their cultures
				# probably most of Crownlands
				# bastards who retained their surname after legitimization
				limit = {
					has_trait = bastard
					is_lowborn = no
					NOR = {
						has_inactive_trait = surname_flowers
						has_inactive_trait = surname_sand
						has_inactive_trait = surname_stone
						has_inactive_trait = surname_snow
						has_inactive_trait = surname_pyke
						has_inactive_trait = surname_storm
						has_inactive_trait = surname_hill
						has_inactive_trait = surname_waters
						has_inactive_trait = surname_rivers
					}
				}
				if = {
					limit = {
						OR = {
							culture = culture:reachman
							culture = culture:vineman
							culture = culture:honeywiner
							culture = culture:shieldman
							culture = culture:marcher
						}
					}
					make_trait_inactive = surname_flowers
				}
				else_if = {
					limit = {
						OR = {
							culture = culture:sand_dornish
							culture = culture:salt_dornish
							culture = culture:stone_dornish
						}
					}
					make_trait_inactive = surname_sand
				}
				else_if = {
					limit = {
						OR = {
							culture = culture:valeman
							culture = culture:moonman
							culture = culture:fingerman
							culture = culture:sisterman
						}
					}
					make_trait_inactive = surname_stone
				}
				else_if = {
					limit = {
						OR = {
							culture = culture:barrowman
							culture = culture:bearman
							culture = culture:crannogman
							culture = culture:fangman
							culture = culture:first_man
							culture = culture:forestman
							culture = culture:frozen_shoreman
							culture = culture:harborman
							culture = culture:hill_clansman
							culture = culture:hornfoot
							culture = culture:ice_riverman
							culture = culture:krakenman
							culture = culture:lakeman
							culture = culture:nightrunner
							culture = culture:northman
							culture = culture:sisterman
							culture = culture:skagosi
							culture = culture:thenn
							culture = culture:wolfswood_clansman
						}
					}
					make_trait_inactive = surname_snow
				}
				else_if = {
					limit = { culture = culture:ironborn }
					make_trait_inactive = surname_pyke
				}
				else_if = {
					limit = { culture = culture:riverlander }
					make_trait_inactive = surname_rivers
				}
				else_if = {
					limit = { culture = culture:stormlander }
					make_trait_inactive = surname_storm
				}
				else_if = {
					limit = { culture = culture:westerman }
					make_trait_inactive = surname_hill
				}
				else_if = {
					limit = {
						OR = {
							culture = culture:crownlander
							culture = culture:westerosi_valyrian
							culture = culture:clawman
						}
					}
					make_trait_inactive = surname_waters
				}
			}
			if = { # Succession error log workaround
				limit = { has_character_flag = unlegitimize_on_load }
				if = { 
					limit = { has_trait = legitimized_bastard }
					remove_trait = legitimized_bastard
				}
				if = { 
					limit = { has_trait = bastard_founder }
					remove_trait = bastard_founder
				}
				add_trait = bastard
				remove_character_flag = unlegitimize_on_load
			}
		}

		# Magesterial laws
		every_empire = {
			limit = {
				exists = holder
				OR = {
					has_title_law = magisterial_limited_succession_law
					has_title_law = magisterial_life_succession_law
				}
			}
			save_scope_as = term_limit_country
			holder = {
				save_scope_as = term_ruler
				every_held_title = {
					limit = {
						NOR = {
							has_title_law = magisterial_limited_succession_law
							has_title_law = magisterial_limited_succession_attached_titles_law
							has_title_law = magisterial_life_succession_law
							has_title_law = magisterial_life_succession_attached_titles_law
						}
					}
					every_de_jure_county = {
						limit = {
							NOT = { holder = scope:term_ruler }
						}
						scope:term_limit_country = {
							add_to_variable_list = {
								name = personal_vassals
								target = prev
							}
						}
					}
				}
			}
		}
		every_kingdom = {
			limit = {
				exists = holder
				OR = {
					has_title_law = magisterial_limited_succession_law
					has_title_law = magisterial_life_succession_law
				}
			}
			save_scope_as = term_limit_country
			holder = {
				save_scope_as = term_ruler
				every_held_title = {
					limit = {
						NOR = {
							has_title_law = magisterial_limited_succession_law
							has_title_law = magisterial_limited_succession_attached_titles_law
							has_title_law = magisterial_life_succession_law
							has_title_law = magisterial_life_succession_attached_titles_law
						}
					}
					every_de_jure_county = {
						limit = {
							NOT = { holder = scope:term_ruler }
						}
						scope:term_limit_country = {
							add_to_variable_list = {
								name = personal_vassals
								target = prev
							}
						}
					}
				}
			}
		}

		# Legitimate house mechanic set up
		every_empire = {
			if = {
				limit = {
					OR = {
						this = title:e_the_iron_throne
						this = title:e_dorne
						this = title:e_the_iron_islands
						this = title:e_the_north
						this = title:e_the_reach
						this = title:e_the_stormlands
						this = title:e_the_riverlands
						this = title:e_the_vale
						this = title:e_the_westerlands
					}
				}
				set_variable = {
					name = legitimate_house_title
					value = 1
				}
				set_variable = {
					name = new_house_progress
					value = 0
				}
				add_to_global_variable_list = {
					name = legitimate_house_titles
					target = this
				}
			}
			else = {
				set_variable = {
					name = legitimate_house_title
					value = 0
				}
			}
		}
		every_kingdom = {
			if = {
				limit = {
					OR = {
						this = title:k_the_crownlands
						this = title:k_dragonstone
						this = title:k_dorne
						this = title:k_the_iron_islands
						this = title:k_the_north
						this = title:k_the_reach
						this = title:k_the_stormlands
						this = title:k_the_riverlands
						this = title:k_the_vale
						this = title:k_the_westerlands
					}
				}
				set_variable = {
					name = legitimate_house_title
					value = 1
				}
				set_variable = {
					name = new_house_progress
					value = 0
				}
				add_to_global_variable_list = {
					name = legitimate_house_titles
					target = this
				}
			}
			else = {
				set_variable = {
					name = legitimate_house_title
					value = 0
				}
			}
		}
		every_duchy = {
			set_variable = {
				name = legitimate_house_title
				value = 0
			}
		}
		every_county = {
			set_variable = {
				name = legitimate_house_title
				value = 0
			}
		}
		every_barony = {
			set_variable = {
				name = legitimate_house_title
				value = 0
			}
		}
		# Set up initial legitimate dynasties
		# The below has to be done with references to founding members of the houses, as the houses themselves cannot be directly referenced in the script without a lot of extra work
		agot_set_legitimate_house = {
			TITLE = title:e_dorne
			HOUSE = character:Martell_24.house
		}
		agot_set_legitimate_house = {
			TITLE = title:e_the_north
			HOUSE = character:Stark_12.house
		}
		agot_set_legitimate_house = {
			TITLE = title:e_the_reach
			HOUSE = character:Gardener_1.house
		}
		agot_set_legitimate_house = {
			TITLE = title:e_the_stormlands
			HOUSE = character:Durrandon_1.house
		}
		agot_set_legitimate_house = {
			TITLE = title:e_the_vale
			HOUSE = character:Arryn_15.house
		}
		agot_set_legitimate_house = {
			TITLE = title:e_the_westerlands
			HOUSE = character:Lannister_29.house
		}
		agot_set_legitimate_house = {
			TITLE = title:k_the_riverlands
			HOUSE = character:Hoare_1.house
		}
		agot_set_legitimate_house = {
			TITLE = title:k_the_iron_islands
			HOUSE = character:Hoare_1.house
		}
		# Set initial legitimate house for non-paired titles (i.e. ones that don't have both a kingdom and empire)
		title:k_the_crownlands = {
			set_variable = {
				name = legitimate_house
				value = character:Targaryen_13.house
			}
		}
		title:k_dragonstone = {
			set_variable = {
				name = legitimate_house
				value = character:Targaryen_13.house
			}
		}
		title:e_the_iron_throne = {
			set_variable = {
				name = legitimate_house
				value = character:Targaryen_13.house
			}
		}
		if = { # Set up new house progress based on start date if the early days after Aegon's Conquest
			limit = {
				game_start_date > 8001.1.1 # Post Aegon's Conquest
				game_start_date < 8050.1.1 # Before they're the legitimate house
			}
			agot_set_current_house = {
				TITLE = title:e_the_reach
				HOUSE = character:Tyrell_40.house
			}
			agot_set_current_house = {
				TITLE = title:e_the_stormlands
				HOUSE = character:Baratheon_14.house
			}
			agot_set_current_house = {
				TITLE = title:e_the_riverlands
				HOUSE = character:Tully_10.house
			}
			agot_set_current_house = {
				TITLE = title:e_the_iron_islands
				HOUSE = character:Greyjoy_21.house
			}
			# Give progress every 10 years
			if = {
				limit = {
					game_start_date < 8003.1.1
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_reach
					PROGRESS = 3
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_stormlands
					PROGRESS = 3
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_riverlands
					PROGRESS = 3
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_iron_islands
					PROGRESS = 3
				}
			}
			else_if = {
				limit = {
					game_start_date < 8010.1.1
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_reach
					PROGRESS = 12
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_stormlands
					PROGRESS = 12
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_riverlands
					PROGRESS = 12
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_iron_islands
					PROGRESS = 12
				}
			}
			else_if = {
				limit = {
					game_start_date < 8020.1.1
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_reach
					PROGRESS = 32
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_stormlands
					PROGRESS = 32
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_riverlands
					PROGRESS = 32
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_iron_islands
					PROGRESS = 32
				}
			}
			else_if = {
				limit = {
					game_start_date < 8030.1.1
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_reach
					PROGRESS = 50
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_stormlands
					PROGRESS = 50
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_riverlands
					PROGRESS = 50
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_iron_islands
					PROGRESS = 50
				}
			}
			else_if = {
				limit = {
					game_start_date < 8040.1.1
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_reach
					PROGRESS = 77
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_stormlands
					PROGRESS = 77
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_riverlands
					PROGRESS = 77
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_iron_islands
					PROGRESS = 77
				}
			}
		}
		else_if = { # If past the 50 year limit, set them as the legitimate dynasties
			limit = {
				game_start_date > 8050.1.1
			}
			agot_set_legitimate_house = {
				TITLE = title:e_the_iron_islands
				HOUSE = character:Greyjoy_21.house
			}
			agot_set_legitimate_house = {
				TITLE = title:e_the_riverlands
				HOUSE = character:Tully_10.house
			}
			agot_set_legitimate_house = {
				TITLE = title:e_the_stormlands
				HOUSE = character:Baratheon_14.house
			}
			agot_set_legitimate_house = {
				TITLE = title:e_the_reach
				HOUSE = character:Tyrell_40.house
			}
		}
		# Now set current house for all relevant titles
		every_in_global_list = {
			variable = legitimate_house_titles
			if = {
				limit = {
					exists = holder
				}
				agot_set_current_house = {
					TITLE = this
					HOUSE = holder.house
				}
				if = {
					limit = {
						OR = {
							title_is_held_by_legitimate_house = yes
							# Shattered world should have all as legitimate anyway so do that here
							has_game_rule = agot_shatter_duchies
							has_game_rule = agot_shatter_duchies_even
							has_game_rule = agot_shatter_petty_kingdoms
							has_game_rule = agot_shatter_kingdoms
							has_game_rule = agot_shatter_empires
						}
					}
					agot_set_new_house_progress = {
						TITLE = this
						PROGRESS = 100
					}
					if = {
						limit = {
							title_is_held_by_legitimate_house = no # We're in shattered world
						}
						agot_set_legitimate_house = {
							TITLE = this
							HOUSE = holder.house
						}
					}
				}
			}
		}
		# Finally, if we're post Robert's Rebellion, set the progress of the Baratheon's on IT, Crownlands, and Dragonstone
		if = {
			limit = {
				game_start_date > 8283.9.1
				NOR = { # Don't do this if shattered world
					has_game_rule = agot_shatter_duchies
					has_game_rule = agot_shatter_duchies_even
					has_game_rule = agot_shatter_petty_kingdoms
					has_game_rule = agot_shatter_kingdoms
					has_game_rule = agot_shatter_empires
				}
			}
			agot_set_new_house_progress = {
				TITLE = title:e_the_iron_throne
				PROGRESS = 1
			}
			agot_set_new_house_progress = {
				TITLE = title:k_dragonstone
				PROGRESS = 1
			}
			agot_set_new_house_progress = {
				TITLE = title:k_the_crownlands
				PROGRESS = 1
			}
			if = {
				limit = {
					game_start_date > 8284.9.1
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_iron_throne
					PROGRESS = 2
				}
				agot_set_new_house_progress = {
					TITLE = title:k_dragonstone
					PROGRESS = 2
				}
				agot_set_new_house_progress = {
					TITLE = title:k_the_crownlands
					PROGRESS = 2
				}
			}
			if = {
				limit = {
					game_start_date > 8285.9.1
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_iron_throne
					PROGRESS = 3
				}
				agot_set_new_house_progress = {
					TITLE = title:k_dragonstone
					PROGRESS = 3
				}
				agot_set_new_house_progress = {
					TITLE = title:k_the_crownlands
					PROGRESS = 3
				}
			}
			if = {
				limit = {
					game_start_date > 8286.9.1
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_iron_throne
					PROGRESS = 4
				}
				agot_set_new_house_progress = {
					TITLE = title:k_dragonstone
					PROGRESS = 4
				}
				agot_set_new_house_progress = {
					TITLE = title:k_the_crownlands
					PROGRESS = 4
				}
			}
			if = {
				limit = {
					game_start_date > 8287.9.1
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_iron_throne
					PROGRESS = 5
				}
				agot_set_new_house_progress = {
					TITLE = title:k_dragonstone
					PROGRESS = 5
				}
				agot_set_new_house_progress = {
					TITLE = title:k_the_crownlands
					PROGRESS = 5
				}
			}
			if = {
				limit = {
					game_start_date > 8288.9.1
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_iron_throne
					PROGRESS = 6
				}
				agot_set_new_house_progress = {
					TITLE = title:k_dragonstone
					PROGRESS = 6
				}
				agot_set_new_house_progress = {
					TITLE = title:k_the_crownlands
					PROGRESS = 6
				}
			}
			if = {
				limit = {
					game_start_date > 8289.9.1
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_iron_throne
					PROGRESS = 7
				}
				agot_set_new_house_progress = {
					TITLE = title:k_dragonstone
					PROGRESS = 7
				}
				agot_set_new_house_progress = {
					TITLE = title:k_the_crownlands
					PROGRESS = 7
				}
			}
			if = {
				limit = {
					game_start_date > 8290.9.1
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_iron_throne
					PROGRESS = 8
				}
				agot_set_new_house_progress = {
					TITLE = title:k_dragonstone
					PROGRESS = 8
				}
				agot_set_new_house_progress = {
					TITLE = title:k_the_crownlands
					PROGRESS = 8
				}
			}
			if = {
				limit = {
					game_start_date > 8291.9.1
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_iron_throne
					PROGRESS = 9
				}
				agot_set_new_house_progress = {
					TITLE = title:k_dragonstone
					PROGRESS = 9
				}
				agot_set_new_house_progress = {
					TITLE = title:k_the_crownlands
					PROGRESS = 9
				}
			}
			if = {
				limit = {
					game_start_date > 8292.9.1
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_iron_throne
					PROGRESS = 10
				}
				agot_set_new_house_progress = {
					TITLE = title:k_dragonstone
					PROGRESS = 10
				}
				agot_set_new_house_progress = {
					TITLE = title:k_the_crownlands
					PROGRESS = 10
				}
			}
			if = {
				limit = {
					game_start_date > 8293.9.1
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_iron_throne
					PROGRESS = 11
				}
				agot_set_new_house_progress = {
					TITLE = title:k_dragonstone
					PROGRESS = 11
				}
				agot_set_new_house_progress = {
					TITLE = title:k_the_crownlands
					PROGRESS = 11
				}
			}
			if = {
				limit = {
					game_start_date > 8294.9.1
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_iron_throne
					PROGRESS = 12
				}
				agot_set_new_house_progress = {
					TITLE = title:k_dragonstone
					PROGRESS = 12
				}
				agot_set_new_house_progress = {
					TITLE = title:k_the_crownlands
					PROGRESS = 12
				}
			}
			if = {
				limit = {
					game_start_date > 8295.9.1
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_iron_throne
					PROGRESS = 13
				}
				agot_set_new_house_progress = {
					TITLE = title:k_dragonstone
					PROGRESS = 13
				}
				agot_set_new_house_progress = {
					TITLE = title:k_the_crownlands
					PROGRESS = 13
				}
			}
			if = {
				limit = {
					game_start_date > 8296.9.1
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_iron_throne
					PROGRESS = 14
				}
				agot_set_new_house_progress = {
					TITLE = title:k_dragonstone
					PROGRESS = 14
				}
				agot_set_new_house_progress = {
					TITLE = title:k_the_crownlands
					PROGRESS = 14
				}
			}
			if = {
				limit = {
					game_start_date > 8297.9.1
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_iron_throne
					PROGRESS = 15
				}
				agot_set_new_house_progress = {
					TITLE = title:k_dragonstone
					PROGRESS = 15
				}
				agot_set_new_house_progress = {
					TITLE = title:k_the_crownlands
					PROGRESS = 15
				}
			}
			if = {
				limit = {
					game_start_date > 8298.9.1
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_iron_throne
					PROGRESS = 16
				}
				agot_set_new_house_progress = {
					TITLE = title:k_dragonstone
					PROGRESS = 16
				}
				agot_set_new_house_progress = {
					TITLE = title:k_the_crownlands
					PROGRESS = 16
				}
			}
			if = {
				limit = {
					game_start_date > 8299.9.1
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_iron_throne
					PROGRESS = 17
				}
				agot_set_new_house_progress = {
					TITLE = title:k_dragonstone
					PROGRESS = 17
				}
				agot_set_new_house_progress = {
					TITLE = title:k_the_crownlands
					PROGRESS = 17
				}
			}
			if = {
				limit = {
					game_start_date > 8300.9.1
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_iron_throne
					PROGRESS = 18
				}
				agot_set_new_house_progress = {
					TITLE = title:k_dragonstone
					PROGRESS = 18
				}
				agot_set_new_house_progress = {
					TITLE = title:k_the_crownlands
					PROGRESS = 18
				}
			}
			if = {
				limit = {
					game_start_date > 8301.9.1
				}
				agot_set_new_house_progress = {
					TITLE = title:e_the_iron_throne
					PROGRESS = 19
				}
				agot_set_new_house_progress = {
					TITLE = title:k_dragonstone
					PROGRESS = 19
				}
				agot_set_new_house_progress = {
					TITLE = title:k_the_crownlands
					PROGRESS = 19
				}
			}
			# We're now up to date with the latest lore, so we can stop here
		}
		# Legitimate house mechanic is now set up with appropriate houses and progress

		random_ruler = {
			limit = { NOT = { is_landed = yes } }
			trigger_event = agot_error_destroyer_9000.1 # X is being set/used but not used/set error destroyer
		}

		## Maester Set Up
		set_global_variable = {
			name = citadel_title
			value = title:b_the_citadel
		}
		global_var:citadel_title.holder = {
			trigger_event = agot_citadel_maintenance.0003
		}
		agot_seed_archmaesters_effect = yes
		agot_seed_maesters_effect = yes

		# Magic Level set up
		if = {
			limit = {
				any_living_dragon = {
					count = 0
				}
			}
			set_global_variable = {
				name = magic_level
				value = 0 # no magic
			}
		}
		else_if = {
			limit = {
				any_living_dragon = {
					count < 10
				}
			}

			set_global_variable = {
				name = magic_level
				value = 1 # some magic
			}
		}
		else = {
			set_global_variable = {
				name = magic_level
				value = 2 # more magic
			}
		}

		## Gold Cloak Setup
		if = {
			limit = {
				game_start_date > 8104.1.1
			}
			add_to_global_variable_list = {
				name = agot_goldcloaks_founded
				target = flag:goldcloaks_founded
			}
		}

		##### Basic setup end #####

		### Scenario setup
		if = {
			limit = {
				OR = {
					game_start_date = 8282.9.15
					game_start_date = 8284.6.2
				}
			}

			character:Lannister_1 = { # Tywin Claim Cleanup
				if = {
					limit = {
						is_alive = yes
						is_landed = yes
					}
					remove_claim = title:c_coldmoat
					remove_claim = title:c_brandybottom
					remove_claim = title:c_derring_downs
					remove_claim = title:c_fang_hill
					remove_claim = title:d_ashemark
					remove_claim = title:c_ashemark
					remove_claim = title:c_nunns_deep
					remove_claim = title:c_leafy_lake
				}
			}
			if = {
				limit = {
					character:Arryn_13 = { is_alive = yes }
				}
				character:Arryn_3 = {
					set_designated_heir_unsafe = character:Arryn_13
				}
			}
			# Nightswatch cleanup TO-DO set up by date
			character:Qorgyle_69 = {
				if = {
					limit = { is_alive  = yes }
					move_to_pool_at = character:Qorgyle_4.capital_province
					set_employer = character:Qorgyle_4
				}
			}
			character:Qorgyle_10 = {
				if = {
					limit = { is_alive  = yes }
					move_to_pool_at = character:Qorgyle_4.capital_province
					set_employer = character:Qorgyle_4
				}
			}
			character:Qorgyle_11 = {
				if = {
					limit = { is_alive  = yes }
					move_to_pool_at = character:Qorgyle_4.capital_province
					set_employer = character:Qorgyle_4
				}
			}
			character:Qorgyle_12 = {
				if = {
					limit = { is_alive  = yes }
					move_to_pool_at = character:Qorgyle_4.capital_province
					set_employer = character:Qorgyle_4
				}
			}
			character:Brook_19 = {
				if = {
					limit = { is_alive  = yes }
					move_to_pool_at = character:Qorgyle_4.capital_province
					set_employer = character:Qorgyle_4
				}
			}

			if = {
				limit = {
					OR = {
						game_start_date = 8282.9.15
						game_start_date = 8284.6.02
					}
				}

				if = { # Added to prevent homage at game start
					limit = { has_dlc_feature = royal_court }

					every_character_with_royal_court = {
						every_vassal = {
							set_variable = {
								name = pay_homage_grace
								value = liege
							}
						}
					}
				}
			}


			#Willam Dustin
			character:Dustin_1 = {
				if = {
					limit = {
						is_alive = no
					}

					set_dead_character_variable = {
						name = body_has_been_disposed
						value = yes
						years = 5
					}
				}
			}
			#Ethan Glover
			character:Glover_2 = {
				if = {
					limit = {
						is_alive = no
					}

					set_dead_character_variable = {
						name = body_has_been_disposed
						value = yes
						years = 5
					}
				}
			}
			#Martyn Cassel
			character:Cassel_2 = {
				if = {
					limit = {
						is_alive = no
					}

					set_dead_character_variable = {
						name = body_has_been_disposed
						value = yes
						years = 5
					}
				}
			}
			#Theo Wull
			character:Wull_4 = {
				if = {
					limit = {
						is_alive = no
					}

					set_dead_character_variable = {
						name = body_has_been_disposed
						value = yes
						years = 5
					}
				}
			}
			#Ser Mark Ryswell
			character:Ryswell_10 = {
				if = {
					limit = {
						is_alive = no
					}

					set_dead_character_variable = {
						name = body_has_been_disposed
						value = yes
						years = 5
					}
				}
			}
			#Arthur Dayne
			character:Dayne_5 = {
				if = {
					limit = {
						is_alive = no
					}

					set_dead_character_variable = {
						name = body_has_been_disposed
						value = yes
						years = 5
					}
				}
			}
			#Oswell Whent
			character:Whent_5 = {
				if = {
					limit = {
						is_alive = no
					}

					set_dead_character_variable = {
						name = body_has_been_disposed
						value = yes
						years = 5
					}
				}
			}
			#Gerold Hightower
			character:Hightower_3 = {
				if = {
					limit = {
						is_alive = no
					}

					set_dead_character_variable = {
						name = body_has_been_disposed
						value = yes
						years = 5
					}
				}
			}
			#Rhaegar
			character:Targaryen_3 = {
				if = {
					limit = {
						is_alive = no
					}

					set_dead_character_variable = {
						name = body_has_been_disposed
						value = yes
						years = 5
					}
				}
			}
			#Aerys
			character:Targaryen_1 = {
				if = {
					limit = {
						is_alive = no
					}

					set_dead_character_variable = {
						name = body_has_been_disposed
						value = yes
						years = 5
					}
				}
			}
			#Rhaella
			character:Targaryen_2 = {
				if = {
					limit = {
						is_alive = no
					}

					set_dead_character_variable = {
						name = body_has_been_disposed
						value = yes
						years = 5
					}
				}
			}

			#Lyanna
			character:Stark_5 = {
				if = {
					limit = {
						is_alive = no
					}

					set_dead_character_variable = {
						name = body_has_been_disposed
						value = yes
						years = 5
					}

				}
			}

			#Rickard
			character:Stark_2 = {
				if = {
					limit = {
						is_alive = no
					}

					set_dead_character_variable = {
						name = body_has_been_disposed
						value = yes
						years = 5
					}

				}
			}

			#Brandon
			character:Stark_1 = {
				if = {
					limit = {
						is_alive = no
					}

					set_dead_character_variable = {
						name = body_has_been_disposed
						value = yes
						years = 5
					}

				}
			}
		}

		every_living_dragon = {
			limit = {
				NOR = {
					has_character_flag = in_dragonpit
					has_character_flag = owned_dragon
				}
			}
			if = {
				limit = {
					exists = location.county
					NOT = { location.county = { has_county_modifier = agot_wild_dragon_modifier } }
				}
				location = {
					add_travel_point_of_interest = agot_poi_wild_dragon
					county = {
						add_county_modifier = agot_wild_dragon_modifier
					}
				}
			}
		}

		#Set Birthplace - Dragon
		every_living_dragon = {
			agot_dragon_birthplace_game_start = yes
		}
		### Run effects on dead characters
		agot_apply_posthistory_effect = yes
	}
}

agot_house_feuds = {
	effect = {
		### House feud setup
		# Bracken vs Blackwood
		every_ruler = {
			if = {
				limit = {
					dynasty = dynasty:dynn_Bracken
					has_title = title:d_southstone
				}
				save_scope_as = bracken
			}
		}
		every_ruler = {
			if = {
				limit = {
					dynasty = dynasty:dynn_Blackwood
					has_title = title:d_blackwood_vale
				}
				save_scope_as = blackwood
			}
		}
		scope:blackwood = {
			scope:bracken = { save_scope_as = rival }
			trigger_event = agot_events_generic.0003
		}
		scope:bracken = {
			scope:blackwood = { save_scope_as = rival }
			trigger_event = agot_events_generic.0003
		}

		# Yronwood vs Fowler
		every_ruler = {
			if = {
				limit = {
					dynasty = dynasty:dynn_Fowler
					has_title = title:d_the_princes_pass
				}
				save_scope_as = fowler
			}
		}
		every_ruler = {
			if = {
				limit = {
					dynasty = dynasty:dynn_Yronwood
					has_title = title:d_yronwood
				}
				save_scope_as = yronwood
			}
		}
		scope:yronwood = {
			scope:fowler = { save_scope_as = rival }
			trigger_event = agot_events_generic.0003
		}
		scope:fowler = {
			scope:yronwood = { save_scope_as = rival }
			trigger_event = agot_events_generic.0003
		}

		# Forrester vs Whitehill
		every_ruler = {
			if = {
				limit = {
					dynasty = dynasty:dynn_Forrester
					has_title = title:c_ironrath
				}
				save_scope_as = forrester
			}
		}
		every_ruler = {
			if = {
				limit = {
					dynasty = dynasty:dynn_Whitehill
					has_title = title:c_highpoint
				}
				save_scope_as = whitehill
			}
		}
		scope:whitehill = {
			scope:forrester = { save_scope_as = rival }
			trigger_event = agot_events_generic.0003
		}
		scope:forrester = {
			scope:whitehill = { save_scope_as = rival }
			trigger_event = agot_events_generic.0003
		}

		# Falwell vs Jast
		every_ruler = {
			if = {
				limit = {
					dynasty = dynasty:dynn_Falwell
					has_title = title:c_motley_hills
				}
				save_scope_as = falwell
			}
		}
		every_ruler = {
			if = {
				limit = {
					dynasty = dynasty:dynn_Jast
					has_title = title:c_lonmont
				}
				save_scope_as = jast
			}
		}
		scope:falwell = {
			scope:jast = { save_scope_as = rival }
			trigger_event = agot_events_generic.0003
		}
		scope:jast = {
			scope:falwell = { save_scope_as = rival }
			trigger_event = agot_events_generic.0003
		}

		# Manderly vs Peake
		every_ruler = {
			if = {
				limit = {
					dynasty = dynasty:dynn_Manderly
					has_title = title:d_white_harbor
				}
				save_scope_as = manderly
			}
		}
		every_ruler = {
			if = {
				limit = {
					dynasty = dynasty:dynn_Peake
					has_title = title:c_starpike
				}
				save_scope_as = peake
			}
		}
		scope:peake = {
			scope:manderly = { save_scope_as = rival }
			trigger_event = agot_events_generic.0003
		}
		scope:manderly = {
			scope:peake = { save_scope_as = rival }
			trigger_event = agot_events_generic.0003
		}
	}
}

agot_north_holding_cost = {
	effect = {
		every_county_in_region = {
			region = world_westeros_the_north
			add_county_modifier = agot_holding_build_speed_north
		}
		every_county_in_region = {
			region = world_westeros_beyond_the_wall
			add_county_modifier = agot_holding_build_speed_btw
		}
		every_county_in_region = {
			region = world_westeros_the_wall
			add_county_modifier = agot_holding_build_speed_north
		}
	}
}

agot_ruins = {
	effect = {
		every_ruler = {
			if = {
				limit = {
					has_trait = ruin
				}
				clear_traits = yes
				add_trait = ruin
				refund_all_perks = yes
				add_diplomacy_lifestyle_perk_points = -10
				add_stewardship_lifestyle_perk_points = -10
				add_martial_lifestyle_perk_points = -10
				add_learning_lifestyle_perk_points = -10
				add_intrigue_lifestyle_perk_points = -10
				add_trait = incapable
			}
		}
		character:Ruin_Empress = { designate_diarch = character:Ruin_Regent }
		remove_generated_diarch_consequences_effect = {
			NEW_DIARCH = character:Ruin_Regent
			LIEGE = character:Ruin_Empress
		}
	}
}

agot_barony_ruins = {
	effect = {
		# Skane
		title:e_ruins = {
			set_coa = ruins_coa
		}
		title:k_ruins = {
			set_coa = ruins_coa
		}
		title:d_ruins = {
			set_coa = ruins_coa
		}
		title:c_ruins = {
			set_coa = ruins_coa
		}
		title:b_ruins = {
			set_coa = ruins_coa
		}
		title:b_ruins.title_province = {
			add_province_modifier = agot_ruin_disease_modifier
		}
		title:b_more_ruin = {
			set_coa = ruins_coa
		}
		title:b_more_ruin.title_province = {
			add_province_modifier = agot_ruin_disease_modifier
		}
		title:b_the_most_ruin = {
			set_coa = ruins_coa
		}
		title:b_the_most_ruin.title_province = {
			add_province_modifier = agot_ruin_disease_modifier
		}
		if = {
			limit = {
				game_start_date >= 4000.1.1
			}
			title:b_skane.title_province = {
				set_holding_type = ruin_holding
				add_building = small_ruin_01
				add_building = ruin_desolate_01
			}
			title:c_skane = {
				set_coa = ruins_coa
			}
		}
		# Skane
		if = {
			limit = {
				game_start_date >= 5100.1.1
			}
			title:b_woodfoot_watch.title_province = {
				set_holding_type = ruin_holding
				add_building = small_ruin_01
			}
			title:b_woodfoot_watch = {
				set_coa = ruins_coa
			}
		}
		# Hellgate Hall
		if = {
			limit = {
				game_start_date >= 7310.1.1
			}
			title:b_hellgate_hall.title_province = {
				set_holding_type = ruin_holding
				add_building = medium_ruin_01
				add_building = ruin_desolate_01
			}
			title:b_hellgate_hall = {
				set_coa = ruins_coa
			}
		}
		# Morne
		if = {
			limit = {
				game_start_date >= 4900.1.1
			}
			title:b_morne.title_province = {
				set_holding_type = ruin_holding
				add_building = medium_ruin_01
			}
			title:b_morne = {
				set_coa = ruins_coa
			}
		}
		# Castamere
		if = {
			limit = {
				game_start_date >= 8261.11.1
			}
			title:b_castamere.title_province = {
				set_holding_type = ruin_holding
				add_building = medium_ruin_01
				add_building = ruin_flooded_01
				add_building = ruin_infamous_01
			}
			title:b_castamere = {
				set_coa = ruins_coa
			}
		}
		# Oldstones
		if = {
			limit = {
				game_start_date >= 4650.1.1
			}
			title:b_oldstones.title_province = {
				set_holding_type = ruin_holding
				add_building = large_ruin_01
				add_building = ruin_renowned_01
			}
			title:b_oldstones = {
				set_coa = ruins_coa
			}
		}
		# Summerhall
		if = {
			limit = {
				game_start_date >= 8259.6.1
			}
			title:b_summerhall.title_province = {
				set_holding_type = ruin_holding
				add_building = large_ruin_01
				add_building = ruin_renowned_01
			}
			title:b_summerhall = {
				set_coa = ruins_coa
			}
		}
		# Hugor's Hill
		if = {
			limit = {
				game_start_date >= 4200.1.1
			}
			title:b_hugors_hill.title_province = {
				set_holding_type = ruin_holding
				add_building = large_ruin_01
				add_building = ruin_renowned_01
			}
			title:b_hugors_hill = {
				set_coa = ruins_coa

				create_character = {
					age = 20
					gender = male
					location = barony.title_province
					faith = county.faith
					culture = county.culture
					dynasty = none
					save_scope_as = ruin_holder
				}

				create_title_and_vassal_change = {
					type = granted
					save_scope_as = change
					add_claim_on_loss = no
				}
				barony = {
					change_title_holder = {
						holder = scope:ruin_holder
						change = scope:change
					}
					set_coa = ruins_coa
				}
				resolve_title_and_vassal_change = scope:change
				scope:ruin_holder = { change_government = ruins_government }
			}
		}
		# Shandystone
		if = {
			limit = {
				game_start_date >= 8200.1.1
			}
			title:b_shandystone.title_province = {
				set_holding_type = ruin_holding
				add_building = small_ruin_01
				add_building = ruin_desolate_01
			}
			title:b_shandystone = {
				set_coa = ruins_coa
			}
		}
		# Hoare Castle
		if = {
			limit = {
				game_start_date >= 7622.1.1
			}
			title:b_hoare_castle.title_province = {
				set_holding_type = ruin_holding
				add_building = large_ruin_01
				add_building = ruin_renowned_01
			}
			title:b_hoare_castle = {
				set_coa = ruins_coa
			}
		}
	}
}

agot_on_game_start_after_lobby = {
	effect = {
		##### General setup start #####
		### Night's Watch related setup
		title:d_the_wall = { clear_title_laws = yes }
		every_barony = {
			if = {
				limit = {
					exists = holder
					holder.primary_title.tier = tier_barony
					title_province = { has_holding_type = ruin_holding }
				}

				holder = {
					change_government = ruins_government
				}
			}
		}

		if = {
			limit = {
				exists = title:k_the_wall.holder
				# title:k_the_wall.holder = {
				# 	government_has_flag = government_is_nw
				# }
			}
			title:k_the_wall.holder = {
				trigger_event = agot_nightswatch_maintenance.0001 # Removes female courtiers

				add_character_modifier = {
					modifier = nw_warden
					months = 3
				}

				#Give away gift counties
				every_held_county = {
					limit = {
						OR = {
							duchy = title:d_brandons_gift
							duchy = title:d_new_gift
						}
					}
					create_character = {
						location = title:k_the_wall.holder.capital_province
						template = agot_northman_character
						dynasty = none
						gender = male
						save_scope_as = new_mayor
					}

					create_title_and_vassal_change = {
						type = granted
						save_scope_as = change
						add_claim_on_loss = no
					}

					change_title_holder_include_vassals = {
						holder = scope:new_mayor
						change = scope:change
					}

					resolve_title_and_vassal_change = scope:change
				}
			}
			title:c_the_shadow_tower.holder = {
				add_character_modifier = {
					modifier = nw_warden
					months = 3
				}
			}
			title:c_eastwatch.holder = {
				add_character_modifier = {
					modifier = nw_warden
					months = 3
				}
			}
		}

		if = {
			limit = {
				exists = global_var:citadel_title
			}
			global_var:citadel_title.holder = {
				trigger_event = agot_citadel_maintenance.0001 # Removes female courtiers
			}
		}

		### House Customizer related setup
		every_player = {
			if = {
				limit = {
					has_trait = house_customizer
				}
				trigger_event = {
					id = agot_house_customizer.0001
				}
			}
			if = {
				limit = { has_trait = heterochromia_customizer }
				trigger_event = agot_heterochromia_customizer.1000
			}
			# RP Events
			if = {
				limit = {
					NOT = { has_trait = house_customizer }
					any_held_county = {
						title_province = { geographical_region = world_westeros_beyond_the_wall }
					}
					is_from_ruler_designer = yes
				}
				trigger_event = agot_rp_event.0019 # Wilding RP Events
				add_character_flag = from_wilding_category
			}
			else_if = {
				limit = {
					NOT = { has_trait = house_customizer }
					is_from_ruler_designer = yes
					agot_is_independent_ruler = no
				}
				trigger_event = agot_rp_event.0001 # Westeros and Other Places
			}
			else_if = {
				limit = {
					NOT = { has_trait = house_customizer }
					is_from_ruler_designer = yes
				}
				trigger_event = agot_rp_event.0105 # Custom Strong Seed Menu
			}
			agot_clear_patron = yes
			add_character_flag = cannot_be_knight_and_commander
		}

		if = { # If NO player has house_customizer, we will kill these extinct house members used to skirt around the renown bug.
			limit = {
				NOT = {
					any_player = { has_trait = house_customizer }
				}
			}
			trigger_event = agot_house_customizer.0024
		}
		else = { # We fire this active the extinct house purger
			trigger_event = {
				id = agot_house_customizer.0024
				days = 1
			}
		}

		every_ruler = {
			if = {
				limit = { has_character_flag = bookmark_independent }

				trigger_event = agot_events_generic.0006
			}
		}

		# Dragon related setup

		if = {
			limit = {
				game_start_date < 8153.1.1 # Dragons extinct after this date
			}
			title:c_dragonstone = { # Adding dragonkeeper variable to dragonstone
				agot_dragonpit_gamestart_init_pit_effect = yes
			}
			title:c_dragonstone.holder ?= {
				agot_generate_dragonstone_head_dragonkeeper = yes
				appoint_court_position = {
					recipient = scope:head_dragonkeeper
					court_position = head_dragonkeeper_court_position
				}
			}
		}
		if = {
			limit = {
				game_start_date > 8055.1.1 # KL Dragonpit was built by this date
				game_start_date < 8130.10.9 # KL Dragonpit abandoned by this date
			}
			# Adding dragonkeeper variable to KL
			title:c_kings_landing = {
				agot_dragonpit_gamestart_init_pit_effect = yes
			}
			title:e_the_iron_throne.holder ?= {
				agot_generate_IT_head_dragonkeeper = yes
				appoint_court_position = {
					recipient = scope:head_dragonkeeper
					court_position = head_dragonkeeper_court_position
				}
			}
		}
		every_living_dragon = { # Dragons get aging effects and start story cycles
			agot_back_apply_dragon_aging_effect = yes
			create_story = story_dragon_alive
		}

		# Halloween / April Fool's Jokes
		if = {
			limit = { has_game_rule = agot_silly_mode }
			random_list = {
				199 = { # Regular Silliness
				}
				1 = { # Freypocalypse
					every_living_character = {
						limit = { is_human = yes }
						trigger_event = agot_easter_egg.0001
					}
				}
			}
		}


		### End of Dragons List
		############################

		##### Basic setup end #####

		##### Scenario setup start #####
		agot_historical_dragons_setup = yes
		agot_historical_artifacts_setup = yes

		if = {
			limit = {
				NOR = {
					has_game_rule = agot_shatter_duchies
					has_game_rule = agot_shatter_duchies_even
					has_game_rule = agot_shatter_petty_kingdoms
					has_game_rule = agot_shatter_kingdoms
					has_game_rule = agot_shatter_empires
				}
			}

			# if = { # manage 8195.3.7 1st Blackfyre Rebellion scenario
			# 	limit = { game_start_date = 8195.3.7 }

			# 	agot_blackfyre_rebellion_I_scenario_setup = yes
			# }
			if = { # manage 8106.2.10 The Rogue Prince scenario
				limit = { game_start_date = 8106.4.18 }

				agot_8106_4_18_scenario_setup = yes
			}
			if = {
				limit = { game_start_date = 8233.2.8 }

				agot_8233_peake_uprising_setup = yes
			}
			if = { # manage 8258.12.21 The Ninepenny Kings scenario
				limit = { game_start_date = 8258.12.21 }

				agot_8259_11_1_ninepenny_setup = yes
			}
			if = { # manage 8209.2.1 Shadows of Ashford scenario
				limit = { game_start_date = 8209.2.1 }
				agot_8209_2_1_scenario_setup = yes
			}
			if = { # manage 8277.1.1 Defiance of Duskendale scenario
				limit = { game_start_date = 8277.1.1 }

				agot_8277_1_1_dd_scenario_setup = yes
			}
			if = { # manage 8282.9.15 Robert's Rebellion scenario
				limit = { game_start_date = 8282.9.15 }

				agot_8282_9_15_rr_scenario_setup = yes
			}
			if = { # manage 8284.6.2 Crowned Stag scenario
				limit = { game_start_date = 8284.6.2 }

				agot_8284_6_2_scenario_setup = yes
			}
			if = { # manage 8299.3.3 A Clash of Kings scenario
				limit = { game_start_date = 8299.3.3 }

				agot_8299_3_3_acok_scenario_setup = yes
			}
			if = { # manage 8129.4.1 The Dance of Dragons scenario
				limit = { game_start_date = 8129.4.1 }

				character:Targaryen_76  = {
					agot_create_artifact_lucerys_gun_effect  = { OWNER = this }
					scope:newly_created_artifact = {
						equip_artifact_to_owner_replace = yes
					}
				}
			}
			#Bookmarks after the Dance of the Dragons will start with +1 on the War of Succession counter for House Targaryen
			if = {
				limit = { game_start_date > 8129.4.1 } # The Dance of Dragons scenario
				dynasty:dynn_Targaryen = {
					set_variable = {
						name = war_of_succession_number
						value = 1
					}
				}
			}
		}

		### Count Blackfyre Rebellions
		if = {
			limit = { game_start_date > 8252.11.11 }
			set_global_variable = {
				name = number_of_blackfyre_rebellions
				value = 5
			}
		}
		else_if = {
			limit = { game_start_date > 8236.1.1 }
			set_global_variable = {
				name = number_of_blackfyre_rebellions
				value = 4
			}
		}
		else_if = {
			limit = { game_start_date > 8219.1.1 }
			set_global_variable = {
				name = number_of_blackfyre_rebellions
				value = 3
			}
		}
		else_if = {
			limit = { game_start_date > 8212.1.1 }
			set_global_variable = {
				name = number_of_blackfyre_rebellions
				value = 2
			}
		}
		else_if = {
			limit = { game_start_date > 8195.3.7 }
			set_global_variable = {
				name = number_of_blackfyre_rebellions
				value = 1
			}
		}

		every_player = { # Send exposition events
			limit = {
				#is_valid_exposition_event_receiver = yes
				always = no # AGOT TODO disabled cause I don't know
			}
			if = {
				limit = {
					#is_valid_story_event_receiver = yes
					always = yes
				}

				# Exposition events for houses

				switch = {
					trigger = dynasty

					dynasty:dynn_Arryn = { trigger_event = agot_exposition_events.0001 }
					dynasty:dynn_Baratheon = { trigger_event = agot_exposition_events.0002 }
					dynasty:dynn_Greyjoy = { trigger_event = agot_exposition_events.0003 }
					dynasty:dynn_Lannister = { trigger_event = agot_exposition_events.0004 }
					dynasty:dynn_Martell = { trigger_event = agot_exposition_events.0005 }
					dynasty:dynn_Stark = { trigger_event = agot_exposition_events.0006 }
					dynasty:dynn_Targaryen = { trigger_event = agot_exposition_events.0007 }
					dynasty:dynn_Tully = { trigger_event = agot_exposition_events.0008 }
					dynasty:dynn_Tyrell = { trigger_event = agot_exposition_events.0009 }
					dynasty:dynn_Hightower = { trigger_event = agot_exposition_events.0010 }
					dynasty:dynn_Glover = { trigger_event = agot_exposition_events.0011 }
					dynasty:dynn_Reed = { trigger_event = agot_exposition_events.0012 }
				}
			}
		}
		##### Scenario setup end #####

		## Override blockade for firing canon councillors
		every_ruler = {
			limit = { is_ai = yes }
			every_councillor = {
				limit = { has_character_flag = canon_councillor }
				block_firing_councillor_effect = { COURT_OWNER = PREV }
				remove_character_flag = canon_councillor
			}
		}

		## Override engine changing sexuality of non-adults
		every_living_character = {
			limit = {
				age >= 10
				OR = {
					has_character_flag = sexuality_ensure_heterosexual
					has_character_flag = sexuality_ensure_homosexual
					has_character_flag = sexuality_ensure_bisexual
					has_character_flag = sexuality_ensure_asexual
					has_character_flag = sexuality_ensure_equal_chance
					has_character_flag = sexuality_ensure_not_heterosexual
					has_character_flag = sexuality_ensure_not_homosexual
					has_character_flag = sexuality_ensure_not_bisexual
					has_character_flag = sexuality_ensure_not_asexual
					has_character_flag = sexuality_raise_chance_heterosexual
					has_character_flag = sexuality_raise_chance_homosexual
					has_character_flag = sexuality_raise_chance_bisexual
					has_character_flag = sexuality_raise_chance_asexual
				}
			}
			agot_advanced_sexuality_randomizer_history_effect = yes
		}
		every_living_character = {
			limit = { has_variable = target_employer }
			if = {
				limit = {
					var:target_employer = { is_ruler = yes }
					NOT = { is_courtier_of = var:target_employer }
				}
				var:target_employer = { add_courtier = PREV }
			}
		}

		# Ruler Designer Dragon Riders
		every_player = {
			limit = {
				has_trait = dragonrider
				is_from_ruler_designer = yes
			}
			if = {
				limit = {
					capital_county.title_province ?= {
						OR = {
							geographical_region = world_westeros_beyond_the_wall
							geographical_region = world_westeros_the_wall
						}
					}
				}
				trigger_event = agot_dragon_designer.2000
			}
			else = {
				trigger_event = agot_dragon_designer.0001
			}
		}
	}
	events = {
		agot_house_maintenance.0001
		agot_adventurers_events.0001
		# agot_nightswatch_maintenance.0001 # Removes female courtiers
	}
}

agot_artifacts_sell = {
	effect = {
		agot_get_artifact_keeper = yes
	}
}
