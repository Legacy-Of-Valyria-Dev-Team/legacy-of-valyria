
dragonlord_lord_chamberlain = { # Special
	skill = prowess

	name = {
		desc =  dragonlord_lord_chamberlain_name
	}

	# Give public opinion and control tasks

	tooltip = game_concept_lord_commander_desc

	modifier = {
		name = dragonlord_lord_chamberlain_modifier
		monthly_prestige = 1
		monthly_dynasty_prestige = 1
	}

	can_fire = { # A kingsguard serves for life; Joffrey interrupted that tradition;
		always = no
	}

	can_reassign = {
		
	}

	valid_position = {
		has_game_rule = debug_mode_on 
		can_have_dragonlords = yes
	}

	valid_character = {
		exists = root.liege_or_court_owner
		has_trait = dragonrider
	}

	on_get_position = {
	}

	on_lose_position = {
	}

	on_fired_from_position = {
	}
	portrait_animation = kingsguard
}

dragonlord_1 = { # 6 of them
	skill = prowess

	name = {
		desc = dragonlord_name
	}

	tooltip = game_concept_dragonlord_desc

	modifier = {
		name = dragonlord_modifier
		monthly_prestige = 0.5
		monthly_dynasty_prestige = 0.5
	}

	can_fire = { 
		always = no
	}

	can_reassign = {

	}
	valid_position = {
		has_game_rule = debug_mode_on
		can_have_dragonlords = yes
	}
	valid_character = {
		exists = root.liege_or_court_owner
		has_trait = dragonrider
	}

	on_get_position = {
	}

	on_lose_position = {
	}

	on_fired_from_position = {
	}
	portrait_animation = kingsguard
}
dragonlord_2 = { # 6 of them
	skill = prowess

	name = {
		desc = dragonlord_name
	}

	tooltip = game_concept_dragonlord_desc

	modifier = {
		name = dragonlord_modifier
		monthly_prestige = 0.5
		monthly_dynasty_prestige = 0.5
	}

	can_fire = { 
		always = no
	}

	can_reassign = {

	}
	valid_position = {
		has_game_rule = debug_mode_on
		can_have_dragonlords = yes
	}
	valid_character = {
		exists = root.liege_or_court_owner
		has_trait = dragonrider
	}

	on_get_position = {
	}

	on_lose_position = {
	}

	on_fired_from_position = {
	}
	portrait_animation = kingsguard
}
dragonlord_3 = { # 6 of them
	skill = prowess

	name = {
		desc = dragonlord_name
	}

	tooltip = game_concept_dragonlord_desc

	modifier = {
		name = dragonlord_modifier
		monthly_prestige = 0.5
		monthly_dynasty_prestige = 0.5
	}

	can_fire = { 
		always = no
	}

	can_reassign = {

	}
	valid_position = {
		has_game_rule = debug_mode_on
		can_have_dragonlords = yes
	}
	valid_character = {
		exists = root.liege_or_court_owner
		has_trait = dragonrider
	}

	on_get_position = {
	}

	on_lose_position = {
	}

	on_fired_from_position = {
	}
	portrait_animation = kingsguard
}
dragonlord_4 = { # 6 of them
	skill = prowess

	name = {
		desc = dragonlord_name
	}

	tooltip = game_concept_dragonlord_desc

	modifier = {
		name = dragonlord_modifier
		monthly_prestige = 0.5
		monthly_dynasty_prestige = 0.5
	}

	can_fire = { 
		always = no
	}

	can_reassign = {

	}
	valid_position = {
		has_game_rule = debug_mode_on
		can_have_dragonlords = yes
	}
	valid_character = {
		exists = root.liege_or_court_owner
		has_trait = dragonrider
	}

	on_get_position = {
	}

	on_lose_position = {
	}

	on_fired_from_position = {
	}
	portrait_animation = kingsguard
}
dragonlord_5 = { # 6 of them
	skill = prowess

	name = {
		desc = dragonlord_name
	}

	tooltip = game_concept_dragonlord_desc

	modifier = {
		name = dragonlord_modifier
		monthly_prestige = 0.5
		monthly_dynasty_prestige = 0.5
	}

	can_fire = { 
		always = no
	}

	can_reassign = {

	}
	valid_position = {
		has_game_rule = debug_mode_on
		can_have_dragonlords = yes
	}
	valid_character = {
		exists = root.liege_or_court_owner
		has_trait = dragonrider
	}

	on_get_position = {
	}

	on_lose_position = {
	}

	on_fired_from_position = {
	}
	portrait_animation = kingsguard
}
dragonlord_6 = { # 6 of them
	skill = prowess

	name = {
		desc = dragonlord_name
	}

	tooltip = game_concept_dragonlord_desc

	modifier = {
		name = dragonlord_modifier
		monthly_prestige = 0.5
		monthly_dynasty_prestige = 0.5
	}

	can_fire = { 
		always = no
	}

	can_reassign = {

	}
	valid_position = {
		has_game_rule = debug_mode_on
		can_have_dragonlords = yes
	}
	valid_character = {
		exists = root.liege_or_court_owner
		has_trait = dragonrider
	}

	on_get_position = {
	}

	on_lose_position = {
	}

	on_fired_from_position = {
	}
	portrait_animation = kingsguard
}


