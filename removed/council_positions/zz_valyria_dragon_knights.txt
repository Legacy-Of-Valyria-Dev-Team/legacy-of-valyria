
dragonknight_lord_commander = { # Special
	skill = prowess

	name = {
		desc =  dragonknight_lord_commander_name
	}

	# Give public opinion and control tasks

	tooltip = game_concept_dragonknight_lord_commander_desc

	modifier = {
		name = dragonknight_lord_commander_modifier
		monthly_prestige = 1
		monthly_dynasty_prestige = 1
	}

	can_fire = { 
		custom_description = {
			text = "cv_agot_dragonknight_can_fire"
			OR = {
				has_global_variable = agot_startup_fire_councillors
				cp:dragonknight_lord_commander = { has_character_flag = can_fire_dragonknight }
				# has_realm_law = dragonknight_law_2
			}
		}
	}

	can_reassign = {
		custom_description = {
			text = "cv_agot_dragonknight_can_fire"
			OR = {
				has_global_variable = agot_startup_fire_councillors
				cp:dragonknight_lord_commander ?= { has_character_flag = can_fire_dragonknight }
				# has_realm_law = dragonknight_law_2
			}
		}
	}

	valid_position = {
		can_have_dragonknight = yes
		#has_character_flag = assigning_dragonknight This will be useful soon
	}

	valid_character = {
		exists = root.liege_or_court_owner
		can_be_dragonknight_trigger = { COURT_OWNER = root.liege_or_court_owner }
		has_trait = dragonknight
	}

	on_get_position = {
		cv_agot_on_get_dragonknight_lord_commander = yes
	}

	on_lose_position = {
		cv_agot_on_fired_from_dragonknight = yes
	}

	on_fired_from_position = {
		cv_agot_on_fired_from_dragonknight = yes
		#remove_character_flag = dragonknight_lord_commander Need to keep this for weirdness
	}
	portrait_animation = kingsguard
}

dragonknight_1 = { # 6 of them
	skill = prowess

	name = {
		desc =  dragonknight_name
	}

	tooltip = game_concept_dragonknight_desc

	modifier = {
		name = dragonknight_modifier
		monthly_prestige = 0.5
		monthly_dynasty_prestige = 0.5
	}

	can_fire = { 
		custom_description = {
			text = "cv_agot_dragonknight_can_fire"
			OR = {
				has_global_variable = agot_startup_fire_councillors
				cp:dragonknight_1 = { has_character_flag = can_fire_dragonknight }
				# has_realm_law = dragonknight_law_2
			}
		}
	}

	can_reassign = {
		custom_description = {
			text = "cv_agot_dragonknight_can_fire"
			OR = {
				has_global_variable = agot_startup_fire_councillors
				cp:dragonknight_1 = { has_character_flag = can_fire_dragonknight }
				# has_realm_law = dragonknight_law_2
			}
		}
	}
	valid_position = {
		can_have_dragonknight = yes
	}
	valid_character = {
		exists = root.liege_or_court_owner
		can_be_dragonknight_trigger = { COURT_OWNER = root.liege_or_court_owner }
		has_trait = dragonknight

	}

	on_get_position = {
		cv_agot_on_get_dragonknight = yes
	}

	on_lose_position = {
		cv_agot_on_fired_from_dragonknight = yes
	}

	on_fired_from_position = {
		cv_agot_on_fired_from_dragonknight = yes
	}
	portrait_animation = kingsguard
}

dragonknight_2 = { # 6 of them
	name = {
		desc =  dragonknight_name
	}

	tooltip = game_concept_dragonknight_desc

	skill = prowess

	modifier = {
		name = dragonknight_modifier
		monthly_prestige = 0.5
		monthly_dynasty_prestige = 0.5
	}
	can_fire = { # A dragonknight serves for life; Zay interrupted that tradition;
	custom_description = {
		text = "cv_agot_dragonknight_can_fire"
		OR = {
			has_global_variable = agot_startup_fire_councillors
			cp:dragonknight_2 = { has_character_flag = can_fire_dragonknight }
			# has_realm_law = dragonknight_law_2
		}
	}
	}

	can_reassign = {  # A dragonknight serves for life; Zay interrupted that tradition;
	custom_description = {
		text = "cv_agot_dragonknight_can_fire"
		OR = {
			has_global_variable = agot_startup_fire_councillors
			cp:dragonknight_2 = { has_character_flag = can_fire_dragonknight }
			# has_realm_law = dragonknight_law_2
		}
	}
	}

	valid_position = {
		can_have_dragonknight = yes
	}
	valid_character = {
		exists = root.liege_or_court_owner
		can_be_dragonknight_trigger = { COURT_OWNER = root.liege_or_court_owner }
		has_trait = dragonknight

	}

	on_get_position = {
		cv_agot_on_get_dragonknight = yes
	}

	on_lose_position = {
		cv_agot_on_fired_from_dragonknight = yes
	}

	on_fired_from_position = {
		cv_agot_on_fired_from_dragonknight = yes
	}
	portrait_animation = kingsguard
}

dragonknight_3 = { # 6 of them
	name = {
		desc =  dragonknight_name
	}

	tooltip = game_concept_dragonknight_desc

	skill = prowess

	modifier = {
		name = dragonknight_modifier
		monthly_prestige = 0.5
		monthly_dynasty_prestige = 0.5
	}
	can_fire = { # A dragonknight serves for life; Zay interrupted that tradition;
	custom_description = {
		text = "cv_agot_dragonknight_can_fire"
		OR = {
			has_global_variable = agot_startup_fire_councillors
			cp:dragonknight_3 = { has_character_flag = can_fire_dragonknight }
			# has_realm_law = dragonknight_law_2
			}
		}
	}

	can_reassign = {
		custom_description = {
			text = "cv_agot_dragonknight_can_fire"
			OR = {
				has_global_variable = agot_startup_fire_councillors
				cp:dragonknight_3 = { has_character_flag = can_fire_dragonknight }
				# has_realm_law = dragonknight_law_2
			}
		}
	}
	valid_position = {
		can_have_dragonknight = yes
	}
	valid_character = {
		exists = root.liege_or_court_owner
		can_be_dragonknight_trigger = { COURT_OWNER = root.liege_or_court_owner }
		has_trait = dragonknight

	}

	on_get_position = {
		cv_agot_on_get_dragonknight = yes
	}

	on_lose_position = {
		cv_agot_on_fired_from_dragonknight = yes
	}

	on_fired_from_position = {
		cv_agot_on_fired_from_dragonknight = yes
	}
	portrait_animation = kingsguard
}

dragonknight_4 = { # 6 of them
	name = {
		desc =  dragonknight_name
	}

	tooltip = game_concept_dragonknight_desc

	skill = prowess

	modifier = {
		name = dragonknight_modifier
		monthly_prestige = 0.5
		monthly_dynasty_prestige = 0.5
	}
	can_fire = { # A dragonknight serves for life; Zay interrupted that tradition;
		custom_description = {
			text = "cv_agot_dragonknight_can_fire"
			OR = {
				has_global_variable = agot_startup_fire_councillors
				cp:dragonknight_4 = { has_character_flag = can_fire_dragonknight }
				# has_realm_law = dragonknight_law_2
			}
		}
	}

	# A dragonknight serves for life; Zay interrupted that tradition;
	can_reassign = {
		custom_description = {
			text = "cv_agot_dragonknight_can_fire"
			OR = {
				has_global_variable = agot_startup_fire_councillors
				cp:dragonknight_4 = { has_character_flag = can_fire_dragonknight }
				# has_realm_law = dragonknight_law_2
			}
		}
	}
	valid_position = {
		can_have_dragonknight = yes
	}
	valid_character = {
		exists = root.liege_or_court_owner
		can_be_dragonknight_trigger = { COURT_OWNER = root.liege_or_court_owner }
		has_trait = dragonknight

	}

	on_get_position = {
		cv_agot_on_get_dragonknight = yes
	}

	on_lose_position = {
		cv_agot_on_fired_from_dragonknight = yes
	}

	on_fired_from_position = {
		cv_agot_on_fired_from_dragonknight = yes
	}
	portrait_animation = kingsguard
}

dragonknight_5 = { # 6 of them
	name = {
		desc =  dragonknight_name
	}

	tooltip = game_concept_dragonknight_desc

	skill = prowess

	modifier = {
		name = dragonknight_modifier
		monthly_prestige = 0.5
		monthly_dynasty_prestige = 0.5
	}

	can_fire = { # A dragonknight serves for life; Zay interrupted that tradition;
		custom_description = {
			text = "cv_agot_dragonknight_can_fire"
			OR = {
				has_global_variable = agot_startup_fire_councillors
				cp:dragonknight_5 = { has_character_flag = can_fire_dragonknight }
				# has_realm_law = dragonknight_law_2
			}
		}
	}

	can_reassign = {
		custom_description = {
			text = "cv_agot_dragonknight_can_fire"
			OR = {
				has_global_variable = agot_startup_fire_councillors
				cp:dragonknight_5 = { has_character_flag = can_fire_dragonknight }
				# has_realm_law = dragonknight_law_2
			}
		}
	}
	valid_position = {
		can_have_dragonknight = yes
	}
	valid_character = {
		exists = root.liege_or_court_owner
		can_be_dragonknight_trigger = { COURT_OWNER = root.liege_or_court_owner }
		has_trait = dragonknight

	}

	on_get_position = {
		cv_agot_on_get_dragonknight = yes
	}

	on_lose_position = {
		cv_agot_on_fired_from_dragonknight = yes
	}

	on_fired_from_position = {
		cv_agot_on_fired_from_dragonknight = yes
	}
	portrait_animation = kingsguard
}

dragonknight_6 = { # 6 of them
	skill = prowess

	name = {
		desc =  dragonknight_name
	}

	tooltip = game_concept_dragonknight_desc

	modifier = {
		name = dragonknight_modifier
		monthly_prestige = 0.5
		monthly_dynasty_prestige = 0.5
	}
	can_fire = { # A dragonknight serves for life; Zay interrupted that tradition;
		custom_description = {
			text = "cv_agot_dragonknight_can_fire"
			OR = {
				has_global_variable = agot_startup_fire_councillors
				cp:dragonknight_6 = { has_character_flag = can_fire_dragonknight }
				# has_realm_law = dragonknight_law_2
			}
		}
	}
	can_reassign = {
		custom_description = {
			text = "cv_agot_dragonknight_can_fire"
			OR = {
				has_global_variable = agot_startup_fire_councillors
				cp:dragonknight_6 = { has_character_flag = can_fire_dragonknight }
				# has_realm_law = dragonknight_law_2
			}
		}
	} # A dragonknight serves for life; Zay interrupted that tradition;
	valid_position = {
		can_have_dragonknight = yes
	}
	valid_character = {
		exists = root.liege_or_court_owner
		can_be_dragonknight_trigger = { COURT_OWNER = root.liege_or_court_owner }
		has_trait = dragonknight

	}

	on_get_position = {
		cv_agot_on_get_dragonknight = yes
	}

	on_lose_position = {
		cv_agot_on_fired_from_dragonknight = yes
	}

	on_fired_from_position = {
		cv_agot_on_fired_from_dragonknight = yes
	}
	portrait_animation = kingsguard
}