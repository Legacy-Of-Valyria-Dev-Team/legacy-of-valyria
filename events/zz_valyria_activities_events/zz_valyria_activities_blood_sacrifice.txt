namespace = valyria_blood_sacrifices
scripted_effect grand_rite_good_outcome = {
	scope:activity = {
		every_attending_character = {
			limit = { NOT = { this = root } }
			custom = every_grand_rite_participant
			add_opinion = {
				target = root
				modifier = impressed_opinion
				opinion = 20
			}
		}
	}
}

scripted_effect grand_rite_poor_outcome = {
	scope:activity = {
		every_attending_character = {
			limit = { NOT = { this = root } }
			custom = every_grand_rite_participant
			add_opinion = {
				target = root
				modifier = disappointed_opinion
				opinion = -15
			}
		}
	}
	add_stress = minor_stress_gain
}

valyria_blood_sacrifices.1 = { #by Mathilda Bjarnehed
	type = activity_event
	title = valyria_blood_sacrifices.1.t
	desc = valyria_blood_sacrifices.1.desc
	theme = witchcraft
	override_background = {
		reference = bp1_bonfire
	}
	left_portrait = root

	immediate = {
		save_scope_as = host
		capital_province = { save_scope_as = background_wilderness_scope } 
	}

	#Read old scroll
	option = {
		name = valyria_blood_sacrifices.1.a

		duel = {
			skill = learning
			value = high_skill_rating
			10 = {
				desc = valyria_blood_sacrifices.1.a.great
				compare_modifier = {
					value = scope:duel_value
					multiplier = 5
				}
				scope:host = {
					add_character_flag = chosen_of_the_red_comet
				}
				show_as_tooltip = { grand_rite_good_outcome = yes }
			}
			90 = {	
				desc = valyria_blood_sacrifices.1.a.poor
				compare_modifier = {
					value = scope:duel_value
					multiplier = -5
				}
				min = 10
				save_scope_value_as = {
					name = grand_rite_ceremony_outcome
					value = flag:poor_translation
				}
				show_as_tooltip = { grand_rite_poor_outcome = yes }
			}
		}
	}

	#Use some tricks


	after = {
		scope:host = {
			save_scope_as = blotter
			random_prisoner = {
				limit = {
					has_character_modifier = gruesome_festivals_designated_sacrifice_fp1_modifier
				}
				save_scope_as = unlucky_guest
			}
			
			if = { 
				limit = { 
					has_character_flag = chosen_of_the_red_comet
				}
				remove_character_flag = chosen_of_the_red_comet
				if = { 
					limit = { 
						has_trait = born_under_a_red_comet
					}
					add_trait_xp = { 
						trait = born_under_a_red_comet 
						track = chosen_of_the_heavens
						value = 5
					}
				}
				else = { 
					add_trait_force_tooltip = born_under_a_red_comet
				}
			}
		}
		scope:activity = {
			add_activity_log_entry = {
				key = gruesome_festival_immediate_log
				score = 1000
				show_in_conclusion = yes
				character = root 
				# Piety based on value calculated from the selected activity option 
				activity_host = {
					if = {
						limit = { exists = var:gf_piety_value }
						add_piety = var:gf_piety_value
						remove_variable = gf_piety_value
					}
				}
				## Big RIP, scope:unlucky_guest.
				if = {
					limit = { exists = scope:unlucky_guest }
					# Sort opinions and kinslaying.
					add_kinslayer_trait_or_nothing_effect = { VICTIM = scope:unlucky_guest}
					execute_opinion_effect = {
						VICTIM = scope:unlucky_guest
						EXECUTIONER = scope:blotter
					}
					# Are you HumSac'ing the HoF of a faith that doesn't practice HumSac?
					## We hide this, since it's too late for you to do anything about now and it's more fun/terrifying to find out about it *after* the sacrifice.
					hidden_effect = {
						humsacd_a_hof_effect = {
							SACRIFICER = scope:blotter
							SACRIFICED_HOF = scope:unlucky_guest
						}
					}
					## And are you actually humsac'ing your *OWN* HoF?
					if = {
						limit = { scope:blotter.faith.religious_head = scope:unlucky_guest }
						# Inform players that they're an abysmal, abysmal faith adherent.
						every_player = {
							limit = {
								NOT = { this = scope:blotter }
								faith = scope:unlucky_guest.faith
							}
							trigger_event = fp1_other_decisions.0023
						}
						# Update scope:blotter's HumSac'd HoFs kill tally manually, since we're not going through the usual effect.
						add_to_variable_list = {
							name = humsacd_hofs
							target = scope:unlucky_guest.faith
						}
						# And tell scope:blotter they dun goofed.
						trigger_event = {
							id = fp1_other_decisions.0024
							# We give it a day's delay, since they _might_ have taken a conversion option in the event itself, in which case the follow-up event is invalid.
							days = 1
						}
					}
					# How exactly do they die?
					scope:unlucky_guest = {
						death = {
							killer = scope:blotter
							death_reason = death_sacrificed_to_gods
						}
					}
				}
			}
			every_attending_character = {
				if = {
					limit = {
						scope:unlucky_guest = {
							agot_has_dragonblood_heritage = yes
						}
					}
					zz_valyria_mana_gain = {
						MANAGAIN = 9 
					}
				}
				else ={
					zz_valyria_mana_gain = {
						MANAGAIN = 3
					}
				}
			}
		}
	}
}