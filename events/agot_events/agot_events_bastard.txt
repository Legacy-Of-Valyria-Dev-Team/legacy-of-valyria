namespace = agot_events_bastard
################################################
# Handlers for royal bastard events and associated decisions
# 0900-0949: Managing secret of bastardry
# 0950-0969: Managing announcement
# 0970-0999: Managing demand responses / war
# 1000-1019: Managing peaceful outcomes to revelation
################################################

agot_events_bastard.0900 = { # agot_expose_true_parentage_decision - Hidden handler
	hidden = yes
	trigger = {
		scope:heritage_secret.secret_target = {
			NOT = { has_character_flag = awaiting_bastardry_result } # to prevent double calls if multiple people reveal within a few days of each other
		}
	}
	immediate = {
		scope:heritage_secret = {
			secret_target = {
				save_scope_as = reveal_scope
				mother ?= { save_scope_as = real_mother } # Will be overwritten if not true
				real_mother ?= { save_scope_as = real_mother }
				real_father = { save_scope_as = real_father }
			}
		}
		scope:reveal_scope = {
			add_character_flag = royal_bastard
			add_character_flag = awaiting_bastardry_result
			if = { # Is parent
				limit = {
					OR = {
						father = root
						mother = root
					}
				}
				root = {
					save_scope_as = parent
					trigger_event = agot_events_bastard.0901 # 'Parent'
				}
			}
			else_if = { # Is employer
				limit = {
					employer = root
				}
				root = {
					save_scope_as = employer
					trigger_event = agot_events_bastard.0912 # Employer
				}
			}
			else = { # Is someone else
				root = {
					save_scope_as = sharer
					trigger_event = agot_events_bastard.0903 # Non-parent
				}
			}
			trigger_event = { # Maintainance if this lasts weirdly long
				id = agot_events_bastard.1019
				days = 365
			}
		}
	}
}

agot_events_bastard.0901 = { # Reveal true parentage to child by decision by parent
	type = character_event
	title = agot_bastard_event.0901.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					this = character:Stark_3
					scope:reveal_scope = {
						is_character_stark_7 = yes
					}
				}
				desc = agot_bastard_event.0901.desc.jon
			}
			desc = agot_bastard_event.0901.desc
		}
	}

	theme = family
	left_portrait = root
	right_portrait = scope:reveal_scope

	option = { # I shall tell them
		name = {
			trigger = {
				this = character:Stark_3
				scope:reveal_scope = {
					is_character_stark_7 = yes
				}
			}
			text = agot_bastard_event.0901.a.jon
		}
		name = {
			trigger = {
				NOT = {
					this = character:Stark_3
					scope:reveal_scope = {
						is_character_stark_7 = yes
					}
				}
			}
			text = agot_bastard_event.0901.a
		}
		flavor = agot_bastard_event.reveal_warning
		custom_tooltip = agot_bastard_event.reveal_tt
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = honest
			}
			modifier = {
				add = 50
				has_trait = compassionate
			}
		}
		if = { # Do they know already?
			limit = {
				scope:reveal_scope = {
					knows_self_royal_bastard_secret = yes
				}
			}
			trigger_event = {
				id = agot_events_bastard.0905 # They know event
				days = { 2 7 }
			}
		}
		else = {
			scope:reveal_scope = {
				trigger_event = {
					id = agot_events_bastard.0902 # They don't know event
					days = { 2 7 }
				}
			}
		}
	}

	option = { # I shall not
		name = {
			trigger = {
				this = character:Stark_3
				scope:reveal_scope = {
					is_character_stark_7 = yes
				}
			}
			text = agot_bastard_event.0901.b.jon
		}
		name = {
			trigger = {
				NOT = {
					this = character:Stark_3
					scope:reveal_scope = {
						is_character_stark_7 = yes
					}
				}
			}
			text = agot_bastard_event.0901.b
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = craven
			}
			modifier = {
				add = 50
				has_trait = sadistic
			}
		}
		remove_character_flag = told_true_parentage
		scope:reveal_scope = {
			remove_character_flag = awaiting_bastardry_result
		}
	}
}

agot_events_bastard.0902 = { # Grown up child responds to parent
	type = character_event
	title = agot_bastard_event.0902.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:parent = character:Stark_3
					is_character_stark_7 = yes
				}
				desc = agot_bastard_event.0902.desc.jon
			}
			triggered_desc = {
				trigger = {
					scope:parent = {
						is_male = yes
					}
				}
				desc = agot_bastard_event.0902.desc.father
			}
			desc = agot_bastard_event.0902.desc.mother
		}
	}

	theme = family
	left_portrait = scope:parent
	right_portrait = {
		character = root
		animation = fear
	}

	immediate = {
		scope:heritage_secret = {
			reveal_to = root
		}
	}

	option = { # Accept truth now
		name = agot_bastard_event.0902.a
		flavor = agot_bastard_event.reveal_warning
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = honest
			}
			modifier = {
				add = 50
				has_trait = brave
			}
		}
		scope:parent = {
			trigger_event = agot_events_bastard.0952
		}
		save_scope_as = revealer
		trigger_event = {
			id = agot_events_bastard.0950
			days = { 7 14 }
		}
	}

	option = { # Now is not the time
		name = agot_bastard_event.0902.b
		flavor = agot_bastard_event.0902.b.flavor
		scope:parent = {
			trigger_event = agot_events_bastard.0906
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = craven
			}
		}
	}
}

agot_events_bastard.0903 = { # Reveal true parentage to child by decision by non-parent
	type = character_event
	title = agot_bastard_event.0903.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					this = character:Reed_1
					scope:reveal_scope = {
						is_character_stark_7 = yes
					}
				}
				desc = agot_bastard_event.0903.desc.jon
			}
			desc = agot_bastard_event.0903.desc
		}
	}

	theme = intrigue
	left_portrait = root
	right_portrait = scope:reveal_scope

	option = { # I shall tell them
		name = agot_bastard_event.0903.a
		flavor = agot_bastard_event.reveal_warning
		custom_tooltip = agot_bastard_event.reveal_tt
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = honest
			}
			modifier = {
				add = 50
				has_trait = compassionate
			}
		}
		if = { # Do they know already?
			limit = {
				scope:reveal_scope = {
					knows_self_royal_bastard_secret = yes
				}
			}
			scope:reveal_scope = {
				trigger_event = {
					id = agot_events_bastard.0907 # They know event
					days = { 14 32 }
				}
			}
		}
		else = {
			scope:reveal_scope = {
				trigger_event = {
					id = agot_events_bastard.0904 # They don't event
					days = { 14 32 }
				}
			}
		}
	}

	option = { # I shall tell all of Westeros
		name = agot_bastard_event.0903.b
		flavor = agot_bastard_event.reveal_warning_letter
		ai_chance = {
			base = 25
			modifier = {
				add = 25
				has_trait = arrogant
			}
			modifier = {
				add = 50
				has_trait = sadistic
			}
		}
		scope:reveal_scope.mother ?= { # Only harmful if they know
			if = {
				limit = {
					OR = {
						any_known_secret = { # Knows Jon Snow secret
							secret_type = secret_agot_disputed_heritage
							secret_target = {
								real_paternal_held_iron_throne_claim = yes
								this = scope:reveal_scope
							}
						}
						any_known_secret = { # Knows other claiment secret
							secret_type = secret_disputed_heritage
							secret_target = {
								real_paternal_held_iron_throne_claim = yes
								this = scope:reveal_scope
							}
						}
						any_known_secret = { # Knows other claiment unmarried secret
							secret_type = secret_unmarried_illegitimate_child
							secret_target = {
								real_paternal_held_iron_throne_claim = yes
								this = scope:reveal_scope
							}
						}
					}
				}
				trigger_event = {
					id = agot_events_bastard.0954
					days = { 2 6 }
				}
			}
		}
		scope:reveal_scope.father ?= {
			if = {
				limit = {
					OR = {
						any_known_secret = { # Knows Jon Snow secret
							secret_type = secret_agot_disputed_heritage
							secret_target = {
								real_paternal_held_iron_throne_claim = yes
								this = scope:reveal_scope
							}
						}
						any_known_secret = { # Knows other claiment secret
							secret_type = secret_disputed_heritage
							secret_target = {
								real_paternal_held_iron_throne_claim = yes
								this = scope:reveal_scope
							}
						}
						any_known_secret = { # Knows other claiment unmarried secret
							secret_type = secret_unmarried_illegitimate_child
							secret_target = {
								real_paternal_held_iron_throne_claim = yes
								this = scope:reveal_scope
							}
						}
					}
				}
				trigger_event = {
					id = agot_events_bastard.0954
					days = { 2 6 }
				}
			}
		}
		save_scope_as = revealer
		scope:reveal_scope = {
			trigger_event = {
				id = agot_events_bastard.0950
				days = { 7 14 }
			}
			add_opinion = {
				modifier = revealed_my_royal_secret_without
				target = root
			}
		}
	}

	option = { # I shall not
		name = agot_bastard_event.0903.c
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = craven
			}
		}
		remove_character_flag = told_true_parentage
		scope:reveal_scope = {
			remove_character_flag = awaiting_bastardry_result
		}
	}
}

agot_events_bastard.0904 = { # Grown up child responds to letter
	type = character_event
	title = agot_bastard_event.0904.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					has_trait = blind
				}
				desc = agot_bastard_event.0904.desc.blind
			}
			desc = agot_bastard_event.0904.desc
		}
	}

	theme = intrigue
	left_portrait = scope:sharer
	right_portrait = {
		character = root
		animation = fear
	}

	immediate = {
		scope:sharer = {
			add_hook = {
				type = favor_hook
				target = root
			}
		}
		scope:heritage_secret = {
			reveal_to = root
		}
		if = {
			limit = {
				has_trait = blind
			}
			random_courtier = {
				limit = {
					NOT = { has_trait = blind }
					age >= 15
				}
				save_scope_as = courtier
			}
			scope:heritage_secret = {
				reveal_to = scope:courtier
			}
		}

		father = { save_scope_as = father } #Loc Scope
	}

	option = { # Accept truth now
		name = agot_bastard_event.0904.a
		flavor = agot_bastard_event.reveal_warning
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = honest
			}
			modifier = {
				add = 50
				has_trait = brave
			}
		}
		scope:reveal_scope.mother ?= {
			trigger_event = {
				id = agot_events_bastard.0953
				days = { 2 6 }
			}
		}
		scope:reveal_scope.father ?= {
			trigger_event = {
				id = agot_events_bastard.0953
				days = { 2 6 }
			}
		}
		scope:sharer ={
			trigger_event = {
				id = agot_events_bastard.0955
				days = { 2 6 }
			}
		}
		save_scope_as = revealer
		trigger_event = {
			id = agot_events_bastard.0950
			days = { 7 14 }
		}
	}

	option = { # I shall descuss it with 'father'
		name = agot_bastard_event.0904.b
		flavor = agot_bastard_event.0904.b.flavor
		trigger = {
			is_ai = yes
			root.father ?= {
				is_alive = yes
				NOT = {
					this = scope:real_father
				}
				OR = { # Father knows their secret
					any_known_secret = {
						secret_type = secret_agot_disputed_heritage
						secret_target = {
							real_paternal_held_iron_throne_claim = yes
							this = scope:reveal_scope
						}
					}
					any_known_secret = {
						secret_type = secret_disputed_heritage
						secret_target = {
							real_paternal_held_iron_throne_claim = yes
							this = scope:reveal_scope
						}
					}
					any_known_secret = {
						secret_type = secret_unmarried_illegitimate_child
						secret_target = {
							real_paternal_held_iron_throne_claim = yes
							this = scope:reveal_scope
						}
					}
				}
			}
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = family_first
			}
			opinion_modifier = {
				opinion_target = root.father
			}
		}
		root.father = {
			trigger_event = agot_events_bastard.0910
		}
	}

	option = { # Now is not the time
		name = agot_bastard_event.0904.c
		flavor = agot_bastard_event.0904.c.flavor
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = craven
			}
		}
		scope:sharer = {
			trigger_event = {
				id = agot_events_bastard.0909
				months = { 2 4 }
			}
		}
		remove_character_flag = awaiting_bastardry_result
	}

	option = { # This must be kept secret
		name = agot_bastard_event.0904.d
		flavor = agot_bastard_event.0904.d.flavor
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = deceitful
			}
			modifier = {
				add = 50
				has_trait = shy
			}
		}
		scope:sharer = {
			trigger_event = {
				id = agot_events_bastard.0908
				days = { 14 32 }
			}
		}
		remove_character_flag = awaiting_bastardry_result
	}
}

agot_events_bastard.0905 = { # Parent tells child who already knows
	type = character_event
	title = agot_bastard_event.0905.t
	desc = {
		triggered_desc = {
			trigger = {
				OR = {
					this = scope:real_father
					this = scope:real_mother
				}
			}
			desc = agot_bastard_event.0905.desc.actually_parent
		}
		desc = agot_bastard_event.0905.desc
	}

	theme = family
	left_portrait = {
		character = root
		animation = shock
	}
	right_portrait = scope:reveal_scope

	option = { # Now that you know, I shall grant you land
		name = agot_bastard_event.0905.a
		flavor = agot_bastard_event.0905.a.flavor
		trigger = {
			scope:reveal_scope = {
				is_landed = no
			}
			domain_size > 1
			any_directly_owned_province = {
				NOT = {
					this = root.capital_province
					duchy = root.capital_province.duchy
					county = root.primary_title.title_capital_county
					duchy = root.primary_title.title_capital_county.duchy
				}
			}
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = authoritative
			}
		}
		if = { # If I have a title they claim, give it to them
			limit = {
				any_directly_owned_province = {
					NOT = {
						this = root.capital_province
						duchy = root.capital_province.duchy
						county = root.primary_title.title_capital_county
						duchy = root.primary_title.title_capital_county.duchy
					}
					county = {
						any_claimant = {
							this = scope:reveal_scope
						}
					}
				}
			}
			every_directly_owned_province = {
				limit = { # Not my capital, in capital duchy, or de jure capital/capital duchy, and they have a claim
					NOT = {
						this = root.capital_province
						duchy = root.capital_province.duchy
						county = root.primary_title.title_capital_county
						duchy = root.primary_title.title_capital_county.duchy
					}
					county = {
						any_claimant = {
							this = scope:reveal_scope
						}
					}
				}
				add_to_list = giftable_provinces
			}
		}
		else = { # If I have more than one county, give county outside of duchy
			every_directly_owned_province = {
				limit = { # Not my capital, in capital duchy, or de jure capital/capital duchy
					NOT = {
						this = root.capital_province
						duchy = root.capital_province.duchy
						county = root.primary_title.title_capital_county
						duchy = root.primary_title.title_capital_county.duchy
					}
				}
				add_to_list = giftable_provinces
			}
		}
		#TODO: Find a sensible title to give them by revocation
		random_in_list = {
			list = giftable_provinces
			save_scope_as = gifted_province
		}
		every_in_list = {
			list = giftable_provinces
			limit = { duchy = scope:gifted_province.duchy }
			scope:reveal_scope = {
				get_title = prev.county
			}
		}
		scope:reveal_scope = {
			get_title = scope:gifted_province.duchy
			remove_character_flag = awaiting_bastardry_result
		}
	}

	option = { # We MUST tell all of Westeros!
		name = agot_bastard_event.0905.b
		flavor = agot_bastard_event.reveal_warning_letter
		trigger = {
			scope:reveal_scope = { # Only AI should be overridden
				is_ai = yes
			}
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = honest
			}
			modifier = {
				add = 50
				has_trait = brave
			}
		}
		save_scope_as = revealer
		scope:reveal_scope = {
			trigger_event = {
				id = agot_events_bastard.0950
				days = { 7 14 }
			}
		}
	}

	option = { # Then you must join the Nights Watch to escape
		name = agot_bastard_event.0905.c
		trigger = {
			scope:reveal_scope = {
				is_ai = yes # Only AI should be overridden
				NOT = {
					has_trait = nightswatch # Is not nightswatch
				}
				is_male = yes
			}
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = craven
			}
		}
		agot_send_to_nightswatch_effect = {
			ACTOR = root
			NIGHTSWATCH_CANDIDATE = scope:reveal_scope
		}
		scope:reveal_scope = {
			remove_character_flag = awaiting_bastardry_result
		}
	}

	option = { # It is up to them
		name = agot_bastard_event.0905.d
		ai_chance = {
			base = 0
			opinion_modifier = {
				opinion_target = scope:reveal_scope
			}
		}
		scope:reveal_scope = {
			remove_character_flag = awaiting_bastardry_result
		}
	}
}

agot_events_bastard.0906 = { # Parent responds to childs decision to keep hidden
	type = character_event
	title = agot_bastard_event.0906.t
	desc = {
		desc = agot_bastard_event.0906.desc.open
		triggered_desc = {
			trigger = {
				NOT = { root = scope:reveal_scope.real_father }
				NOT = { root = scope:reveal_scope.real_mother }
			}
			desc = agot_bastard_event.0906.desc.fake
		}
		desc = agot_bastard_event.0906.desc.close
	}

	theme = family
	left_portrait = root
	right_portrait = scope:reveal_scope

	option = { # Now that you know, I shall grant you land
		name = agot_bastard_event.0906.a
		flavor = agot_bastard_event.0906.a.flavor
		trigger = {
			scope:reveal_scope = {
				is_landed = no
				agot_can_be_ruler = yes
			}
			domain_size > 1
			any_directly_owned_province = {
				NOT = {
					this = root.capital_province
					duchy = root.capital_province.duchy
					county = root.primary_title.title_capital_county
					duchy = root.primary_title.title_capital_county.duchy
				}
			}
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = authoritative
			}
		}
		if = { # If I have a title they claim, give it to them
			limit = {
				any_directly_owned_province = {
					NOT = {
						this = root.capital_province
						duchy = root.capital_province.duchy
						county = root.primary_title.title_capital_county
						duchy = root.primary_title.title_capital_county.duchy
					}
					county = {
						any_claimant = {
							this = scope:reveal_scope
						}
					}
				}
			}
			every_directly_owned_province = {
				limit = { # Not my capital, in capital duchy, or de jure capital/capital duchy, and they have a claim
					NOT = {
						this = root.capital_province
						duchy = root.capital_province.duchy
						county = root.primary_title.title_capital_county
						duchy = root.primary_title.title_capital_county.duchy
					}
					county = {
						any_claimant = {
							this = scope:reveal_scope
						}
					}
				}
				add_to_list = giftable_provinces
			}
		}
		else = { # If I have more than one county, give county outside of duchy
			every_directly_owned_province = {
				limit = { # Not my capital, in capital duchy, or de jure capital/capital duchy
					NOT = {
						this = root.capital_province
						duchy = root.capital_province.duchy
						county = root.primary_title.title_capital_county
						duchy = root.primary_title.title_capital_county.duchy
					}
				}
				add_to_list = giftable_provinces
			}
		}
		#TODO: Find a sensible title to give them by revocation
		random_in_list = {
			list = giftable_provinces
			save_scope_as = gifted_province
		}
		every_in_list = {
			list = giftable_provinces
			limit = { duchy = scope:gifted_province.duchy }
			scope:reveal_scope = {
				get_title = prev.county
			}
		}
		scope:reveal_scope = {
			get_title = scope:gifted_province.duchy
			remove_character_flag = awaiting_bastardry_result
		}
	}

	option = { # We must tell all of Westeros!
		name = agot_bastard_event.0906.b
		flavor = agot_bastard_event.reveal_warning_letter
		trigger = {
			scope:reveal_scope = { # Only AI should be overridden
				is_ai = yes
			}
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = honest
			}
			modifier = {
				add = 50
				has_trait = brave
			}
			modifier = {
				add = -50
				has_trait = compassionate
			}
		}
		save_scope_as = revealer
		scope:reveal_scope = {
			trigger_event = {
				id = agot_events_bastard.0950
				days = { 7 14 }
			}
		}
	}

	option = { # Then you must join the Nights Watch to escape
		name = agot_bastard_event.0906.c
		trigger = {
			scope:reveal_scope = {
				is_ai = yes # Only AI should be overridden
				NOT = {
					has_trait = nightswatch # Is not nightswatch
				}
				is_male = yes
			}
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = craven
			}
		}
		agot_send_to_nightswatch_effect = {
			ACTOR = root
			NIGHTSWATCH_CANDIDATE = scope:reveal_scope
		}
		scope:reveal_scope = {
			remove_character_flag = awaiting_bastardry_result
		}
	}

	option = { # It is up to them
		name = agot_bastard_event.0906.d
		ai_chance = {
			base = 0
			opinion_modifier = {
				opinion_target = scope:reveal_scope
			}
		}
		scope:reveal_scope = {
			remove_character_flag = awaiting_bastardry_result
		}
	}
}

agot_events_bastard.0907 = { # Grown up child responds to letter (already knew)
	type = character_event
	title = agot_bastard_event.0907.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					has_trait = blind
				}
				desc = agot_bastard_event.0907.desc.blind
			}
			desc = agot_bastard_event.0907.desc
		}
	}

	theme = intrigue
	left_portrait = scope:sharer
	right_portrait = root

	immediate = {
		if = {
			limit = {
				has_trait = blind
			}
			random_courtier = {
				limit = {
					NOT = { has_trait = blind }
					age >= 15
				}
				save_scope_as = courtier
			}
			scope:heritage_secret = {
				reveal_to = scope:courtier
			}
		}

		father = { save_scope_as = father } #Loc Scope
	}


	option = { # Accept truth now
		name = agot_bastard_event.0907.a
		flavor = agot_bastard_event.reveal_warning
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = honest
			}
			modifier = {
				add = 50
				has_trait = brave
			}
		}
		scope:reveal_scope.mother ?= {
			trigger_event = {
				id = agot_events_bastard.0953
				days = { 2 6 }
			}
		}
		scope:reveal_scope.father ?= {
			trigger_event = {
				id = agot_events_bastard.0953
				days = { 2 6 }
			}
		}
		scope:sharer = {
			trigger_event = {
				id = agot_events_bastard.0955
				days = { 2 6 }
			}
		}
		save_scope_as = revealer
		trigger_event = {
			id = agot_events_bastard.0950
			days = { 7 14 }
		}
	}

	option = { # I shall descuss it with 'father'
		name = agot_bastard_event.0907.b
		flavor = agot_bastard_event.0907.b.flavor
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = family_first
			}
			opinion_modifier = {
				opinion_target = father
			}
		}
		trigger = {
			is_ai = yes
			root.father ?= {
				is_alive = yes
				NOT = {
					this = scope:real_father
				}
				OR = { # They know
					any_known_secret = {
						secret_type = secret_agot_disputed_heritage
						secret_target = {
							real_paternal_held_iron_throne_claim = yes
							this = scope:reveal_scope
						}
					}
					any_known_secret = {
						secret_type = secret_disputed_heritage
						secret_target = {
							real_paternal_held_iron_throne_claim = yes
							this = scope:reveal_scope
						}
					}
					any_known_secret = {
						secret_type = secret_unmarried_illegitimate_child
						secret_target = {
							real_paternal_held_iron_throne_claim = yes
							this = scope:reveal_scope
						}
					}
				}
			}
		}
		root.father = {
			trigger_event = agot_events_bastard.0910
		}
	}

	option = { # Now is not the time
		name = agot_bastard_event.0907.c
		flavor = agot_bastard_event.0907.c.flavor
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = craven
			}
		}
		scope:sharer = {
			trigger_event = {
				id = agot_events_bastard.0909
				months = { 2 4 }
			}
		}
		remove_character_flag = awaiting_bastardry_result
	}

	option = { # This must be kept secret
		name = agot_bastard_event.0907.d
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = deceitful
			}
			modifier = {
				add = 50
				has_trait = shy
			}
		}
		scope:sharer = {
			trigger_event = {
				id = agot_events_bastard.0908
				days = { 14 32 }
			}
		}
		remove_character_flag = awaiting_bastardry_result
	}
}

agot_events_bastard.0908 = { # Sharer responds to letter asking to keep secret
	type = character_event
	title = agot_bastard_event.0908.t
	desc = agot_bastard_event.0908.desc

	theme = intrigue
	left_portrait = root
	right_portrait = scope:reveal_scope

	option = { # The world must know!
		name = agot_bastard_event.0908.a
		flavor = agot_bastard_event.reveal_warning_letter
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = honest
			}
			modifier = {
				add = 25
				has_trait = callous
			}
			modifier = {
				add = 10
				has_trait = stubborn
			}
			modifier = {
				add = 50
				has_trait = sadistic
			}
			modifier = {
				add = 10
				has_trait = arbitrary
			}
		}
		scope:reveal_scope.mother ?= {
			add_opinion = {
				modifier = revealed_my_royal_secret_against
				target = root
			}
			trigger_event= {
				id = agot_events_bastard.0954
				days = { 2 6 }
			}
		}
		scope:reveal_scope.father ?= {
			add_opinion = {
				modifier = revealed_my_royal_secret_against
				target = root
			}
			trigger_event = {
				id = agot_events_bastard.0954
				days = { 2 6 }
			}
		}
		save_scope_as = revealer
		scope:reveal_scope = {
			trigger_event = {
				id = agot_events_bastard.0950
				days = { 7 14 }
			}
			add_opinion = {
				modifier = revealed_my_royal_secret_against
				target = root
			}
			add_character_flag = awaiting_bastardry_result
		}
	}

	option = { # I shall respect their wishes
		name = agot_bastard_event.0908.b
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = compassionate
			}
			modifier = {
				add = 10
				has_trait = humble
			}
			modifier = {
				add = 50
				has_trait = shy
			}
			modifier = {
				add = 10
				has_trait = deceitful
			}
		}

		scope:reveal_scope = {
			add_opinion = {
				modifier = grateful_opinion
				opinion = 30
				target = root
			}
		}
	}
}

agot_events_bastard.0909 = { # Sharer does not recieve reply
	type = character_event
	title = agot_bastard_event.0909.t
	desc = agot_bastard_event.0909.desc

	theme = intrigue
	left_portrait = root
	right_portrait = scope:reveal_scope

	option = { # The world must know!
		name = agot_bastard_event.0909.a
		flavor = agot_bastard_event.reveal_warning_letter
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = honest
			}
			modifier = {
				add = 25
				has_trait = callous
			}
			modifier = {
				add = 10
				has_trait = stubborn
			}
			modifier = {
				add = 25
				has_trait = sadistic
			}
			modifier = {
				add = 10
				has_trait = arbitrary
			}
			modifier = {
				add = 50
				has_trait = arrogant
			}
		}
		scope:reveal_scope.mother ?= {
			add_opinion = {
				modifier = revealed_my_royal_secret_against
				target = root
			}
			trigger_event = {
				id = agot_events_bastard.0954
				days = { 2 6 }
			}
		}
		scope:reveal_scope.father ?= {
			add_opinion = {
				modifier = revealed_my_royal_secret_against
				target = root
			}
			trigger_event = {
				id = agot_events_bastard.0954
				days = { 2 6 }
			}
		}
		save_scope_as = revealer
		scope:reveal_scope = {
			trigger_event = {
				id = agot_events_bastard.0950
				days = { 7 14 }
			}
			add_opinion = {
				modifier = revealed_my_royal_secret_against
				target = root
			}
			add_character_flag = awaiting_bastardry_result
		}
	}

	option = { # It is for them to decide
		name = agot_bastard_event.0909.b
		ai_chance = {
			base = 50
			modifier = {
				add = 25
				has_trait = compassionate
			}
			modifier = {
				add = 10
				has_trait = humble
			}
			modifier = {
				add = 50
				has_trait = shy
			}
			modifier = {
				add = 10
				has_trait = deceitful
			}
		}

		scope:reveal_scope = {
			add_opinion = {
				modifier = grateful_opinion
				opinion = 30
				target = root
			}
		}
	}
}

agot_events_bastard.0910 = { # Parent responds to child asking for advice
	type = character_event
	title = agot_bastard_event.0910.t
	desc = agot_bastard_event.0910.desc

	override_icon = {
		reference = "gfx/interface/icons/event_types/type_war.dds"
	}
	theme = war
	left_portrait = root
	right_portrait = {
		character = scope:reveal_scope
		animation = worry
	}

	option = { # You must ask them to keep it secret.
		name = agot_bastard_event.0910.a
		flavor = agot_bastard_event.0910.a.flavor
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = shy
			}
			modifier = {
				add = 50
				has_trait = deceitful
			}
		}
		scope:sharer = {
			trigger_event = {
				id = agot_events_bastard.0908
				days = { 14 32 }
			}
		}
		scope:reveal_scope = {
			remove_character_flag = awaiting_bastardry_result
		}
	}

	option = { # We must now tell all of Westeros
		name = agot_bastard_event.0910.b
		flavor = agot_bastard_event.reveal_warning_letter
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = honest
			}
			modifier = {
				add = 25
				has_trait = brave
			}
		}
		scope:sharer ={
			trigger_event = agot_events_bastard.0955
		}
		save_scope_as = revealer
		scope:reveal_scope = {
			trigger_event = {
				id = agot_events_bastard.0950
				days = { 7 14 }
			}
		}
	}

	option = { # You must join the Nights Watch to escape
		name = agot_bastard_event.0910.c
		trigger = {
			scope:reveal_scope = {
				is_ai = yes # Only AI should be overridden
				NOT = {
					has_trait = nightswatch # Is not nightswatch
				}
				is_male = yes
			}
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 20
				has_trait = humble
			}
			modifier = {
				add = 50
				has_trait = craven
			}
			modifier = {
				add = 25
				has_trait = shy
			}
		}
		agot_send_to_nightswatch_effect = {
			ACTOR = root
			NIGHTSWATCH_CANDIDATE = scope:reveal_scope
		}
		scope:sharer = {
			trigger_event = {
				id = agot_events_bastard.0909
				months = { 2 4 }
			}
		}
		scope:reveal_scope = {
			remove_character_flag = awaiting_bastardry_result
		}
	}
}

agot_events_bastard.0911 = { # Catelyn Tully finds out about Jon and confronts Ned
	type = character_event
	title = agot_bastard_event.0911.t
	desc = agot_bastard_event.0911.desc
	theme = family
	left_portrait = {
		character = character:Stark_3
		animation = shame
	}
	right_portrait = {
		character = character:Tully_4
		animation = disapproval
	}

	immediate = {
		character:Tully_4 = {
			add_opinion = {
				modifier = didnt_trust_me_bastard
				target = character:Stark_3
			}
		}
	}

	option = { # Acknowledge
		name = agot_bastard_event.0911.a
		add_stress = 25
	}
}

agot_events_bastard.0912  = { # Employer shares with courtier
	type = character_event
	title = agot_bastard_event.0912.t
	desc = agot_bastard_event.0912.desc

	theme = family
	left_portrait = root
	right_portrait = scope:reveal_scope

	option = { # I shall tell them
		name = agot_bastard_event.0912.a
		flavor = agot_bastard_event.reveal_warning
		custom_tooltip = agot_bastard_event.reveal_tt
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = honest
			}
			modifier = {
				add = 50
				has_trait = compassionate
			}
		}
		if = { # Do they know already?
			limit = {
				scope:reveal_scope = {
					knows_self_royal_bastard_secret = yes
				}
			}
			scope:reveal_scope = {
				trigger_event = {
					id = agot_events_bastard.0914 # They know event
					days = { 2 7 }
				}
			}
		}
		else = {
			scope:reveal_scope = {
				trigger_event = {
					id = agot_events_bastard.0913 # They don't know event
					days = { 2 7 }
				}
			}
		}
	}

	option = { # I shall not
		name = agot_bastard_event.0912.b
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = craven
			}
			modifier = {
				add = 50
				has_trait = sadistic
			}
		}
		remove_character_flag = told_true_parentage
		scope:reveal_scope = {
			remove_character_flag = awaiting_bastardry_result
		}
	}
}

agot_events_bastard.0913 = { # Courtier reacts to employer
	type = character_event
	title = agot_bastard_event.0913.t
	desc = agot_bastard_event.0913.desc

	theme = family
	left_portrait = scope:parent
	right_portrait = {
		character = root
		animation = fear
	}

	immediate = {
		scope:heritage_secret = {
			reveal_to = root
		}
	}

	option = { # Accept truth now
		name = agot_bastard_event.0913.a
		flavor = agot_bastard_event.reveal_warning
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = honest
			}
			modifier = {
				add = 50
				has_trait = brave
			}
		}
		scope:employer = {
			trigger_event = agot_events_bastard.0915
		}
		save_scope_as = revealer
		trigger_event = {
			id = agot_events_bastard.0950
			days = { 7 14 }
		}
	}

	option = { # Now is not the time
		name = agot_bastard_event.0913.b
		flavor = agot_bastard_event.0913.b.flavor
		scope:employer = {
			trigger_event = agot_events_bastard.0916
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = craven
			}
		}
	}
}

agot_events_bastard.0914 = { # Employer told courtier already knows
	type = character_event
	title = agot_bastard_event.0914.t
	desc = agot_bastard_event.0914.desc

	theme = family
	left_portrait = {
		character = root
		animation = shock
	}
	right_portrait = scope:reveal_scope

	option = { # Now that you know, I shall grant you land
		name = agot_bastard_event.0914.a
		flavor = agot_bastard_event.0914.a.flavor
		trigger = {
			scope:reveal_scope = {
				is_landed = no
				OR = { # only if they share a dynasty
					scope:real_father.dynasty = root.dynasty
					scope:real_mother.dynasty = root.dynasty
				}
			}
			domain_size > 1
			any_directly_owned_province = {
				NOT = {
					this = root.capital_province
					duchy = root.capital_province.duchy
					county = root.primary_title.title_capital_county
					duchy = root.primary_title.title_capital_county.duchy
				}
			}
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = authoritative
			}
		}
		if = { # If I have a title they claim, give it to them
			limit = {
				any_directly_owned_province = {
					NOT = {
						this = root.capital_province
						duchy = root.capital_province.duchy
						county = root.primary_title.title_capital_county
						duchy = root.primary_title.title_capital_county.duchy
					}
					county = {
						any_claimant = {
							this = scope:reveal_scope
						}
					}
				}
			}
			every_directly_owned_province = {
				limit = { # Not my capital, in capital duchy, or de jure capital/capital duchy, and they have a claim
					NOT = {
						this = root.capital_province
						duchy = root.capital_province.duchy
						county = root.primary_title.title_capital_county
						duchy = root.primary_title.title_capital_county.duchy
					}
					county = {
						any_claimant = {
							this = scope:reveal_scope
						}
					}
				}
				add_to_list = giftable_provinces
			}
		}
		else = { # If I have more than one county, give county outside of duchy
			every_directly_owned_province = {
				limit = { # Not my capital, in capital duchy, or de jure capital/capital duchy
					NOT = {
						this = root.capital_province
						duchy = root.capital_province.duchy
						county = root.primary_title.title_capital_county
						duchy = root.primary_title.title_capital_county.duchy
					}
				}
				add_to_list = giftable_provinces
			}
		}
		#TODO: Find a sensible title to give them by revocation
		random_in_list = {
			list = giftable_provinces
			save_scope_as = gifted_province
		}
		every_in_list = {
			list = giftable_provinces
			limit = { duchy = scope:gifted_province.duchy }
			scope:reveal_scope = {
				get_title = prev.county
			}
		}
		scope:reveal_scope = {
			get_title = scope:gifted_province.duchy
			remove_character_flag = awaiting_bastardry_result
		}
	}

	option = { # We MUST tell all of Westeros!
		name = agot_bastard_event.0914.b
		flavor = agot_bastard_event.reveal_warning_letter
		trigger = {
			scope:reveal_scope = { # Only AI should be overridden
				is_ai = yes
			}
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = honest
			}
			modifier = {
				add = 50
				has_trait = brave
			}
		}
		save_scope_as = revealer
		scope:reveal_scope = {
			trigger_event = {
				id = agot_events_bastard.0950
				days = { 7 14 }
			}
		}
	}

	option = { # Then you must join the Nights Watch to escape
		name = agot_bastard_event.0914.c
		trigger = {
			scope:reveal_scope = {
				is_ai = yes # Only AI should be overridden
				NOT = {
					has_trait = nightswatch # Is not nightswatch
				}
				is_male = yes
			}
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = craven
			}
		}
		agot_send_to_nightswatch_effect = {
			ACTOR = root
			NIGHTSWATCH_CANDIDATE = scope:reveal_scope
		}
		scope:reveal_scope = {
			remove_character_flag = awaiting_bastardry_result
		}
	}

	option = { # It is up to them
		name = agot_bastard_event.0914.d
		ai_chance = {
			base = 0
			opinion_modifier = {
				opinion_target = scope:reveal_scope
			}
		}
		scope:reveal_scope = {
			remove_character_flag = awaiting_bastardry_result
		}
	}
}

# NOTE: It was either remap all the events or put it out of order, sorry :/ TODO: remap to relocate
agot_events_bastard.0915 = { # Employer is notified of sharing with realm
	type = character_event
	title = agot_bastard_event.0915.t
	desc = agot_bastard_event.0915.desc

	override_icon = {
		reference = "gfx/interface/icons/event_types/type_war.dds"
	}
	theme = family
	left_portrait = root
	right_portrait = scope:reveal_scope

	immediate = {
		title:e_the_iron_throne.holder = {
			save_scope_as = ruler_scope
		}
	}

	option = {
		name = agot_bastard_event.realm_ruler_react_wait
	}
}

agot_events_bastard.0916 = { # Employer reacts to keeping hidden
	type = character_event
	title = agot_bastard_event.0916.t
	desc = agot_bastard_event.0916.desc

	theme = family
	left_portrait = root
	right_portrait = scope:reveal_scope

	option = { # Now that you know, I shall grant you land
		name = agot_bastard_event.0916.a
		flavor = agot_bastard_event.0916.a.flavor
		trigger = {
			scope:reveal_scope = {
				is_landed = no
				OR = { # only if they share a relative
					scope:real_father.dynasty = root.dynasty
					scope:real_mother.dynasty = root.dynasty
				}
			}
			domain_size > 1
			any_directly_owned_province = {
				NOT = {
					this = root.capital_province
					duchy = root.capital_province.duchy
					county = root.primary_title.title_capital_county
					duchy = root.primary_title.title_capital_county.duchy
				}
			}
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = authoritative
			}
		}
		if = { # If I have a title they claim, give it to them
			limit = {
				any_directly_owned_province = {
					NOT = {
						this = root.capital_province
						duchy = root.capital_province.duchy
						county = root.primary_title.title_capital_county
						duchy = root.primary_title.title_capital_county.duchy
					}
					county = {
						any_claimant = {
							this = scope:reveal_scope
						}
					}
				}
			}
			every_directly_owned_province = {
				limit = { # Not my capital, in capital duchy, or de jure capital/capital duchy, and they have a claim
					NOT = {
						this = root.capital_province
						duchy = root.capital_province.duchy
						county = root.primary_title.title_capital_county
						duchy = root.primary_title.title_capital_county.duchy
					}
					county = {
						any_claimant = {
							this = scope:reveal_scope
						}
					}
				}
				add_to_list = giftable_provinces
			}
		}
		else = { # If I have more than one county, give county outside of duchy
			every_directly_owned_province = {
				limit = { # Not my capital, in capital duchy, or de jure capital/capital duchy
					NOT = {
						this = root.capital_province
						duchy = root.capital_province.duchy
						county = root.primary_title.title_capital_county
						duchy = root.primary_title.title_capital_county.duchy
					}
				}
				add_to_list = giftable_provinces
			}
		}
		#TODO: Find a sensible title to give them by revocation
		random_in_list = {
			list = giftable_provinces
			save_scope_as = gifted_province
		}
		every_in_list = {
			list = giftable_provinces
			limit = { duchy = scope:gifted_province.duchy }
			scope:reveal_scope = {
				get_title = prev.county
			}
		}
		scope:reveal_scope = {
			get_title = scope:gifted_province.duchy
			remove_character_flag = awaiting_bastardry_result
		}
	}

	option = { # We must tell all of Westeros!
		name = agot_bastard_event.0916.b
		flavor = agot_bastard_event.reveal_warning_letter
		trigger = {
			scope:reveal_scope = { # Only AI should be overridden
				is_ai = yes
			}
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = honest
			}
			modifier = {
				add = 50
				has_trait = brave
			}
			modifier = {
				add = -50
				has_trait = compassionate
			}
		}
		save_scope_as = revealer
		scope:reveal_scope = {
			trigger_event = {
				id = agot_events_bastard.0950
				days = { 7 14 }
			}
		}
	}

	option = { # Then you must join the Nights Watch to escape
		name = agot_bastard_event.0916.c
		trigger = {
			scope:reveal_scope = {
				is_ai = yes # Only AI should be overridden
				NOT = {
					has_trait = nightswatch # Is not nightswatch
				}
				is_male = yes
			}
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = craven
			}
		}
		agot_send_to_nightswatch_effect = {
			ACTOR = root
			NIGHTSWATCH_CANDIDATE = scope:reveal_scope
		}
		scope:reveal_scope = {
			remove_character_flag = awaiting_bastardry_result
		}
	}

	option = { # It is up to them
		name = agot_bastard_event.0916.d
		ai_chance = {
			base = 0
			opinion_modifier = {
				opinion_target = scope:reveal_scope
			}
		}
		scope:reveal_scope = {
			remove_character_flag = awaiting_bastardry_result
		}
	}
}

agot_events_bastard.0917 = { # Someone who knows is in the same location as child (called via on action)
	type = character_event
	title = agot_bastard_event.0917.t
	desc = agot_bastard_event.0917.desc

	trigger = {
		title:e_the_iron_throne.holder ?= { exists = yes }
		NOT = { title:e_the_iron_throne.holder = root }
		NOT = { has_character_flag = told_true_parentage }
		OR = {
			any_known_secret = { # Knows Jon Snow secret
				secret_type = secret_agot_disputed_heritage
				secret_target = {
					real_paternal_held_iron_throne_claim = yes
					is_adult = yes
					location = root.location
					NOT = { employer = root } # Employers have a decision
					NOT = { this = root } # Not their own secret
				}
			}
			any_known_secret = { # Knows other claiment secret
				secret_type = secret_disputed_heritage
				secret_target = {
					real_paternal_held_iron_throne_claim = yes
					is_adult = yes
					location = root.location
					NOT = { employer = root } # Employers have a decision
					NOT = { this = root } # Not their own secret
				}
			}
			any_known_secret = { # Knows other claiment unmarried secret
				secret_type = secret_unmarried_illegitimate_child
				secret_target = {
					real_paternal_held_iron_throne_claim = yes
					is_adult = yes
					location = root.location
					NOT = { employer = root } # Employers have a decision
					NOT = { this = root } # Not their own secret
				}
			}
		}
	}

	theme = family
	left_portrait = root
	right_portrait = scope:reveal_scope

	immediate = {
		random_known_secret = {
			limit = {
				secret_type = secret_agot_disputed_heritage
				secret_target = {
					real_paternal_held_iron_throne_claim = yes
					is_adult = yes
					location = root.location
					NOT = { employer = root } # Employers have a decision
					NOT = { this = root } # Not their own secret
				}
			}
			save_scope_as = heritage_secret
		}
		random_known_secret = {
			limit = {
				secret_type = secret_disputed_heritage
				secret_target = {
					real_paternal_held_iron_throne_claim = yes
					is_adult = yes
					location = root.location
					NOT = { employer = root } # Employers have a decision
					NOT = { this = root } # Not their own secret
				}
			}
			save_scope_as = heritage_secret
		}
		random_known_secret = {
			limit = {
				secret_type = secret_unmarried_illegitimate_child
				secret_target = {
					real_paternal_held_iron_throne_claim = yes
					is_adult = yes
					location = root.location
					NOT = { employer = root } # Employers have a decision
					NOT = { this = root } # Not their own secret
				}
			}
			save_scope_as = heritage_secret
		}
		scope:heritage_secret = {
			secret_target = {
				save_scope_as = reveal_scope
				mother ?= { save_scope_as = real_mother }
				real_mother ?= { save_scope_as = real_mother }
				real_father = { save_scope_as = real_father }
			}
		}
	}

	option = { # I shall tell them
		name = agot_bastard_event.0917.a
		flavor = agot_bastard_event.reveal_warning
		custom_tooltip = agot_bastard_event.reveal_tt
		add_character_flag = told_true_parentage
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = honest
			}
			modifier = {
				add = 50
				has_trait = compassionate
			}
			modifier = {
				add = 25
				has_trait = gregarious
			}
		}
		if = { # Do they know already?
			limit = {
				scope:reveal_scope = {
					knows_self_royal_bastard_secret = yes
				}
			}
			trigger_event = {
				id = agot_events_bastard.0919 # They know event
			}
		}
		else = {
			save_scope_as = sharer
			scope:reveal_scope = {
				trigger_event = {
					id = agot_events_bastard.0918 # They don't know event
				}
				add_character_flag = awaiting_bastardry_result
			}
		}
	}

	option = { # I shall not
		name = agot_bastard_event.0917.b
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = craven
			}
			modifier = {
				add = 50
				has_trait = shy
			}
			modifier = {
				add = 25
				has_trait = sadistic
			}
		}
	}
}

agot_events_bastard.0918 = { # Child responds to someone knowing in same location
	type = character_event
	title = agot_bastard_event.0918.t
	desc = agot_bastard_event.0918.desc

	theme = family
	left_portrait = scope:sharer
	right_portrait = {
		character = root
		animation = shock
	}

	immediate = {
		scope:heritage_secret = {
			reveal_to = root
		}
	}

	option = { # Accept truth now
		name = agot_bastard_event.0918.a
		flavor = agot_bastard_event.reveal_warning
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = honest
			}
			modifier = {
				add = 50
				has_trait = brave
			}
		}
		save_scope_as = revealer
		trigger_event = {
			id = agot_events_bastard.0950
			days = { 7 14 }
		}
	}

	option = { # Now is not the time
		name = agot_bastard_event.0918.b
		flavor = agot_bastard_event.0918.b.flavor
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = craven
			}
		}
	}
}

agot_events_bastard.0919 = { # Sharer from same location is told child already knows
	type = character_event
	title = agot_bastard_event.0919.t
	desc = agot_bastard_event.0919.desc

	theme = intrigue
	left_portrait = root
	right_portrait = scope:reveal_scope

	option = { # The world must know!
		name = agot_bastard_event.0919.a
		flavor = agot_bastard_event.0919.a.flavor
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = honest
			}
			modifier = {
				add = 25
				has_trait = callous
			}
			modifier = {
				add = 10
				has_trait = stubborn
			}
			modifier = {
				add = 50
				has_trait = sadistic
			}
			modifier = {
				add = 10
				has_trait = arbitrary
			}
		}
		scope:reveal_scope.mother ?= {
			add_opinion = {
				modifier = revealed_my_royal_secret_against
				target = root
			}
			trigger_event= {
				id = agot_events_bastard.0954
				days = { 2 6 }
			}
		}
		scope:reveal_scope.father ?= {
			add_opinion = {
				modifier = revealed_my_royal_secret_against
				target = root
			}
			trigger_event = {
				id = agot_events_bastard.0954
				days = { 2 6 }
			}
		}
		save_scope_as = revealer
		scope:reveal_scope = {
			trigger_event = {
				id = agot_events_bastard.0950
				days = { 7 14 }
			}
			add_opinion = {
				modifier = revealed_my_royal_secret_against
				target = root
			}
		}
	}

	option = { # I shall respect their wishes
		name = agot_bastard_event.0919.b
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = compassionate
			}
			modifier = {
				add = 10
				has_trait = humble
			}
			modifier = {
				add = 50
				has_trait = shy
			}
			modifier = {
				add = 10
				has_trait = deceitful
			}
		}

		scope:reveal_scope = {
			add_opinion = {
				modifier = grateful_opinion
				opinion = 30
				target = root
			}
			remove_character_flag = awaiting_bastardry_result
		}
	}
}

agot_events_bastard.0920 = { # Jon discovers secret by accident
	type = character_event
	title = agot_bastard_event.0920.t
	desc = agot_bastard_event.0920.desc
	trigger = { # Is JS tested for in on_action
		title:e_the_iron_throne.holder ?= { exists = yes }
		NOT = { title:e_the_iron_throne.holder = root }
		is_adult = yes
		is_ruler = yes
		NOT = { has_character_flag = royal_bastard }
		knows_self_royal_bastard_secret = no
		any_courtier_or_guest = {
			learning >= 15
		}
		NOT = { father = real_father } # Father is not revealed yet
	}
	theme = family
	override_background = study
	left_portrait = scope:learned_person
	right_portrait = {
		character = root
		animation = shock
	}

	immediate = {
		add_secret = {
			type = secret_agot_disputed_heritage
			target = root
		}
		every_courtier_or_guest = {
			limit = {
				learning >= 15
			}
			add_to_list = learned_people
		}
		ordered_in_list = { # Get the one who likes them most - should mean friends come first e.g. Sam
			list = learned_people
			order_by = opinion_of_root
			save_scope_as = learned_person
		}
		random_known_secret = {
			limit = {
				secret_type = secret_agot_disputed_heritage
				secret_target = root
			}
			save_scope_as = heritage_secret
			reveal_to = scope:learned_person
			secret_target = {
				save_scope_as = reveal_scope
				mother ?= { save_scope_as = real_mother } # Will be overwritten if not true
				real_mother ?= { save_scope_as = real_mother }
				real_father = { save_scope_as = real_father }
			}
		}
	}

	option = { # Accept truth now
		name = agot_bastard_event.0920.a
		flavor = agot_bastard_event.reveal_warning
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = honest
			}
			modifier = {
				add = 50
				has_trait = brave
			}
		}
		clear_saved_scope = learned_person
		save_scope_as = revealer
		trigger_event = {
			id = agot_events_bastard.0950
			days = { 7 14 }
		}
	}

	option = { # Now is not the time
		name = agot_bastard_event.0918.b
		flavor = agot_bastard_event.0918.b.flavor
		clear_saved_scope = learned_person
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = craven
			}
		}
	}
}

agot_events_bastard.0950 = { # Handler event for reveal to create the story
	hidden = yes
	trigger = {
		exists = scope:revealer
		exists = scope:heritage_secret # In rare cases where two paths enter a race condition
	}
	immediate = {
		# Get scopes
		scope:heritage_secret = {
			secret_target = {
				save_scope_as = reveal_scope
				mother ?= { save_scope_as = real_mother }
				real_mother ?= { save_scope_as = real_mother }
				real_father = { save_scope_as = real_father }
			}
			if = {
				limit = { can_be_exposed_by = scope:revealer }
				expose_secret = scope:revealer
			}
		}
		court_owner ?= {
			save_scope_as = bastard_employer
		}
		# Save varables to be created in story
		set_variable = {
			name = revealer_passthrough
			value = scope:revealer
		}
		set_variable = {
			name = bastard_passthrough
			value = scope:reveal_scope
		}
		if = {
			limit = { exists = scope:real_mother }
			set_variable = {
				name = real_mother_passthrough
				value = scope:real_mother
			}
		}
		if = {
			limit = { exists = scope:real_father }
			set_variable = {
				name = real_father_passthrough
				value = scope:real_father
			}
		}
		if = {
			limit = { exists = scope:bastard_employer }
			set_variable = {
				name = bastard_employer_passthrough
				value = scope:bastard_employer
			}
		}
		# And create the RB story if not already created
		scope:reveal_scope = {
			if = {
				limit = {
					NOT = { owns_story_of_type = agot_royal_bastard_story }
				}
				create_story = agot_royal_bastard_story
			}
		}
		if = {
			limit = {
				scope:reveal_scope = {
					is_character_stark_7 = yes
				}
			}
			scope:reveal_scope = {
				if = {
					limit = {
						has_variable = agot_birthplace
					}
					remove_variable = agot_birthplace
					agot_set_birthplace = { LOCATION = b_tower_of_joy }
				}
				else = { agot_set_birthplace = { LOCATION = b_tower_of_joy } }
			}
		}
	}
}

agot_events_bastard.0951 = { # Realm recieves letter
	type = letter_event
	opening = {
		desc = agot_bastard_event.0951.opening
	}
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:story.var:bastard = scope:story.var:revealer
				}
				desc = agot_bastard_event.0951.first_person
			}
			desc = agot_bastard_event.0951.third_person
		}
	}
	sender = {
		character = scope:story.var:revealer
	}

	immediate = {
		scope:story = {
			var:bastard = {
				save_scope_as = reveal_scope
			}
			var:real_father = {
				save_scope_as = real_father
			}
			var:real_mother = {
				save_scope_as = real_mother
			}
		}
	}

	option = {
		name = agot_bastard_event.0951.a
		ai_chance = {
			base = 75
			modifier = {
				add = 50
				has_trait = honest
			}
		}
	}

	option = {
		name = agot_bastard_event.0951.b
		ai_chance = {
			base = 25
			modifier = {
				add = 50
				has_trait = deceitful
			}
			modifier = {
				add = 50
				has_trait = humble
			}
		}
		add_opinion = {
			modifier = revealed_royal_bastard_opinion
			target = scope:story.var:revealer
		}
	}
}

agot_events_bastard.0952 = { # Parent is told child is revealing after telling (Note - sent direcly, so scopes are not from story cycle)
	type = character_event
	title = agot_bastard_event.0952.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					this = character:Stark_3
					scope:reveal_scope ={
						is_character_stark_7 = yes
					}
				}
				desc = agot_bastard_event.0952.desc.jon
			}
			desc = agot_bastard_event.0952.desc
		}
	}

	override_icon = {
		reference = "gfx/interface/icons/event_types/type_war.dds"
	}
	theme = family
	left_portrait = root
	right_portrait = scope:reveal_scope

	immediate = {
		title:e_the_iron_throne.holder = {
			save_scope_as = ruler_scope
		}
	}

	option = {
		name = agot_bastard_event.realm_ruler_react_wait
	}
}

agot_events_bastard.0953 = { # Parent is told child is revealing after sharer telling
	type = character_event
	title = agot_bastard_event.0953.t
	desc = agot_bastard_event.0953.desc

	override_icon = {
		reference = "gfx/interface/icons/event_types/type_war.dds"
	}
	theme = family
	left_portrait = root
	right_portrait = scope:story.var:bastard

	immediate = {
		title:e_the_iron_throne.holder = {
			save_scope_as = ruler_scope
		}
	}

	option = {
		name = agot_bastard_event.realm_ruler_react_wait
		add_stress = minor_stress_gain
	}
}

agot_events_bastard.0954 = { # Parent is told sharer is revealing
	type = character_event
	title = agot_bastard_event.0954.t
	desc = agot_bastard_event.0954.desc

	override_icon = {
		reference = "gfx/interface/icons/event_types/type_war.dds"
	}
	theme = family
	left_portrait = root
	right_portrait = scope:story.var:bastard
	lower_left_portrait = scope:sharer

	immediate = {
		title:e_the_iron_throne.holder = {
			save_scope_as = ruler_scope
		}

		add_opinion = {
			modifier = revealed_my_royal_secret_without
			target = scope:sharer
		}
	}

	option = {
		name = agot_bastard_event.realm_ruler_react_wait
		add_stress = medium_stress_gain
	}
}

agot_events_bastard.0955 = { # Sharer is told child is revealing
	type = character_event
	title = agot_bastard_event.0955.t
	desc = agot_bastard_event.0955.desc

	theme = intrigue
	left_portrait = root
	right_portrait = scope:story.var:bastard

	immediate = {
		title:e_the_iron_throne.holder = {
			save_scope_as = ruler_scope
		}
	}

	option = {
		name = agot_bastard_event.0955.a
		add_stress = medium_stress_loss
	}
}

agot_events_bastard.0956 = { # Child is alerted to non-consentual sharing
	type = character_event
	title = agot_bastard_event.0956.t
	desc = agot_bastard_event.0956.desc

	override_icon = {
		reference = "gfx/interface/icons/event_types/type_war.dds"
	}
	theme = intrigue
	left_portrait = scope:story.var:revealer
	right_portrait = {
		character = root
		animation = stress
	}

	immediate = {
		scope:story= {
			var:revealer = {
				save_scope_as = revealer
			}
			var:bastard = {
				save_scope_as = reveal_scope
			}
			var:real_father = {
				save_scope_as = real_father
			}
			var:real_mother = {
				save_scope_as = real_mother
			}
			var:it_ruler = {
				save_scope_as = ruler_scope
			}
		}
	}

	option = {
		name = agot_bastard_event.0956.a
		add_stress = medium_stress_gain
	}
}

agot_events_bastard.0957 = { # Child is alerted to non-consentual sharing AND they didn't know
	type = character_event
	title = agot_bastard_event.0957.t
	desc = agot_bastard_event.0957.desc

	override_icon = {
		reference = "gfx/interface/icons/event_types/type_war.dds"
	}
	theme = intrigue
	left_portrait = scope:story.var:revealer
	right_portrait = {
		character = root
		animation = shock
	}

	immediate = {
		scope:story= {
			var:real_father = {
				save_scope_as = real_father
			}
			var:real_mother = {
				save_scope_as = real_mother
			}
			var:it_ruler = {
				save_scope_as = ruler_scope
			}
		}
	}

	option = {
		name = agot_bastard_event.0957.a
		add_stress = monumental_stress_gain
	}
}

agot_events_bastard.0958 = { # Revealer is alerted
	type = character_event
	title = agot_bastard_event.0958.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { # Is the person
					this = scope:story.var:bastard
				}
				desc = agot_bastard_event.0958.desc.bastard
			}
			triggered_desc = {
				trigger = { # Is their host
					any_courtier_or_guest = {
						this = scope:story.var:bastard
					}
				}
				desc = agot_bastard_event.0958.desc.host
			}
			desc = agot_bastard_event.0958.desc.else # Is unlikely to come up again
		}
	}

	theme = intrigue
	left_portrait = root

	immediate = {
		scope:story = {
			var:bastard = {
				save_scope_as = reveal_scope
			}
			if = {
				limit = { exists = var:employer }
				var:employer = {
					save_scope_as = reveal_employer
				}
			}
			var:it_ruler = {
				save_scope_as = ruler_scope
			}
		}
	}

	option = {
		name = agot_bastard_event.realm_ruler_react_wait
	}
}

agot_events_bastard.0959 = { # King is alterted to claimant
	title = agot_bastard_event.0959.t
	desc = {
		triggered_desc = {
			trigger = { NOT = { this = scope:story.var:revealer } }
			desc = {
				desc = agot_bastard_event.0959.desc_opening
				triggered_desc = {
					trigger = { has_trait = wrathful }
					desc = agot_bastard_event.0959.desc_opening_wrathful
				}
				triggered_desc = {
					trigger = { NOT = { has_trait = wrathful } }
					desc = agot_bastard_event.0959.desc_opening_not_wrathful
				}
				desc = agot_bastard_event.0959.desc_opening_end
			}
		}
		first_valid = {
			triggered_desc = { # King actually is revealer
				trigger = {
					this = scope:story.var:revealer
				}
				desc = agot_bastard_event.0959.desc.king_revealer
			}
			triggered_desc = { # Ned revealed Jon Snow and Bobby B is King
				trigger = {
					this = character:Baratheon_2 # Is Robert Baratheon
					scope:story.var:revealer = character:Stark_3 # Is Eddard Stark
					character:Stark_5 = { # Lyanna is dead
						is_alive = no
					}
					scope:story.var:bastard = { # And Jon Snow is the bastard
						is_character_stark_7 = yes
					}
				}
				desc = agot_bastard_event.0959.desc.ned_revealer
			}
			triggered_desc = { # Jon Snow to Bobby B but Ned didn't reveal and is alive
				trigger = {
					this = character:Baratheon_2
					character:Stark_3 = {
						is_alive = yes
					}
					character:Stark_5 = {
						is_alive = no
					}
					scope:story.var:bastard = {
						is_character_stark_7 = yes
					}
				}
				desc = agot_bastard_event.0959.desc.robert
			}
			triggered_desc = { # Bastard is landed
				trigger = { # Is their host
					scope:story.var:bastard = {
						is_ruler = yes
					}
				}
				desc = agot_bastard_event.0959.desc.landed
			}
			desc = agot_bastard_event.0959.desc.courtier
		}
	}
	theme = court
	override_background = {
		reference = agot_iron_throne
	}
	left_portrait = scope:left_portrait_scope
	right_portrait = root

	immediate = { # Saving scopes for localization / called events
		root = {
			save_scope_as = ruler_scope
		}
		random_courtier_or_guest = {
			limit = {
				is_available = yes
				age >= 15
				NOT = { has_trait = blind }
				NOT = { has_trait = mute }
			}
			save_scope_as = courtier
		}
		if = {
			limit = {
				exists = court_position:zz_kingsguard_lord_commander_court_position
				court_position:zz_kingsguard_lord_commander_court_position = { is_available = yes }
			}
			court_position:zz_kingsguard_lord_commander_court_position = {
				save_scope_as = council
			}
		}
		else_if = {
			limit = {
				exists = cp:councillor_castellan
				cp:councillor_castellan = { is_available = yes }
			}
			cp:councillor_castellan = {
				save_scope_as = council
			}
		}
		else_if = {
			limit = {
				exists = cp:councillor_chancellor
				cp:councillor_chancellor = { is_available = yes }
			}
			cp:councillor_chancellor = {
				save_scope_as = council
			}
		}
		else_if = {
			limit = {
				exists = cp:councillor_marshal
				cp:councillor_marshal = { is_available = yes }
			}
			cp:councillor_marshal = {
				save_scope_as = council
			}
		}
		else = {
			random_courtier_or_guest = {
				limit = {
					is_available = yes
					age >= 15
					NOT = { has_trait = mute }
					NOT = { this = scope:courtier }
				}
				save_scope_as = council
			}
		}
		if = {
			limit = { scope:story.var:revealer = { this = scope:story.var:it_ruler } }
			scope:story.var:bastard = {
				save_scope_as = left_portrait_scope
			}
		}
		else = {
			scope:story.var:revealer = {
				save_scope_as = left_portrait_scope
			}
		}
		# Get scopes from story
		scope:story = {
			var:bastard = {
				save_scope_as = reveal_scope
			}
			if = {
				limit = { exists = var:employer }
				var:employer = {
					save_scope_as = reveal_employer
				}
			}
			var:revealer = {
				save_scope_as = revealer
			}
			var:real_father = {
				save_scope_as = real_father
			}
			var:real_mother = {
				save_scope_as = real_mother
			}
		}
	}

	option = { # Robert reads neds letter
		name = agot_bastard_event.0959.robert
		trigger = { # Robert Baratheon special event if Ned and JS and he didn't reveal
			this = character:Baratheon_2
			NOT = { this = scope:story.var:revealer }
			character:Stark_3 = { # Ned is alive
				is_alive = yes
			}
			character:Stark_5 = { # Lyanna is dead
				is_alive = no
			}
			scope:story.var:bastard = { # And Jon Snow is the bastard
				is_character_stark_7 = yes
			}
		}
		trigger_event = agot_events_bastard.0960
	}

	option = { # Respond harshly
		name = agot_bastard_event.0959.a
		flavor = agot_bastard_event.0959.a.flavor
		custom_tooltip = agot_bastard_event.unjust_warning_tt
		trigger = {
			NAND = { # Robert Baratheon has special event if Ned and JS and he didn't reveal
				this = character:Baratheon_2
				NOT = { this = scope:story.var:revealer }
				character:Stark_3 = {
					is_alive = yes
				}
				character:Stark_5 = {
					is_alive = no
				}
				scope:story.var:bastard = {
					is_character_stark_7 = yes
				}
			}
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = sadistic
			}
			modifier = {
				add = 50
				has_trait = wrathful
			}
			modifier = {
				add = 25
				has_trait = callous
			}
			modifier = {
				add = 25
				has_trait = brave
			}
			modifier = {
				add = 25
				has_trait = vengeful
			}
			modifier = {
				add = 25
				has_trait = paranoid
			}
		}
		# Remove employer friendship if valid
		if = {
			limit = {
				scope:story.var:employer ?= {
					has_relation_best_friend = root
				}
			}
			remove_relation_best_friend = scope:story.var:employer
		}
		if = {
			limit = {
				scope:story.var:employer ?= {
					has_relation_friend = root
				}
			}
			remove_relation_friend = scope:story.var:employer
		}
		# Remove friendship if valid from reveal_scope
		if = {
			limit = {
				scope:story.var:bastard ?= {
					has_relation_best_friend = root
				}
			}
			remove_relation_best_friend = scope:story.var:bastard
		}
		if = {
			limit = {
				scope:story.var:bastard ?= {
					has_relation_friend = root
				}
			}
			remove_relation_friend = scope:story.var:bastard
		}
		trigger_event = agot_events_bastard.0961
	}

	option = { # Respond softly
		name = agot_bastard_event.0959.b
		flavor = agot_bastard_event.0959.b.flavor
		custom_tooltip = agot_bastard_event.unjust_warning_tt
		trigger = {
			NAND = { # Robert Baratheon has special event if Ned and JS and he didn't reveal
				this = character:Baratheon_2
				NOT = { this = scope:story.var:revealer }
				character:Stark_3 = {
					is_alive = yes
				}
				character:Stark_5 = {
					is_alive = no
				}
				scope:story.var:bastard = {
					is_character_stark_7 = yes
				}
			}
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 100
				has_trait = just
			}
			modifier = {
				add = 50
				has_trait = craven
			}
			modifier = {
				add = 50
				has_trait = humble
			}
			modifier = {
				add = 50
				has_trait = calm
			}
			modifier = {
				add = 25
				has_trait = brave
			}
			modifier = {
				add = 25
				has_trait = trusting
			}
		}
		trigger_event = agot_events_bastard.0962
	}

	option = { # Do nothing
		name = agot_bastard_event.0959.c
		flavor = agot_bastard_event.0959.c.flavor
		trigger = {
			NAND = { # Robert Baratheon has special event if Ned and JS
				this = character:Baratheon_2
				character:Stark_3 = {
					is_alive = yes
				}
				scope:story.var:bastard = {
					is_character_stark_7 = yes
				}
			}
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 100
				has_trait = craven
			}
			modifier = {
				add = 50
				has_trait = humble
			}
			modifier = {
				add = 50
				has_trait = content
			}
			modifier = {
				add = 50
				has_trait = patient
			}
			modifier = {
				add = 50
				has_trait = lazy
			}
			modifier = {
				add = 25
				has_trait = shy
			}
			modifier = {
				add = 10
				has_trait = trusting
			}
		}
		scope:story = {
			set_variable = {
				name = royal_bastard_story_stage
				value = 2
			}
			set_variable = {
				name = rulers_choice
				value = flag:do_nothing
			}
		}
	}
}

agot_events_bastard.0960 = { # Robert reads Neds letter
	title = agot_bastard_event.0960.t
	desc = {
		first_valid = {
			triggered_desc = { # Ned revealed Jon Snow
				trigger = {
					scope:story.var:revealer = character:Stark_3 # Is Eddard Stark
				}
				desc = agot_bastard_event.0960.desc.ned_revealer
			}
			desc = agot_bastard_event.0960.desc
		}
	}
	theme = court
	override_background = {
		reference = agot_iron_throne
	}
	left_portrait = character:Stark_3
	right_portrait = {
		character = root
		animation = worry
	}

	option = { # Respond harshly
		name = agot_bastard_event.0960.a
		flavor = agot_bastard_event.0959.a.flavor
		custom_tooltip = agot_bastard_event.unjust_warning_tt
		ai_chance = {
			base = 50
			modifier = {
				add = 100
				has_trait = vengeful
			}
			modifier = {
				add = 50
				has_trait = wrathful
			}
			modifier = {
				add = 50
				has_trait = authoritative
			}
			modifier = {
				add = 50
				has_trait = sadistic
			}
			modifier = {
				add = 50
				has_trait = callous
			}
			modifier = {
				add = 25
				has_trait = paranoid
			}
		}
		if = { # No more being friends with Eddard Stark
			limit = {
				OR = {
					has_relation_friend = character:Stark_3
					has_relation_best_friend = character:Stark_3
				}
			}
			add_opinion = {
				modifier = betrayed_my_trust_bastard
				target = character:Stark_3
			}
		}
		# Remove employer friendship if valid
		if = {
			limit = {
				scope:story.var:employer ?= {
					has_relation_best_friend = root
				}
			}
			remove_relation_best_friend = scope:story.var:employer
		}
		if = {
			limit = {
				scope:story.var:employer ?= {
					has_relation_friend = root
				}
			}
			remove_relation_friend = scope:story.var:employer
		}
		# Remove friendship if valid from reveal_scope
		if = {
			limit = {
				scope:story.var:bastard ?= {
					has_relation_best_friend = root
				}
			}
			remove_relation_best_friend = scope:story.var:bastard
		}
		if = {
			limit = {
				scope:story.var:bastard ?= {
					has_relation_friend = root
				}
			}
			remove_relation_friend = scope:story.var:bastard
		}
		trigger_event = agot_events_bastard.0961
	}

	option = { # Respond softly
		name = {
			trigger = {
				scope:story.var:bastard = {
					is_male = yes
				}
			}
			text = agot_bastard_event.0960.b.son
		}
		name = {
			trigger = {
				scope:story.var:bastard = {
					is_male = no
				}
			}
			text = agot_bastard_event.0960.b.daughter
		}
		flavor = agot_bastard_event.0959.b.flavor
		custom_tooltip = agot_bastard_event.unjust_warning_tt
		ai_chance = {
			base = 50
			modifier = {
				add = 100
				has_trait = just
			}
			modifier = {
				add = 50
				has_trait = craven
			}
			modifier = {
				add = 50
				has_trait = humble
			}
			modifier = {
				add = 50
				has_trait = calm
			}
			modifier = {
				add = 50
				OR = {
					has_trait = compassionate
					has_trait = forgiving
				}
			}
			modifier = {
				add = 25
				has_trait = brave
			}
			modifier = {
				add = 25
				has_trait = trusting
			}
		}
		if = { # Can still be friends, but not best friends anymore
			limit = {
				OR = {
					has_relation_friend = character:Stark_3
					has_relation_best_friend = character:Stark_3
				}
			}
			add_opinion = {
				modifier = didnt_trust_me_bastard
				target = character:Stark_3
			}
			if = {
				limit = { has_relation_best_friend = character:Stark_3 }
				remove_relation_best_friend = character:Stark_3
				set_relation_friend = character:Stark_3
			}
		}
		trigger_event = agot_events_bastard.0962
	}

	option = { # Do nothing
		name = agot_bastard_event.0960.c
		flavor = agot_bastard_event.0959.c.flavor
		ai_chance = {
			base = 50
			modifier = {
				add = 100
				has_trait = craven
			}
			modifier = {
				add = 50
				has_trait = humble
			}
			modifier = {
				add = 50
				has_trait = content
			}
			modifier = {
				add = 50
				has_trait = patient
			}
			modifier = {
				add = 50
				has_trait = compassionate
			}
			modifier = {
				add = 50
				has_trait = lazy
			}
			modifier = {
				add = 25
				has_trait = shy
			}
			modifier = {
				add = 10
				has_trait = trusting
			}
		}
		scope:story = {
			set_variable = {
				name = royal_bastard_story_stage
				value = 2
			}
			set_variable = {
				name = rulers_choice
				value = flag:do_nothing
			}
		}
	}
}

agot_events_bastard.0961 = { # King responds harshly
	title = agot_bastard_event.0961.t
	desc = agot_bastard_event.0961.desc
	theme = court
	override_icon = {
		reference = "gfx/interface/icons/event_types/type_war.dds"
	}
	override_background = {
		reference = agot_iron_throne
	}
	right_portrait = {
		character = root
		animation = rage
	}

	immediate = {
		scope:story = {
			set_variable = {
				name = it_ruler_response
				value = flag:harsh
			}
		}
		clear_saved_scope = council
		clear_saved_scope = courtier
	}

	option = { # I want their heads on spikes!
		name = agot_bastard_event.0961.a
		flavor = agot_bastard_event.0961.a.flavor
		trigger = {
			scope:story.var:bastard = { is_landed = no }
			exists = scope:story.var:employer
			NOT = { scope:story.var:employer = root }
		}
		custom_tooltip = agot_bastard_event.host_response_choice
		ai_chance = {
			base = 50
			modifier = {
				add = 100
				has_trait = wrathful
			}
			modifier = {
				add = -100
				has_trait = just
			}
		}
		scope:story = {
			set_variable = {
				name = rulers_choice
				value = flag:execute_both
			}
		}
	}

	option = { # I want the bastard dead!
		name = agot_bastard_event.0961.b
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = wrathful
			}
			modifier = {
				add = -50
				has_trait = just
			}
		}
		if = {
			limit = { scope:story.var:bastard = { is_landed = yes } }
			custom_tooltip = agot_bastard_event.personal_response_choice
		}
		else_if = {
			limit = {
				exists = scope:story.var:employer
				scope:story.var:employer = root
			}
			scope:story.var:bastard = {
				remove_character_flag = awaiting_bastardry_result
				death = {
					killer = scope:story.var:it_ruler
					death_reason = death_execution
				}
			}
		}
		else = {
			custom_tooltip = agot_bastard_event.host_response_choice
		}
		scope:story = {
			set_variable = {
				name = rulers_choice
				value = flag:execute_bastard
			}
		}
	}

	option = { # They will join the wall! / silent sisters!
		name = {
			trigger = {
				scope:story.var:bastard = { is_male = yes }
			}
			text = agot_bastard_event.0961.c.nw
		}
		name = {
			trigger = {
				scope:story.var:bastard = { is_male = no }
			}
			text = agot_bastard_event.0961.c.ss
		}
		# Can't do this if already at their respective order
		trigger = {
			trigger_if = {
				limit = { scope:story.var:bastard = { is_male = yes } }
				NOT = { scope:story.var:bastard = { has_trait = nightswatch } }
			}
			trigger_else = {
				NOT = { scope:story.var:bastard = { has_trait = silent_sister } }
			}
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = arbitrary
			}
		}
		if = {
			limit = { scope:story.var:bastard = { is_landed = yes } }
			custom_tooltip = agot_bastard_event.personal_response_choice
		}
		else_if = {
			limit = {
				exists = scope:story.var:employer
				scope:story.var:employer = root
			}
			scope:story.var:bastard = {
				remove_character_flag = awaiting_bastardry_result
				if = {
					limit = { is_male = yes }
					agot_send_to_nightswatch_effect = {
						ACTOR = scope:story.var:it_ruler
						NIGHTSWATCH_CANDIDATE = scope:story.var:bastard
					}
				}
				else = {
					agot_send_to_silent_sisters_effect = {
						ACTOR = scope:story.var:it_ruler
						SILENT_SISTER_CANDIDATE = scope:story.var:bastard
					}
				}
			}
		}
		else = {
			custom_tooltip = agot_bastard_event.host_response_choice
		}
		scope:story = {
			set_variable = {
				name = rulers_choice
				value = flag:send_to_order
			}
		}
	}

	option = { # The only safe place for such blood is my dungeon!
		name = agot_bastard_event.0961.d
		ai_chance = {
			base = 50
			modifier = {
				add = 10
				has_trait = arrogant
			}
			modifier = {
				add = 10
				has_trait = just
			}
			modifier = {
				add = 50
				has_trait = paranoid
			}
		}
		if = {
			limit = { scope:story.var:bastard = { is_landed = yes } }
			custom_tooltip = agot_bastard_event.personal_response_choice
		}
		else_if = {
			limit = {
				exists = scope:story.var:employer
				scope:story.var:employer = root
			}
			scope:story.var:bastard = {
				remove_character_flag = awaiting_bastardry_result
			}
			imprison = {
				target = scope:story.var:bastard
				type = dungeon
			}
		}
		else = {
			custom_tooltip = agot_bastard_event.host_response_choice
		}
		scope:story = {
			set_variable = {
				name = rulers_choice
				value = flag:imprison
			}
		}
	}

	after = {
		scope:story = {
			set_variable = {
				name = royal_bastard_story_stage
				value = 2
			}
		}
	}
}

agot_events_bastard.0962 = { # King responds lightly
	title = agot_bastard_event.0962.t
	desc = agot_bastard_event.0962.desc
	theme = court
	override_background = {
		reference = agot_iron_throne
	}
	right_portrait = root

	immediate = {
		scope:story = {
			set_variable = {
				name = it_ruler_response
				value = flag:light
			}
		}
		clear_saved_scope = council
		clear_saved_scope = courtier
	}

	option = { # They will join the wall! / silent sisters!
		name = {
			trigger = {
				scope:story.var:bastard = { is_male = yes }
			}
			text = agot_bastard_event.0962.a.nw
		}
		name = {
			trigger = {
				scope:story.var:bastard = { is_male = no }
			}
			text = agot_bastard_event.0962.a.ss
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = wrathful
			}
			modifier = {
				add = 50
				has_trait = callous
			}
			modifier = {
				add = 50
				has_trait = sadistic
			}
		}
		if = {
			limit = { scope:story.var:bastard = { is_landed = yes } }
			custom_tooltip = agot_bastard_event.personal_response_choice
		}
		else_if = {
			limit = {
				exists = scope:story.var:employer
				scope:story.var:employer = root
			}
			scope:story.var:bastard = {
				remove_character_flag = awaiting_bastardry_result
				if = {
					limit = { is_male = yes }
					agot_send_to_nightswatch_effect = {
						ACTOR = scope:story.var:it_ruler
						NIGHTSWATCH_CANDIDATE = scope:story.var:bastard
					}
				}
				else = {
					agot_send_to_silent_sisters_effect = {
						ACTOR = scope:story.var:it_ruler
						SILENT_SISTER_CANDIDATE = scope:story.var:bastard
					}
				}
			}
		}
		else = {
			custom_tooltip = agot_bastard_event.host_response_choice
		}
		scope:story = {
			set_variable = {
				name = rulers_choice
				value = flag:send_to_order
			}
		}
	}

	option = { # They must be placed under arrest
		name = agot_bastard_event.0962.b
		ai_chance = {
			base = 50
			modifier = {
				add = 25
				has_trait = wrathful
			}
			modifier = {
				add = 10
				has_trait = callous
			}
			modifier = {
				add = 25
				has_trait = sadistic
			}
			modifier = {
				add = 50
				has_trait = paranoid
			}
		}
		if = {
			limit = { scope:story.var:bastard = { is_landed = yes } }
			custom_tooltip = agot_bastard_event.personal_response_choice
		}
		else_if = {
			limit = {
				exists = scope:story.var:employer
				scope:story.var:employer = root
			}
			scope:story.var:bastard = {
				remove_character_flag = awaiting_bastardry_result
			}
			imprison = {
				target = scope:story.var:bastard
				type = dungeon
			}
		}
		else = {
			custom_tooltip = agot_bastard_event.host_response_choice
		}
		scope:story = {
			set_variable = {
				name = rulers_choice
				value = flag:imprison
			}
		}
	}

	option = { # They must come to court
		name = agot_bastard_event.0962.c
		trigger = {
			exists = scope:story.var:employer
			NOT = { scope:story.var:employer ?= root }
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = compassionate
			}
			modifier = {
				add = -25
				has_trait = paranoid
			}
			modifier = {
				add = -100
				has_trait = shy
			}
		}
		if = {
			limit = { scope:story.var:bastard = { is_landed = yes } }
			custom_tooltip = agot_bastard_event.personal_response_choice
		}
		else = {
			custom_tooltip = agot_bastard_event.host_response_choice
		}
		scope:story = {
			set_variable = {
				name = rulers_choice
				value = flag:bring_to_court
			}
		}
	}

	option = { # They must give up their claims
		name = agot_bastard_event.0962.d
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = just
			}
			modifier = {
				add = 25
				has_trait = patient
			}
			modifier = {
				add = 25
				has_trait = calm
			}
		}
		if = {
			limit = { scope:story.var:bastard = { is_landed = yes } }
			custom_tooltip = agot_bastard_event.personal_response_choice
		}
		else_if = {
			limit = {
				exists = scope:story.var:employer
				scope:story.var:employer = root
			}
			scope:story.var:bastard = {
				remove_claim = title:e_the_iron_throne
				remove_claim = title:d_kings_landing
				remove_claim = title:c_kings_landing
				remove_claim = title:k_dragonstone
				remove_claim = title:d_dragonstone
				remove_claim = title:c_dragonstone
				remove_character_flag = awaiting_bastardry_result
				add_character_flag = forswore_royal_claims
			}
		}
		else = {
			custom_tooltip = agot_bastard_event.host_response_choice
		}
		scope:story = {
			set_variable = {
				name = rulers_choice
				value = flag:give_up_claims
			}
		}
	}

	after = {
		scope:story = {
			set_variable = {
				name = royal_bastard_story_stage
				value = 2
			}
		}
	}
}

agot_events_bastard.0963 = { # King responds to reveal of same dynasty
	title = agot_bastard_event.0963.t
	desc = {
		first_valid = { # Mothers should always know the truth
			triggered_desc = {
				trigger = {
					scope:story.var:bastard = {
						is_character_stark_7 = yes
					}
				}
				desc = agot_bastard_event.0963.desc.jon
			}
			triggered_desc = {
				trigger = {
					scope:story.var:bastard = {
						father = root
						is_male = yes
					}
				}
				desc = agot_bastard_event.0963.desc.my_son
			}
			triggered_desc = {
				trigger = {
					scope:story.var:bastard = {
						father = root
						is_male = no
					}
				}
				desc = agot_bastard_event.0963.desc.my_daughter
			}
			desc = agot_bastard_event.0963.desc
		}
	}
	theme = court
	override_background = {
		reference = agot_iron_throne
	}
	right_portrait = root

	immediate = {
		scope:story = {
			set_variable = {
				name = it_ruler_response
				value = flag:light
			}
		}
		# Get scopes from story
		scope:story = {
			var:bastard = {
				save_scope_as = reveal_scope
			}
			if = {
				limit = { exists = var:employer }
				var:employer = {
					save_scope_as = reveal_employer
				}
			}
			var:revealer = {
				save_scope_as = revealer
			}
			var:real_father = {
				save_scope_as = real_father
			}
			var:real_mother = {
				save_scope_as = real_mother
			}
		}
	}

	option = { # They will join the wall! / silent sisters!
		name = {
			trigger = {
				scope:story.var:bastard = { is_male = yes }
			}
			text = agot_bastard_event.0963.a.nw
		}
		name = {
			trigger = {
				scope:story.var:bastard = { is_male = no }
			}
			text = agot_bastard_event.0963.a.ss
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = wrathful
			}
			modifier = {
				add = 50
				has_trait = callous
			}
			modifier = {
				add = 50
				has_trait = sadistic
			}
		}
		if = {
			limit = { scope:story.var:bastard = { is_landed = yes } }
			custom_tooltip = agot_bastard_event.personal_response_choice
		}
		else_if = {
			limit = {
				exists = scope:story.var:employer
				scope:story.var:employer = root
			}
			scope:story.var:bastard = {
				remove_character_flag = awaiting_bastardry_result
				if = {
					limit = { is_male = yes }
					agot_send_to_nightswatch_effect = {
						ACTOR = scope:story.var:it_ruler
						NIGHTSWATCH_CANDIDATE = scope:story.var:bastard
					}
				}
				else = {
					agot_send_to_silent_sisters_effect = {
						ACTOR = scope:story.var:it_ruler
						SILENT_SISTER_CANDIDATE = scope:story.var:bastard
					}
				}
			}
		}
		else = {
			custom_tooltip = agot_bastard_event.host_response_choice
		}
		scope:story = {
			set_variable = {
				name = rulers_choice
				value = flag:send_to_order
			}
		}
	}

	option = { # They must be placed under arrest
		name = agot_bastard_event.0963.b
		ai_chance = {
			base = 50
			modifier = {
				add = 25
				has_trait = wrathful
			}
			modifier = {
				add = 10
				has_trait = callous
			}
			modifier = {
				add = 25
				has_trait = sadistic
			}
			modifier = {
				add = 50
				has_trait = paranoid
			}
		}
		if = {
			limit = { scope:story.var:bastard = { is_landed = yes } }
			custom_tooltip = agot_bastard_event.personal_response_choice
		}
		else_if = {
			limit = {
				exists = scope:story.var:employer
				scope:story.var:employer = root
			}
			scope:story.var:bastard = {
				remove_character_flag = awaiting_bastardry_result
			}
			imprison = {
				target = scope:story.var:bastard
				type = dungeon
			}
		}
		else = {
			custom_tooltip = agot_bastard_event.host_response_choice
		}
		scope:story = {
			set_variable = {
				name = rulers_choice
				value = flag:imprison
			}
		}
	}

	option = { # They must come to court
		name = agot_bastard_event.0963.c
		flavor = agot_bastard_event.0963.c.flavor
		trigger = {
			exists = scope:story.var:employer
			NOT = { scope:story.var:employer ?= root }
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = compassionate
			}
			modifier = {
				add = -25
				has_trait = paranoid
			}
			modifier = {
				add = -100
				has_trait = shy
			}
		}
		if = {
			limit = { scope:story.var:bastard = { is_landed = yes } }
			custom_tooltip = agot_bastard_event.personal_response_choice
		}
		else = {
			custom_tooltip = agot_bastard_event.host_response_choice
		}
		scope:story = {
			set_variable = {
				name = rulers_choice
				value = flag:bring_to_court
			}
		}
	}

	option = { # They must give up their claims
		name = agot_bastard_event.0963.d
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = just
			}
			modifier = {
				add = 25
				has_trait = patient
			}
			modifier = {
				add = 25
				has_trait = calm
			}
		}
		if = {
			limit = { scope:story.var:bastard = { is_landed = yes } }
			custom_tooltip = agot_bastard_event.personal_response_choice
		}
		else_if = {
			limit = {
				exists = scope:story.var:employer
				scope:story.var:employer = root
			}
			scope:story.var:bastard = {
				remove_claim = title:e_the_iron_throne
				remove_claim = title:d_kings_landing
				remove_claim = title:c_kings_landing
				remove_claim = title:k_dragonstone
				remove_claim = title:d_dragonstone
				remove_claim = title:c_dragonstone
				remove_character_flag = awaiting_bastardry_result
				add_character_flag = forswore_royal_claims
			}
		}
		else = {
			custom_tooltip = agot_bastard_event.host_response_choice
		}
		scope:story = {
			set_variable = {
				name = rulers_choice
				value = flag:give_up_claims
			}
		}
	}

	after = {
		scope:story = {
			set_variable = {
				name = royal_bastard_story_stage
				value = 2
			}
		}
	}
}

agot_events_bastard.0970 = { # Employer responds to king demand (unlanded claimant)
	title = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:story.var:rulers_choice = flag:execute_both
				}
				desc = agot_bastard_event.0970.t_execution_both
			}
			triggered_desc = {
				trigger = {
					scope:story.var:rulers_choice = flag:execute_bastard
				}
				desc = agot_bastard_event.0970.t_execution_bastard
			}
			triggered_desc = {
				trigger = {
					scope:story.var:rulers_choice = flag:send_to_order
				}
				desc = agot_bastard_event.0970.t_send_to_order
			}
			triggered_desc = {
				trigger = {
					scope:story.var:rulers_choice = flag:imprison
				}
				desc = agot_bastard_event.0970.t_imprison
			}
			triggered_desc = {
				trigger = {
					scope:story.var:rulers_choice = flag:bring_to_court
				}
				desc = agot_bastard_event.0970.t_bring_to_court
			}
			triggered_desc = {
				trigger = {
					scope:story.var:rulers_choice = flag:give_up_claims
				}
				desc = agot_bastard_event.0970.t_give_up_claims
			}
			desc = agot_bastard_event.0970.t_nothing
		}
	}
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:story.var:rulers_choice = flag:execute_both
				}
				desc = agot_bastard_event.0970.desc_execution_both
			}
			triggered_desc = {
				trigger = {
					scope:story.var:rulers_choice = flag:execute_bastard
				}
				desc = agot_bastard_event.0970.desc_execution_bastard
			}
			triggered_desc = {
				trigger = {
					scope:story.var:rulers_choice = flag:send_to_order
				}
				desc = {
					triggered_desc = {
						trigger = {
							scope:story.var:bastard = { is_male = yes}
						}
						desc = agot_bastard_event.0970.desc_send_to_nw
					}
					triggered_desc = {
						trigger = {
							scope:story.var:bastard = { is_male = no }
						}
						desc = agot_bastard_event.0970.desc_send_to_ss
					}
				}
			}
			triggered_desc = {
				trigger = {
					scope:story.var:rulers_choice = flag:imprison
				}
				desc = agot_bastard_event.0970.desc_imprison
			}
			triggered_desc = {
				trigger = {
					scope:story.var:rulers_choice = flag:bring_to_court
				}
				desc = agot_bastard_event.0970.desc_bring_to_court
			}
			triggered_desc = {
				trigger = {
					scope:story.var:rulers_choice = flag:give_up_claims
				}
				desc = agot_bastard_event.0970.desc_give_up_claims
			}
			desc = agot_bastard_event.0970.desc_nothing
		}
	}
	override_icon = {
		reference = "gfx/interface/icons/event_types/type_war.dds"
	}
	theme = court
	right_portrait = {
		character = root
		animation = rage
		triggered_animation = {
			trigger = {
				has_trait = craven
				NOT = { scope:story.var:rulers_choice = flag:do_nothing }
			}
			animation = fear
		}
		triggered_animation = {
			trigger = {
				scope:story.var:rulers_choice = flag:do_nothing
			}
			animation = happiness
		}
	}
	lower_center_portrait = {
		character = scope:story.var:bastard
	}
	left_portrait = {
		character = scope:story.var:it_ruler
		animation = disapproval
		triggered_animation = {
			trigger = {
				has_trait = compassionate
				NOT = { scope:story.var:rulers_choice = flag:do_nothing }
			}
			animation = sadness
		}
		triggered_animation = {
			trigger = {
				scope:story.var:rulers_choice = flag:do_nothing
			}
			animation = boredom
		}
	}

	immediate = {
		scope:story = {
			var:bastard = {
				save_scope_as = reveal_scope
			}
			var:it_ruler = {
				save_scope_as = ruler_scope
			}
		}
	}

	option = { # Reject
		name = {
			trigger = { scope:story.var:it_ruler_response = flag:harsh }
			text = agot_bastard_event.demand_reject_harsh
		}
		name = {
			trigger = { scope:story.var:it_ruler_response = flag:light }
			text = agot_bastard_event.demand_reject_light
		}
		custom_tooltip = agot_bastard_event.demand_reject_tt
		flavor = agot_bastard_event.demand_reject_flavor
		trigger = {
			NOT = { scope:story.var:rulers_choice = flag:do_nothing }
		}
		ai_chance = {
			base = 0
			# Modifiers based on demand
			modifier = {
				add = 95
				scope:story.var:rulers_choice = flag:execute_both
			}
			modifier = {
				add = 75
				scope:story.var:rulers_choice = flag:execute_bastard
			}
			modifier = {
				add = 60
				scope:story.var:rulers_choice = flag:send_to_order
			}
			modifier = {
				add = 60
				scope:story.var:rulers_choice = flag:imprison
			}
			modifier = {
				add = 40
				scope:story.var:rulers_choice = flag:bring_to_court
			}
			modifier = {
				add = 30
				scope:story.var:rulers_choice = flag:give_up_claims
			}
			# More likely to reject if employer likes them
			opinion_modifier = {
				opinion_target = scope:story.var:bastard
			}
			# General boldness modifier
			ai_value_modifier = {
				ai_boldness = 0.2
			}
			# Always accept if should give up
			modifier = {
				factor = 0
				agot_royal_bastard_should_give_up = yes
			}
		}
		# If they're of a weird niche government type, become Adventurer
		if = {
			limit = {
				scope:story.var:bastard = {
					OR = {
						has_government = silent_sisterhood_government
						has_government = nights_watch_government
						has_government = the_citadel_government
					}
				}
			}
			if = { # I am LC of NW
				limit = {
					has_government = nights_watch_government
					has_title = title:k_the_wall
					has_ep3_dlc_trigger = yes # Needs DLC to play adventurer because Paradox says so
				}
				agot_nw_elect_lc = yes # Sets player heir to next NW LC for this effect
				save_scope_as = adventurer
				if = {
					limit = {
						player_heir ?= {
							NOT = { this = root }
							is_adult = yes
						}
					}
					player_heir = {
						save_scope_as = laamp_heir
						save_scope_as = laamp_inheritor
					}
				}
				else = {
					if = {
						limit = {
							NOT = { exists = scope:laamp_inheritor }
						}
						hidden_effect_new_object = {
							create_character = {
								template = laamp_inheritor_template
								culture = root.capital_county.culture
								faith = root.capital_county.faith
								dynasty = generate
								location = root.capital_province
								after_creation = {
									save_scope_as = laamp_inheritor
									add_character_flag = new_laamp_inheritor
								}
							}
						}
					}
				}
				create_landless_adventurer_title_tooltip_effect = yes
				trigger_event = { id = ep3_laamps.0030 }
				spawn_army = {
					men_at_arms = {
						type = rangers
						stacks = 4
					}
					men_at_arms = {
						type = sworn_brothers
						stacks = 10
					}
					men_at_arms = {
						type = trackers
						stacks = 2
					}
					inheritable = yes
					uses_supply = yes
					location = root.location
					name = agot_bastard_event.0971.nw_army_for_claim
				}
				add_gold = 100
				add_realm_law_skip_effects = camp_purpose_legitimists
				remove_trait = nightswatch
				scope:laamp_inheritor ?= {
					change_government = nights_watch_government
				}
			}
			else = { # All others are unplayable / player doesn't have DLC so just depose
				add_character_flag = do_not_kill_on_depose
				agot_depose_effect = yes
			}
		}
		scope:story = {
			set_variable = {
				name = response_to_demand
				value = flag:reject
			}
		}
	}

	option = { # Accept
		name = {
			trigger = { scope:story.var:it_ruler_response = flag:harsh }
			text = agot_bastard_event.demand_accept_harsh
		}
		name = {
			trigger = { scope:story.var:it_ruler_response = flag:light }
			text = agot_bastard_event.demand_accept_light
		}
		flavor = agot_bastard_event.demand_accept_flavor
		trigger = {
			NOT = { scope:story.var:rulers_choice = flag:do_nothing }
		}
		ai_chance = {
			base = 0
			# Modifiers based on demand
			modifier = {
				add = 5
				scope:story.var:rulers_choice = flag:execute_both
			}
			modifier = {
				add = 25
				scope:story.var:rulers_choice = flag:execute_bastard
			}
			modifier = {
				add = 40
				scope:story.var:rulers_choice = flag:send_to_order
			}
			modifier = {
				add = 40
				scope:story.var:rulers_choice = flag:imprison
			}
			modifier = {
				add = 60
				scope:story.var:rulers_choice = flag:bring_to_court
			}
			modifier = {
				add = 70
				scope:story.var:rulers_choice = flag:give_up_claims
			}
			# Modifiers based on traits
			modifier = {
				add = 20
				scope:story.var:rulers_choice = flag:execute_both
				OR = {
					has_trait = depressed_1
					has_trait = depressed_genetic
				}
			}
			modifier = {
				add = -25
				OR = {
					scope:story.var:rulers_choice = flag:execute_both
					scope:story.var:rulers_choice = flag:execute_bastard
				}
				OR = {
					has_trait = compassionate
					has_trait = just
				}
			}
			modifier = {
				add = -15
				OR = {
					scope:story.var:rulers_choice = flag:send_to_order
					scope:story.var:rulers_choice = flag:imprison
				}
				OR = {
					has_trait = compassionate
					has_trait = just
				}
			}
			modifier = {
				add = -15
				scope:story.var:rulers_choice = flag:bring_to_court
				OR = {
					has_trait = arrogant # How dare they take my courtiers
					has_trait = compassionate # I feel bad for them
				}
			}
			modifier = {
				add = -10
				scope:story.var:rulers_choice = flag:give_up_claims
				OR = {
					has_trait = ambitious # I want to keep useful courtier claims
					has_trait = just # This isn't lawful
				}
			}
			# General boldness modifier
			ai_value_modifier = {
				ai_boldness = -0.2
			}
		}
		# Resolve acceptance effects
		if = {
			limit = { scope:story.var:rulers_choice = flag:execute_both }
			death = {
				killer = scope:story.var:it_ruler
				death_reason = death_execution
			}
			scope:story.var:bastard = {
				death = {
					killer = scope:story.var:it_ruler
					death_reason = death_execution
				}
			}
			scope:story.var:it_ruler = {
				trigger_event = agot_events_bastard.1001
			}
		}
		else_if = {
			limit = { scope:story.var:rulers_choice = flag:execute_bastard }
			scope:story.var:bastard = {
				death = {
					killer = scope:story.var:it_ruler
					death_reason = death_execution
				}
			}
			scope:story.var:it_ruler = {
				trigger_event = agot_events_bastard.1002
			}
		}
		else_if = {
			limit = { scope:story.var:rulers_choice = flag:send_to_order }
			scope:story.var:bastard = {
				remove_character_flag = awaiting_bastardry_result
				if = {
					limit = { is_male = yes }
					agot_send_to_nightswatch_effect = {
						ACTOR = scope:story.var:it_ruler
						NIGHTSWATCH_CANDIDATE = scope:story.var:bastard
					}
				}
				else = {
					agot_send_to_silent_sisters_effect = {
						ACTOR = scope:story.var:it_ruler
						SILENT_SISTER_CANDIDATE = scope:story.var:bastard
					}
				}
			}
			scope:story.var:it_ruler = {
				trigger_event = agot_events_bastard.1003
			}
		}
		else_if = {
			limit = { scope:story.var:rulers_choice = flag:imprison }
			scope:story.var:it_ruler = {
				trigger_event = agot_events_bastard.1004
				imprison = {
					target = scope:story.var:bastard
					type = dungeon
				}
			}
		}
		else_if = {
			limit = { scope:story.var:rulers_choice = flag:bring_to_court }
			scope:story.var:bastard = {
				set_employer = scope:story.var:it_ruler
				remove_character_flag = awaiting_bastardry_result
			}
			scope:story.var:it_ruler = {
				trigger_event = agot_events_bastard.1005
			}
		}
		else_if = {
			limit = { scope:story.var:rulers_choice = flag:give_up_claims }
			scope:story.var:bastard = {
				remove_claim = title:e_the_iron_throne
				remove_claim = title:d_kings_landing
				remove_claim = title:c_kings_landing
				remove_claim = title:k_dragonstone
				remove_claim = title:d_dragonstone
				remove_claim = title:c_dragonstone
				remove_character_flag = awaiting_bastardry_result
				add_character_flag = forswore_royal_claims
			}
			# This is a letter of the bastard giving them up so send to everyone
			title:e_the_iron_throne = {
				every_de_jure_county_holder = {
					trigger_event = agot_events_bastard.1006
				}
			}
		}
		scope:story = {
			set_variable = {
				name = response_to_demand
				value = flag:accept
			}
		}
	}

	option = {
		name = agot_bastard_event.no_demand_acknowledge
		trigger = {
			scope:story.var:rulers_choice = flag:do_nothing
		}
		scope:story = {
			end_story = yes
		}
	}
}

agot_events_bastard.0971 = { # Bastard responds to king demand (landed claimant)
	title = {
		first_valid = {
			triggered_desc = {
				trigger = {
					OR = { # Technically I could have been landed in the days between
						scope:story.var:rulers_choice = flag:execute_both
						scope:story.var:rulers_choice = flag:execute_bastard
					}
				}
				desc = agot_bastard_event.0971.t_execution_bastard
			}
			triggered_desc = {
				trigger = {
					scope:story.var:rulers_choice = flag:send_to_order
				}
				desc = agot_bastard_event.0971.t_send_to_order
			}
			triggered_desc = {
				trigger = {
					scope:story.var:rulers_choice = flag:imprison
				}
				desc = agot_bastard_event.0971.t_imprison
			}
			triggered_desc = {
				trigger = {
					scope:story.var:rulers_choice = flag:bring_to_court
				}
				desc = agot_bastard_event.0971.t_bring_to_court
			}
			triggered_desc = {
				trigger = {
					scope:story.var:rulers_choice = flag:give_up_claims
				}
				desc = agot_bastard_event.0971.t_give_up_claims
			}
			desc = agot_bastard_event.0971.t_nothing
		}
	}
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					OR = {
						scope:story.var:rulers_choice = flag:execute_both
						scope:story.var:rulers_choice = flag:execute_bastard
					}
				}
				desc = agot_bastard_event.0971.desc_execution_bastard
			}
			triggered_desc = {
				trigger = {
					scope:story.var:rulers_choice = flag:send_to_order
				}
				desc = {
					triggered_desc = {
						trigger = {
							scope:story.var:bastard = { is_male = yes}
						}
						desc = agot_bastard_event.0971.desc_send_to_nw
					}
					triggered_desc = {
						trigger = {
							scope:story.var:bastard = { is_male = no }
						}
						desc = agot_bastard_event.0971.desc_send_to_ss
					}
				}
			}
			triggered_desc = {
				trigger = {
					scope:story.var:rulers_choice = flag:imprison
				}
				desc = agot_bastard_event.0971.desc_imprison
			}
			triggered_desc = {
				trigger = {
					scope:story.var:rulers_choice = flag:bring_to_court
				}
				desc = agot_bastard_event.0971.desc_bring_to_court
			}
			triggered_desc = {
				trigger = {
					scope:story.var:rulers_choice = flag:give_up_claims
				}
				desc = agot_bastard_event.0971.desc_give_up_claims
			}
			desc = agot_bastard_event.0971.desc_nothing
		}
	}
	override_icon = {
		reference = "gfx/interface/icons/event_types/type_war.dds"
	}
	theme = court
	right_portrait = {
		character = root
		animation = rage
		triggered_animation = {
			trigger = {
				has_trait = craven
				NOT = { scope:story.var:rulers_choice = flag:do_nothing }
			}
			animation = fear
		}
		triggered_animation = {
			trigger = {
				scope:story.var:rulers_choice = flag:do_nothing
			}
			animation = happiness
		}
	}
	left_portrait = {
		character = scope:story.var:it_ruler
		animation = disapproval
		triggered_animation = {
			trigger = {
				has_trait = compassionate
				NOT = { scope:story.var:rulers_choice = flag:do_nothing }
			}
			animation = sadness
		}
		triggered_animation = {
			trigger = {
				scope:story.var:rulers_choice = flag:do_nothing
			}
			animation = boredom
		}
	}

	immediate = {
		scope:story = {
			var:it_ruler = {
				save_scope_as = ruler_scope
			}
		}
	}

	option = { # Reject
		name = {
			trigger = { scope:story.var:it_ruler_response = flag:harsh }
			text = agot_bastard_event.demand_reject_harsh
		}
		name = {
			trigger = { scope:story.var:it_ruler_response = flag:light }
			text = agot_bastard_event.demand_reject_light
		}
		custom_tooltip = agot_bastard_event.demand_reject_tt
		flavor = agot_bastard_event.demand_reject_flavor
		trigger = {
			NOT = { scope:story.var:rulers_choice = flag:do_nothing }
		}
		ai_chance = {
			base = 0
			# Modifiers based on demand
			modifier = {
				add = 90
				OR = {
					scope:story.var:rulers_choice = flag:execute_both
					scope:story.var:rulers_choice = flag:execute_bastard
				}
			}
			modifier = {
				add = 80
				scope:story.var:rulers_choice = flag:send_to_order
			}
			modifier = {
				add = 60
				scope:story.var:rulers_choice = flag:imprison
			}
			modifier = {
				add = 40
				scope:story.var:rulers_choice = flag:bring_to_court
			}
			modifier = {
				add = 30
				scope:story.var:rulers_choice = flag:give_up_claims
			}
			# General boldness modifier
			ai_value_modifier = {
				ai_boldness = 0.2
			}
			# Always accept if should give up
			modifier = {
				factor = 0
				agot_royal_bastard_should_give_up = yes
			}
		}
		scope:story = {
			set_variable = {
				name = response_to_demand
				value = flag:reject
			}
		}
	}

	option = { # Accept
		name = {
			trigger = { scope:story.var:it_ruler_response = flag:harsh }
			text = agot_bastard_event.demand_accept_harsh
		}
		name = {
			trigger = { scope:story.var:it_ruler_response = flag:light }
			text = agot_bastard_event.demand_accept_light
		}
		flavor = agot_bastard_event.demand_accept_flavor
		trigger = {
			NOT = { scope:story.var:rulers_choice = flag:do_nothing }
		}
		ai_chance = {
			base = 0
			# Modifiers based on demand
			modifier = {
				add = 10
				OR = {
					scope:story.var:rulers_choice = flag:execute_both
					scope:story.var:rulers_choice = flag:execute_bastard
				}
			}
			modifier = {
				add = 20
				scope:story.var:rulers_choice = flag:send_to_order
			}
			modifier = {
				add = 40
				scope:story.var:rulers_choice = flag:imprison
			}
			modifier = {
				add = 60
				scope:story.var:rulers_choice = flag:bring_to_court
			}
			modifier = {
				add = 70
				scope:story.var:rulers_choice = flag:give_up_claims
			}
			# Modifiers based on traits
			modifier = {
				add = 20
				OR = {
					scope:story.var:rulers_choice = flag:execute_both
					scope:story.var:rulers_choice = flag:execute_bastard
				}
				OR = {
					has_trait = depressed_1
					has_trait = depressed_genetic
				}
			}
			modifier = {
				add = -50
				OR = {
					scope:story.var:rulers_choice = flag:execute_both
					scope:story.var:rulers_choice = flag:execute_bastard
					scope:story.var:rulers_choice = flag:send_to_order
					scope:story.var:rulers_choice = flag:imprison
				}
				OR = {
					has_trait = ambitious
					has_trait = arrogant
				}
			}
			modifier = {
				add = -15
				scope:story.var:rulers_choice = flag:bring_to_court
				OR = {
					has_trait = arrogant # How dare they demand this
					has_trait = ambitious # I want to stay in power
				}
			}
			modifier = {
				add = -10
				scope:story.var:rulers_choice = flag:give_up_claims
				OR = {
					has_trait = ambitious # I want to keep useful claims
					has_trait = just # This isn't lawful
				}
			}
			modifier = {
				add = 40
				OR = {
					scope:story.var:rulers_choice = flag:send_to_order
					scope:story.var:rulers_choice = flag:imprison
					scope:story.var:rulers_choice = flag:bring_to_court
					scope:story.var:rulers_choice = flag:give_up_claims
				}
				OR = {
					has_trait = humble # I don't want to make a fuss
					has_trait = content # I don't mind giving up power
				}
			}
			# General boldness modifier
			ai_value_modifier = {
				ai_boldness = -0.2
			}
		}
		# Resolve acceptance effects
		if = {
			limit = {
				OR = {
					scope:story.var:rulers_choice = flag:execute_both
					scope:story.var:rulers_choice = flag:execute_bastard
				}
			}
			death = {
				killer = scope:story.var:it_ruler
				death_reason = death_execution
			}
			scope:story.var:it_ruler = {
				trigger_event = agot_events_bastard.1002
			}
		}
		else_if = {
			limit = { scope:story.var:rulers_choice = flag:send_to_order }
			remove_character_flag = awaiting_bastardry_result
			if = {
				limit = { is_male = yes }
				agot_send_to_nightswatch_effect = {
					ACTOR = scope:story.var:it_ruler
					NIGHTSWATCH_CANDIDATE = scope:story.var:bastard
				}
			}
			else = {
				agot_send_to_silent_sisters_effect = {
					ACTOR = scope:story.var:it_ruler
					SILENT_SISTER_CANDIDATE = scope:story.var:bastard
				}
			}
			scope:story.var:it_ruler = {
				trigger_event = agot_events_bastard.1003
			}
		}
		else_if = {
			limit = { scope:story.var:rulers_choice = flag:imprison }
			scope:story.var:it_ruler = {
				trigger_event = agot_events_bastard.1004
				imprison = {
					target = root
					type = dungeon
				}
			}
			if = { # Depose if leading organisation that would probably pick a new leader
				limit = {
					OR = {
						has_government = silent_sisterhood_government
						has_government = nights_watch_government
						has_government = the_citadel_government
					}
				}
				add_character_flag = do_not_kill_on_depose
				agot_depose_effect = yes
			}
		}
		else_if = {
			limit = { scope:story.var:rulers_choice = flag:bring_to_court }
			# This usually has a negative opinion effect but since it's forced that seems silly.
			hidden_effect = {	#Make all weak claims on your titles into strong claims.
				every_held_title = {
					save_temporary_scope_as = abdicator_title
					every_claimant = {
						limit = { has_weak_claim_on = scope:abdicator_title }
						make_claim_strong = scope:abdicator_title
					}
				}
			}
			remove_character_flag = awaiting_bastardry_result
			add_character_flag = do_not_kill_on_depose
			agot_depose_effect = yes
			set_employer = scope:story.var:it_ruler
			scope:story.var:it_ruler = {
				trigger_event = agot_events_bastard.1005
			}
		}
		else_if = {
			limit = { scope:story.var:rulers_choice = flag:give_up_claims }
			remove_claim = title:e_the_iron_throne
			remove_claim = title:d_kings_landing
			remove_claim = title:c_kings_landing
			remove_claim = title:k_dragonstone
			remove_claim = title:d_dragonstone
			remove_claim = title:c_dragonstone
			remove_character_flag = awaiting_bastardry_result
			add_character_flag = forswore_royal_claims
			# This is a letter of the bastard giving them up so send to everyone
			scope:story.var:it_ruler = {
				trigger_event = agot_events_bastard.1006
			}
			title:e_the_iron_throne = {
				every_de_jure_county_holder = {
					limit = {
						NOT = { this = scope:story.var:bastard }
					}
					trigger_event = agot_events_bastard.1006
				}
			}
		}
		scope:story = {
			set_variable = {
				name = response_to_demand
				value = flag:accept
			}
		}
	}

	option = {
		name = agot_bastard_event.no_demand_acknowledge
		trigger = {
			scope:story.var:rulers_choice = flag:do_nothing
		}
		scope:story = {
			end_story = yes
		}
	}
}

agot_events_bastard.0980 = { # General letter to realm for both execution demand
	type = letter_event
	opening = {
		desc = agot_bastard_event.0980.opening
	}
	desc =  agot_bastard_event.0980.desc
	sender = {
		character = scope:story.var:it_ruler
	}

	immediate = {
		scope:story = {
			var:bastard = {
				save_scope_as = reveal_scope
			}
			var:employer = {
				save_scope_as = revealer_employer
			}
		}
	}

	option = {
		name = agot_bastard_event.0980.a
		add_opinion = {
			modifier = extreme_unjust_demand_opinion
			target = scope:story.var:it_ruler
		}
	}
}

agot_events_bastard.0981 = { # General letter to realm for single execution demand
	type = letter_event
	opening = {
		desc = agot_bastard_event.0981.opening
	}
	desc =  agot_bastard_event.0981.desc
	sender = {
		character = scope:story.var:it_ruler
	}

	immediate = {
		scope:story = {
			var:bastard = {
				save_scope_as = reveal_scope
			}
		}
	}

	option = {
		name = agot_bastard_event.0981.a
		add_opinion = {
			modifier = unjust_demand_opinion
			target = scope:story.var:it_ruler
		}
	}
}

agot_events_bastard.0982 = { # General letter to realm for nights watch demand
	type = letter_event
	opening = {
		desc = agot_bastard_event.0982.opening
	}
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:story.var:bastard = { is_male = yes } }
				desc = agot_bastard_event.0982.desc.male
			}
			desc = agot_bastard_event.0982.desc.female
		}
	}
	sender = {
		character = scope:story.var:it_ruler
	}

	immediate = {
		scope:story = {
			var:bastard = {
				save_scope_as = reveal_scope
			}
		}
	}

	option = {
		name = agot_bastard_event.0982.a
		add_opinion = {
			modifier = unfair_demand_opinion
			target = scope:story.var:it_ruler
		}
	}
}

agot_events_bastard.0983 = { # General letter to realm for king imprison demand
	type = letter_event
	opening = {
		desc = agot_bastard_event.0983.opening
	}
	desc =  agot_bastard_event.0983.desc
	sender = {
		character = scope:story.var:it_ruler
	}

	immediate = {
		scope:story = {
			var:bastard = {
				save_scope_as = reveal_scope
			}
		}
	}

	option = {
		name = agot_bastard_event.0983.a
		add_opinion = {
			modifier = unfair_demand_opinion
			target = scope:story.var:it_ruler
		}
	}
}

agot_events_bastard.0984 = { # General letter to realm for king hostage demand
	type = letter_event
	opening = {
		desc = agot_bastard_event.0984.opening
	}
	desc =  agot_bastard_event.0984.desc
	sender = {
		character = scope:story.var:it_ruler
	}

	immediate = {
		scope:story = {
			var:bastard = {
				save_scope_as = reveal_scope
			}
		}
	}

	option = {
		name ={
			trigger = {
				scope:story.var:bastard = { is_landed = yes }
			}
			text =  agot_bastard_event.0984.a.landed
		}
		name ={
			trigger = {
				scope:story.var:bastard = { is_landed = no }
			}
			text =  agot_bastard_event.0984.a.courtier
		}
		if = {
			limit = { scope:story.var:bastard = { is_landed = yes } }
			add_opinion = {
				modifier = unfair_demand_opinion
				target = scope:story.var:it_ruler
			}
		}
	}
}

agot_events_bastard.0985 = { # General letter to realm for king give up claims demand
	type = letter_event
	opening = {
		desc = agot_bastard_event.0985.opening
	}
	desc =  agot_bastard_event.0985.desc
	sender = {
		character = scope:story.var:it_ruler
	}

	immediate = {
		scope:story = {
			var:bastard = {
				save_scope_as = reveal_scope
			}
		}
	}

	option = {
		name = agot_bastard_event.0985.a
	}
}

agot_events_bastard.0990 = { # Marriage pre-war for alliance (where applicable)
	title = agot_bastard_event.0990.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:story.var:bastard = {
						is_ruler = yes
					}
				}
				desc = {
					first_valid = {
						triggered_desc = {
							trigger = {
								any_in_list = {
									list = choices
									count > 1
								}
							}
							desc = agot_bastard_event.0990.desc.landed
						}
						desc = agot_bastard_event.0990.desc.landed_singular
					}
				}
			}
			triggered_desc = {
				trigger = {
					scope:story.var:bastard = {
						any_in_list = {
							list = choices
							count > 1
						}
					}
				}
				desc = agot_bastard_event.0990.desc.courtier
			}
			desc = agot_bastard_event.0990.desc.courtier_singular
		}
	}
	theme = marriage
	left_portrait = scope:story.var:bastard
	right_portrait = scope:right_portrait
	lower_left_portrait = scope:potential_spouse_1
	lower_center_portrait = scope:potential_spouse_2
	lower_right_portrait = scope:potential_spouse_3

	immediate = {
		if = {
			limit = { scope:story.var:bastard = { is_ruler = no } }
			save_scope_as = right_portrait
		}
		else = {
			scope:story.var:it_ruler = {
				save_scope_as = right_portrait
			}
		}

		# Get scopes from the story
		scope:story = {
			var:bastard = {
				save_scope_as = reveal_scope
			}
			var:it_ruler = {
				save_scope_as = ruler_scope
			}
		}
	}

	option = { # Marry option 1
		name = {
			trigger = {
				scope:story.var:bastard = { is_ruler = yes }
			}
			text = agot_bastard_event.0990.a
		}
		name = {
			trigger = {
				scope:story.var:bastard = { is_ruler = no }
			}
			text = agot_bastard_event.0990.a.they
		}
		trigger = {
			scope:potential_spouse_1 ?= {
				exists = yes
				is_alive = yes
			}
		}
		ai_chance = {
			base = 0
			opinion_modifier = {
				opinion_target = scope:potential_spouse_1
			}
		}
		if = {
			limit = { scope:story.var:bastard = { is_ruler = yes is_male = yes } }
			if = {
				limit = { scope:potential_spouse_1.age >= 16 scope:story.var:bastard.age >= 16 }
				marry = scope:potential_spouse_1
			}
			else = {
				create_betrothal = scope:potential_spouse_1
			}
		}
		else_if = {
			limit = { scope:story.var:bastard = { is_ruler = yes is_male = no } }
			if = {
				limit = { scope:potential_spouse_1.age >= 16 scope:story.var:bastard.age >= 16 }
				marry_matrilineal = scope:potential_spouse_1
			}
			else = {
				create_betrothal_matrilineal = scope:potential_spouse_1
			}
		}
		else_if = {
			limit = { scope:story.var:bastard = { is_ruler = no is_male = yes } }
			if = {
				limit = { scope:potential_spouse_1.age >= 16 scope:story.var:bastard.age >= 16 }
				scope:story.var:bastard = {
					marry = scope:potential_spouse_1
				}
			}
			else = {
				scope:story.var:bastard = {
					create_betrothal = scope:potential_spouse_1
				}
			}
		}
		else_if = {
			limit = { scope:story.var:bastard = { is_ruler = no is_male = no } }
			if = {
				limit = { scope:potential_spouse_1.age >= 16 scope:story.var:bastard.age >= 16 }
				scope:story.var:bastard = {
					marry_matrilineal = scope:potential_spouse_1
				}
			}
			else = {
				scope:story.var:bastard = {
					create_betrothal_matrilineal = scope:potential_spouse_1
				}
			}
		}
		create_alliance = {
			target = scope:potential_spouse_1.var:alliance_target
			allied_through_owner = scope:story.var:bastard
			allied_through_target = scope:potential_spouse_1
		}
		scope:potential_spouse_1 = {
			save_scope_as = chosen_spouse
		}
	}

	option = { # Marry option 2
		name = {
			trigger = {
				scope:story.var:bastard = { is_ruler = yes }
			}
			text = agot_bastard_event.0990.b
		}
		name = {
			trigger = {
				scope:story.var:bastard = { is_ruler = no }
			}
			text = agot_bastard_event.0990.b.they
		}
		trigger = {
			scope:potential_spouse_2 ?= {
				exists = yes
				is_alive = yes
			}
		}
		ai_chance = {
			base = 0
			opinion_modifier = {
				opinion_target = scope:potential_spouse_2
			}
		}
		if = {
			limit = { scope:story.var:bastard = { is_ruler = yes is_male = yes } }
			if = {
				limit = { scope:potential_spouse_2.age >= 16 scope:story.var:bastard.age >= 16 }
				marry = scope:potential_spouse_2
			}
			else = {
				create_betrothal = scope:potential_spouse_2
			}
		}
		else_if = {
			limit = { scope:story.var:bastard = { is_ruler = yes is_male = no } }
			if = {
				limit = { scope:potential_spouse_2.age >= 16 scope:story.var:bastard.age >= 16 }
				marry_matrilineal = scope:potential_spouse_2
			}
			else = {
				create_betrothal_matrilineal = scope:potential_spouse_2
			}
		}
		else_if = {
			limit = { scope:story.var:bastard = { is_ruler = no is_male = yes } }
			if = {
				limit = { scope:potential_spouse_2.age >= 16 scope:story.var:bastard.age >= 16 }
				scope:story.var:bastard = {
					marry = scope:potential_spouse_2
				}
			}
			else = {
				scope:story.var:bastard = {
					create_betrothal = scope:potential_spouse_2
				}
			}
		}
		else_if = {
			limit = { scope:story.var:bastard = { is_ruler = no is_male = no } }
			if = {
				limit = { scope:potential_spouse_2.age >= 16 scope:story.var:bastard.age >= 16 }
				scope:story.var:bastard = {
					marry_matrilineal = scope:potential_spouse_2
				}
			}
			else = {
				scope:story.var:bastard = {
					create_betrothal_matrilineal = scope:potential_spouse_2
				}
			}
		}
		create_alliance = {
			target = scope:potential_spouse_2.var:alliance_target
			allied_through_owner = scope:story.var:bastard
			allied_through_target = scope:potential_spouse_2
		}
		scope:potential_spouse_2 = {
			save_scope_as = chosen_spouse
		}
	}

	option = { # Marry option 3
		name = {
			trigger = {
				scope:story.var:bastard = { is_ruler = yes }
			}
			text = agot_bastard_event.0990.c
		}
		name = {
			trigger = {
				scope:story.var:bastard = { is_ruler = no }
			}
			text = agot_bastard_event.0990.c.they
		}
		trigger = {
			scope:potential_spouse_3 ?= {
				exists = yes
				is_alive = yes
			}
		}
		ai_chance = {
			base = 0
			opinion_modifier = {
				opinion_target = scope:potential_spouse_3
			}
		}
		if = {
			limit = { scope:story.var:bastard = { is_ruler = yes is_male = yes } }
			if = {
				limit = { scope:potential_spouse_3.age >= 16 scope:story.var:bastard.age >= 16 }
				marry = scope:potential_spouse_3
			}
			else = {
				create_betrothal = scope:potential_spouse_3
			}
		}
		else_if = {
			limit = { scope:story.var:bastard = { is_ruler = yes is_male = no } }
			if = {
				limit = { scope:potential_spouse_3.age >= 16 scope:story.var:bastard.age >= 16 }
				marry_matrilineal = scope:potential_spouse_3
			}
			else = {
				create_betrothal_matrilineal = scope:potential_spouse_3
			}
		}
		else_if = {
			limit = { scope:story.var:bastard = { is_ruler = no is_male = yes } }
			if = {
				limit = { scope:potential_spouse_3.age >= 16 scope:story.var:bastard.age >= 16 }
				scope:story.var:bastard = {
					marry = scope:potential_spouse_3
				}
			}
			else = {
				scope:story.var:bastard = {
					create_betrothal = scope:potential_spouse_3
				}
			}
		}
		else_if = {
			limit = { scope:story.var:bastard = { is_ruler = no is_male = no } }
			if = {
				limit = { scope:potential_spouse_3.age >= 16 scope:story.var:bastard.age >= 16 }
				scope:story.var:bastard = {
					marry_matrilineal = scope:potential_spouse_3
				}
			}
			else = {
				scope:story.var:bastard = {
					create_betrothal_matrilineal = scope:potential_spouse_3
				}
			}
		}
		create_alliance = {
			target = scope:potential_spouse_3.var:alliance_target
			allied_through_owner = scope:story.var:bastard
			allied_through_target = scope:potential_spouse_3
		}
		scope:potential_spouse_3 = {
			save_scope_as = chosen_spouse
		}
	}

	option = {
		name = {
			trigger = {
				scope:story.var:bastard = { is_ruler = yes }
			}
			text = agot_bastard_event.0990.d
		}
		name = {
			trigger = {
				scope:story.var:bastard = { is_ruler = no }
			}
			text = agot_bastard_event.0990.d.they
		}
	}

	after = {
		clear_saved_scope = potential_spouse_1
		clear_saved_scope ?= potential_spouse_2
		clear_saved_scope ?= potential_spouse_3
		scope:chosen_spouse ?= {
			if = {
				limit = {
					OR = {
						is_primary_heir_of = var:alliance_target
						father = {
							is_primary_heir_of = scope:chosen_spouse.var:alliance_target
						}
						mother = {
							is_primary_heir_of = scope:chosen_spouse.var:alliance_target
						}
					}
				}
				add_trait = disinherited
			}
		}
		clear_saved_scope = chosen_spouse
	}
}

agot_events_bastard.0991 = { # War declaration
	hidden =  yes
	immediate = {
		if = {
			limit = {
				scope:story.var:bastard = { has_any_nickname = yes }
			}
			start_war = {
				cb = agot_bastard_claimant_war
				target = scope:story.var:it_ruler
				claimant = scope:story.var:bastard
				target_title = title:e_the_iron_throne
				target_title = title:k_the_crownlands
				target_title = title:d_kings_landing
				target_title = title:c_kings_landing
				target_title = title:k_dragonstone
				target_title = title:d_dragonstone
				target_title = title:c_dragonstone
			}
		}
		else = {
			start_war = {
				cb = agot_bastard_claimant_war_no_nickname
				target = scope:story.var:it_ruler
				claimant = scope:story.var:bastard
				target_title = title:e_the_iron_throne
				target_title = title:k_the_crownlands
				target_title = title:d_kings_landing
				target_title = title:c_kings_landing
				target_title = title:k_dragonstone
				target_title = title:d_dragonstone
				target_title = title:c_dragonstone
			}
		}
		scope:story.var:bastard = {
			remove_character_flag = awaiting_bastardry_result
		}
	}
}

agot_events_bastard.0992 = { # Rebel war declaration alert
	title = agot_bastard_event.0992.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					this = character:Stark_3
					scope:story.var:bastard = {
						is_character_stark_7 = yes
					}
					scope:story.var:it_ruler = character:Baratheon_2
				}
				desc = agot_bastard_event.0992.desc.ned
			}
			triggered_desc = {
				trigger = {
					scope:story.var:bastard.house = scope:story.var:it_ruler.house
				}
				desc = agot_bastard_event.0992.desc.same
			}
			desc = agot_bastard_event.0992.desc
		}
	}
	trigger = {
		NOT = { has_character_flag = pressing_own_bastard_claim }
	}
	theme = war
	left_portrait = {
		character = root
		animation = war_attacker
	}
	right_portrait = {
		character = scope:story.var:it_ruler
		animation = war_defender
	}

	immediate = {
		scope:story = {
			var:bastard = {
				save_scope_as = reveal_scope
			}
			var:it_ruler = {
				save_scope_as = ruler_scope
			}
		}
	}

	option = {
		name = agot_bastard_event.0992.a
	}
}

agot_events_bastard.0993 = { # King war declaration alert
	title = agot_bastard_event.0993.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					this = character:Baratheon_2
					scope:story.var:bastard = {
						is_character_stark_7 = yes
						employer = character:Stark_3
					}
				}
				desc = agot_bastard_event.0993.desc.robert
			}
			triggered_desc = {
				trigger = {
					scope:story.var:bastard.house = scope:story.var:it_ruler.house
				}
				desc = agot_bastard_event.0993.desc.same
			}
			desc = agot_bastard_event.0993.desc
		}
	}
	theme = war
	left_portrait = {
		character = scope:claimant
		animation = war_attacker
	}
	right_portrait = {
		character = root
		animation = war_defender
	}
	override_background = {
		reference = agot_iron_throne
	}

	immediate = {
		scope:story = {
			var:bastard = {
				save_scope_as = reveal_scope
			}
			var:it_ruler = {
				save_scope_as = ruler_scope
			}
		}
	}

	option = {
		name = agot_bastard_event.0993.a
	}
}

agot_events_bastard.0994 = { # End event for king (win)
	title = agot_bastard_event.0994.t
	desc = agot_bastard_event.0994.desc
	theme = war

	override_background = {
		reference = agot_iron_throne
	}
	left_portrait = {
		character = scope:claimant
		animation = fear
	}
	right_portrait = {
		character = root
		animation = war_over_win
	}

	option = {
		name = agot_bastard_event.0994.a
	}
}

agot_events_bastard.0995 = { # End event for bastard (win)
	title = agot_bastard_event.0995.t
	desc = agot_bastard_event.0995.desc
	theme = crown
	right_portrait = {
		character = root
		animation = celebrate_sword
	}
	override_sound = { reference = "event:/MUSIC/Cues/Events/Sacral Happening/mx_cue_epic_sacral_moment" }
	override_background = {
		reference = agot_iron_throne
	}

	immediate = {
		remove_trait = bastard
		remove_trait = bastard_founder
		add_trait = legitimized_bastard
		agot_crown_bastard_nickname_effect = yes
		# Scopes
		if = {
			limit = {
				exists = father.house
			}
			father.house = {
				save_scope_as = father_house
			}
		}
		if = {
			limit = {
				exists = mother.house
			}
			mother.house = {
				save_scope_as = mother_house
			}
		}
		house = {
			save_scope_as = checking_house
		}
		primary_title = {
			save_scope_as = title
		}
		if = {
			limit = {
				has_title = title:c_kings_landing
				NOT = { capital_county = title:c_kings_landing }
			}
			set_realm_capital = title:c_kings_landing
		}
		if = { # Ally spouse family if created from event
			limit = { primary_spouse.var:alliance_target ?= { exists = yes } }
			create_alliance = {
				target = primary_spouse.var:alliance_target
				allied_through_owner = root
				allied_through_target = primary_spouse
			}
		}
	}

	option = { # Father house
		name = {
			trigger = {
				is_male = yes
			}
			text = agot_bastard_event.0995.a.king
		}
		name = {
			trigger = {
				is_male = no
			}
			text = agot_bastard_event.0995.a.queen
		}
		trigger = {
			exists = scope:father_house
		}
		ai_chance = {
			base = 100
		}
		flavor = agot_bastard_event.0995.flavor
		set_house = scope:father_house
		every_child = {
			limit = {
				house = scope:checking_house
			}
			set_house = scope:father_house
		}
		hidden_effect = {
			scope:title = { update_dynamic_coa = yes }
			trigger_event = agot_coa_events.0001
		}
	}

	option = { # Mother house
		name = {
			trigger = {
				is_male = yes
			}
			text = agot_bastard_event.0995.b.king
		}
		name = {
			trigger = {
				is_male = no
			}
			text = agot_bastard_event.0995.b.queen
		}
		trigger = {
			exists = scope:mother_house
		}
		ai_chance = {
			base = 0 # This is just not really lore-accurate, but it's fun for players
		}
		flavor = agot_bastard_event.0995.flavor
		set_house = scope:mother_house
		every_child = {
			limit = {
				house = scope:checking_house
			}
			set_house = scope:mother_house
		}
		hidden_effect = {
			scope:title = { update_dynamic_coa = yes }
			trigger_event = agot_coa_events.0001
		}
	}

	#option = { TODO: Create new house (give selection if JS, create new otherwise)
	#	name = agot_bastard_event.0994.c
	#}
}

agot_events_bastard.0996 = { # Helped bastard win war closing event
	title = agot_bastard_event.0996.t
	desc = agot_bastard_event.0996.desc
	theme = crown
	left_portrait = {
		character = root
		animation = throne_room_kneel_1
	}
	right_portrait = {
		character = scope:claimant
		animation = celebrate_sword
	}
	override_sound = { reference = "event:/MUSIC/Cues/Events/Sacral Happening/mx_cue_epic_sacral_moment" }
	override_background = {
		reference = agot_iron_throne
	}
	trigger = { is_ai = no }

	option = {
		name = agot_bastard_event.0996.a
		set_player_character = scope:claimant
	}

	option = {
		name = agot_bastard_event.0996.b
	}
}

# Below here is non-immediate war responses, i.e. accepted demands and follow-ups

agot_events_bastard.1001 = { # Ruler notified of double execute acceptance
	type = character_event
	title = agot_bastard_event.1001.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					this = character:Baratheon_2
					exists = scope:story.var:employer
					scope:story.var:employer = character:Stark_3
					scope:story.var:bastard = {
						is_character_stark_7 = yes
					}
				}
				desc = agot_bastard_event.1001.desc.jon
			}
			desc = agot_bastard_event.1001.desc
		}
	}

	override_background = {
		reference = agot_iron_throne
	}
	override_icon = {
		reference = "gfx/interface/icons/event_types/type_war.dds"
	}
	theme = court
	right_portrait = {
		character = root
		animation = rage
	}
	lower_right_portrait = scope:story.var:bastard
	lower_left_portrait = scope:story.var:employer

	option = {
		name = agot_bastard_event.1001.a
	}
}

agot_events_bastard.1002 = { # Ruler notified of execute acceptance
	type = character_event
	title = agot_bastard_event.1002.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					this = character:Baratheon_2
					scope:story.var:bastard = {
						is_character_stark_7 = yes
					}
				}
				desc = agot_bastard_event.1002.desc.jon
			}
			desc = agot_bastard_event.1002.desc
		}
	}

	override_background = {
		reference = agot_iron_throne
	}
	override_icon = {
		reference = "gfx/interface/icons/event_types/type_war.dds"
	}
	theme = court
	right_portrait = root
	left_portrait = scope:story.var:bastard

	option = {
		name = agot_bastard_event.1002.a
	}
}

agot_events_bastard.1003 = { # Ruler notified of NW/SS acceptance
	type = character_event
	title = agot_bastard_event.1003.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:story.var:bastard = {
						is_male = yes
					}
				}
				desc = agot_bastard_event.1003.desc.male
			}
			desc = agot_bastard_event.1003.desc.female
		}
	}

	override_background = {
		reference = agot_iron_throne
	}

	theme = court
	right_portrait = root
	lower_left_portrait = scope:story.var:bastard

	option = {
		name = agot_bastard_event.1003.a
	}
}

agot_events_bastard.1004 = { # Ruler notified of imprison acceptance
	type = character_event
	title = agot_bastard_event.1004.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					this = character:Baratheon_2
					scope:story.var:bastard = {
						is_character_stark_7 = yes
					}
				}
				desc = agot_bastard_event.1004.desc.jon
			}
			desc = agot_bastard_event.1004.desc
		}
	}

	override_background = {
		reference = agot_iron_throne
	}

	theme = court
	right_portrait = root
	left_portrait = {
		character = scope:story.var:bastard
		triggered_animation = {
			trigger = {
				has_trait = craven
			}
			animation = fear
		}
	}

	option = {
		name = agot_bastard_event.1004.a
		# TODO: Trigger trial by combat event for reveal_scope when feature is implemented
	}
}

agot_events_bastard.1005 = { # Ruler notified of hostage acceptance
	type = character_event
	title = agot_bastard_event.1005.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					this = character:Baratheon_2
					scope:story.var:bastard = {
						is_character_stark_7 = yes
					}
				}
				desc = agot_bastard_event.1005.desc.jon
			}
			desc = agot_bastard_event.1005.desc
		}
	}

	override_background = {
		reference = agot_iron_throne
	}

	theme = court
	right_portrait = root
	left_portrait = scope:story.var:bastard

	option = { # Do nothing option
		name = agot_bastard_event.1005.a
		ai_chance = {
			base = 50
		}
	}

	option = { # Invite to kingsguard if appropriate
		name = agot_bastard_event.1005.b
		trigger = {
			scope:story.var:bastard = {
				prowess >= 18 # Somewhat high
			}
			AND = {
				primary_title = {
					has_variable = kingsguard
				}
				any_living_kingsguard = {
					#Check for the 7 to stop appointing to replace guys in prison
					top_liege = root
					count < 7
				}
				OR = {
					NOT = {
						exists = court_position:zz_kingsguard_lord_commander_court_position
					}
					can_employ_court_position_type = zz_kingsguard_court_position
				}
			}
		}
		ai_chance = {
			base = 200 # This is kind of a no brainer if you've got the space and they're half decent
			modifier = {
				add = 100
				has_trait = trusting
			}
			modifier = {
				add = -100
				has_trait = paranoid
			}
		}
		save_scope_as = king
		scope:story.var:bastard = {
			trigger_event = agot_kingsguard.1004
		}
	}

	option = { # Actually imprison tee hee
		name = agot_bastard_event.1005.c
		trigger = {
			OR = {
				NOT = { scope:story.var:bastard.dynasty = root.dynasty } # Not same dynasty unless
				AND = { # you're both paranoid AND some other harsh trait
					has_trait = paranoid
					OR = {
						has_trait = sadistic
						has_trait = callous
						has_trait = arbitrary
					}
				}
			}
		}
		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_compassion = -0.25
				ai_honor = -0.25
				ai_boldness = 0.05
			}
		}
		imprison = {
			target = scope:story.var:bastard
			type = dungeon
		}
		add_tyranny = 20 # Hardly sporting is it?
		# TODO: Trigger trial by combat event for reveal_scope when feature is implemented
	}

	option = { # Legitimize if same dynasty
		name = agot_bastard_event.1005.d
		trigger = {
			scope:story.var:bastard = {
				dynasty = root.dynasty
				has_trait = bastard
			}
		}
		ai_chance = {
			base = 50
			modifier = { # If I'm a compassionate person
				add = 25
				has_trait = compassionate
			}
			opinion_modifier = { # Or if I like them
				who = root
				opinion_target = scope:story.var:bastard
				multiplier = 0.5
			}
			modifier = { # But not if it messes with my existing childrens succession AND I like my heir
				add = -100
				AND = {
					NOT = { has_trait = arbitrary } # Aegon IV much?
					scope:story.var:bastard = {
						father = root
						is_male = yes
					}
					any_child = {
						is_primary_heir_of = root
					}
					opinion = {
						target = primary_heir
						value > 0
					}
				}
			}
		}
		scope:story.var:bastard = {
			remove_trait = bastard
			remove_trait = bastard_founder
			add_trait = legitimized_bastard
			agot_remove_bastard_nickname_effect = yes
			add_opinion = {
				modifier = grateful_opinion
				opinion = 30
				target = root
			}
		}
	}
}

agot_events_bastard.1006 = { # Realm notified of claims forswear acceptance
	type = letter_event
	opening = {
		desc = agot_bastard_event.1006.opening
	}
	desc =  agot_bastard_event.1006.desc
	sender = {
		character = scope:story.var:bastard
	}

	option = {
		name = agot_bastard_event.1006.a
	}
}

agot_events_bastard.1019 = { # Maintainance event for bastard if, for some reason, resolution takes >1 year
	hidden = yes
	immediate = {
		remove_character_flag = awaiting_bastardry_result
	}
}